
main.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__ctors_end>
       4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
       8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
       c:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__vector_3>
      10:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__vector_4>
      14:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      18:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      1c:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__vector_7>
      20:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      24:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      28:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      2c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      30:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      34:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      38:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      3c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      40:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      44:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      48:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      4c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      50:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      54:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      58:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      5c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      60:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_24>
      64:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      68:	c2 03       	fmuls	r20, r18
      6a:	70 03       	mulsu	r23, r16
      6c:	70 03       	mulsu	r23, r16
      6e:	70 03       	mulsu	r23, r16
      70:	70 03       	mulsu	r23, r16
      72:	70 03       	mulsu	r23, r16
      74:	70 03       	mulsu	r23, r16
      76:	70 03       	mulsu	r23, r16
      78:	cc 03       	fmulsu	r20, r20
      7a:	70 03       	mulsu	r23, r16
      7c:	70 03       	mulsu	r23, r16
      7e:	70 03       	mulsu	r23, r16
      80:	70 03       	mulsu	r23, r16
      82:	70 03       	mulsu	r23, r16
      84:	70 03       	mulsu	r23, r16
      86:	70 03       	mulsu	r23, r16
      88:	cc 03       	fmulsu	r20, r20
      8a:	70 03       	mulsu	r23, r16
      8c:	70 03       	mulsu	r23, r16
      8e:	70 03       	mulsu	r23, r16
      90:	70 03       	mulsu	r23, r16
      92:	70 03       	mulsu	r23, r16
      94:	70 03       	mulsu	r23, r16
      96:	70 03       	mulsu	r23, r16
      98:	d4 03       	fmuls	r21, r20
      9a:	70 03       	mulsu	r23, r16
      9c:	70 03       	mulsu	r23, r16
      9e:	70 03       	mulsu	r23, r16
      a0:	70 03       	mulsu	r23, r16
      a2:	70 03       	mulsu	r23, r16
      a4:	70 03       	mulsu	r23, r16
      a6:	70 03       	mulsu	r23, r16
      a8:	e3 03       	fmuls	r22, r19
      aa:	70 03       	mulsu	r23, r16
      ac:	70 03       	mulsu	r23, r16
      ae:	70 03       	mulsu	r23, r16
      b0:	70 03       	mulsu	r23, r16
      b2:	70 03       	mulsu	r23, r16
      b4:	70 03       	mulsu	r23, r16
      b6:	70 03       	mulsu	r23, r16
      b8:	d4 03       	fmuls	r21, r20
      ba:	70 03       	mulsu	r23, r16
      bc:	70 03       	mulsu	r23, r16
      be:	70 03       	mulsu	r23, r16
      c0:	70 03       	mulsu	r23, r16
      c2:	70 03       	mulsu	r23, r16
      c4:	70 03       	mulsu	r23, r16
      c6:	70 03       	mulsu	r23, r16
      c8:	0e 04       	cpc	r0, r14
      ca:	70 03       	mulsu	r23, r16
      cc:	70 03       	mulsu	r23, r16
      ce:	70 03       	mulsu	r23, r16
      d0:	70 03       	mulsu	r23, r16
      d2:	70 03       	mulsu	r23, r16
      d4:	70 03       	mulsu	r23, r16
      d6:	70 03       	mulsu	r23, r16
      d8:	19 04       	cpc	r1, r9
      da:	70 03       	mulsu	r23, r16
      dc:	70 03       	mulsu	r23, r16
      de:	70 03       	mulsu	r23, r16
      e0:	70 03       	mulsu	r23, r16
      e2:	70 03       	mulsu	r23, r16
      e4:	70 03       	mulsu	r23, r16
      e6:	70 03       	mulsu	r23, r16
      e8:	96 03       	fmuls	r17, r22
      ea:	70 03       	mulsu	r23, r16
      ec:	70 03       	mulsu	r23, r16
      ee:	70 03       	mulsu	r23, r16
      f0:	70 03       	mulsu	r23, r16
      f2:	70 03       	mulsu	r23, r16
      f4:	70 03       	mulsu	r23, r16
      f6:	70 03       	mulsu	r23, r16
      f8:	a9 03       	fmulsu	r18, r17
      fa:	70 03       	mulsu	r23, r16
      fc:	70 03       	mulsu	r23, r16
      fe:	70 03       	mulsu	r23, r16
     100:	70 03       	mulsu	r23, r16
     102:	70 03       	mulsu	r23, r16
     104:	70 03       	mulsu	r23, r16
     106:	70 03       	mulsu	r23, r16
     108:	8a 03       	fmulsu	r16, r18
     10a:	70 03       	mulsu	r23, r16
     10c:	70 03       	mulsu	r23, r16
     10e:	70 03       	mulsu	r23, r16
     110:	70 03       	mulsu	r23, r16
     112:	70 03       	mulsu	r23, r16
     114:	70 03       	mulsu	r23, r16
     116:	70 03       	mulsu	r23, r16
     118:	9d 03       	fmulsu	r17, r21
     11a:	70 03       	mulsu	r23, r16
     11c:	70 03       	mulsu	r23, r16
     11e:	70 03       	mulsu	r23, r16
     120:	70 03       	mulsu	r23, r16
     122:	70 03       	mulsu	r23, r16
     124:	70 03       	mulsu	r23, r16
     126:	70 03       	mulsu	r23, r16
     128:	b9 03       	fmulsu	r19, r17
     12a:	70 03       	mulsu	r23, r16
     12c:	70 03       	mulsu	r23, r16
     12e:	70 03       	mulsu	r23, r16
     130:	70 03       	mulsu	r23, r16
     132:	70 03       	mulsu	r23, r16
     134:	70 03       	mulsu	r23, r16
     136:	70 03       	mulsu	r23, r16
     138:	b9 03       	fmulsu	r19, r17
     13a:	70 03       	mulsu	r23, r16
     13c:	70 03       	mulsu	r23, r16
     13e:	70 03       	mulsu	r23, r16
     140:	70 03       	mulsu	r23, r16
     142:	70 03       	mulsu	r23, r16
     144:	70 03       	mulsu	r23, r16
     146:	70 03       	mulsu	r23, r16
     148:	b9 03       	fmulsu	r19, r17
     14a:	70 03       	mulsu	r23, r16
     14c:	70 03       	mulsu	r23, r16
     14e:	70 03       	mulsu	r23, r16
     150:	70 03       	mulsu	r23, r16
     152:	70 03       	mulsu	r23, r16
     154:	70 03       	mulsu	r23, r16
     156:	70 03       	mulsu	r23, r16
     158:	b9 03       	fmulsu	r19, r17
     15a:	70 03       	mulsu	r23, r16
     15c:	70 03       	mulsu	r23, r16
     15e:	70 03       	mulsu	r23, r16
     160:	70 03       	mulsu	r23, r16
     162:	70 03       	mulsu	r23, r16
     164:	70 03       	mulsu	r23, r16
     166:	70 03       	mulsu	r23, r16
     168:	81 03       	fmuls	r16, r17
     16a:	70 03       	mulsu	r23, r16
     16c:	70 03       	mulsu	r23, r16
     16e:	70 03       	mulsu	r23, r16
     170:	70 03       	mulsu	r23, r16
     172:	70 03       	mulsu	r23, r16
     174:	70 03       	mulsu	r23, r16
     176:	70 03       	mulsu	r23, r16
     178:	86 03       	fmuls	r16, r22
     17a:	70 03       	mulsu	r23, r16
     17c:	70 03       	mulsu	r23, r16
     17e:	70 03       	mulsu	r23, r16
     180:	70 03       	mulsu	r23, r16
     182:	70 03       	mulsu	r23, r16
     184:	70 03       	mulsu	r23, r16
     186:	70 03       	mulsu	r23, r16
     188:	81 03       	fmuls	r16, r17
     18a:	70 03       	mulsu	r23, r16
     18c:	70 03       	mulsu	r23, r16
     18e:	70 03       	mulsu	r23, r16
     190:	70 03       	mulsu	r23, r16
     192:	70 03       	mulsu	r23, r16
     194:	70 03       	mulsu	r23, r16
     196:	70 03       	mulsu	r23, r16
     198:	86 03       	fmuls	r16, r22
     19a:	70 03       	mulsu	r23, r16
     19c:	70 03       	mulsu	r23, r16
     19e:	70 03       	mulsu	r23, r16
     1a0:	70 03       	mulsu	r23, r16
     1a2:	70 03       	mulsu	r23, r16
     1a4:	70 03       	mulsu	r23, r16
     1a6:	70 03       	mulsu	r23, r16
     1a8:	ee 03       	fmulsu	r22, r22
     1aa:	70 03       	mulsu	r23, r16
     1ac:	70 03       	mulsu	r23, r16
     1ae:	70 03       	mulsu	r23, r16
     1b0:	70 03       	mulsu	r23, r16
     1b2:	70 03       	mulsu	r23, r16
     1b4:	70 03       	mulsu	r23, r16
     1b6:	70 03       	mulsu	r23, r16
     1b8:	46 03       	mulsu	r20, r22
     1ba:	70 03       	mulsu	r23, r16
     1bc:	70 03       	mulsu	r23, r16
     1be:	70 03       	mulsu	r23, r16
     1c0:	70 03       	mulsu	r23, r16
     1c2:	70 03       	mulsu	r23, r16
     1c4:	70 03       	mulsu	r23, r16
     1c6:	70 03       	mulsu	r23, r16
     1c8:	46 03       	mulsu	r20, r22
     1ca:	70 03       	mulsu	r23, r16
     1cc:	70 03       	mulsu	r23, r16
     1ce:	70 03       	mulsu	r23, r16
     1d0:	70 03       	mulsu	r23, r16
     1d2:	70 03       	mulsu	r23, r16
     1d4:	70 03       	mulsu	r23, r16
     1d6:	70 03       	mulsu	r23, r16
     1d8:	5b 03       	fmul	r21, r19
     1da:	70 03       	mulsu	r23, r16
     1dc:	70 03       	mulsu	r23, r16
     1de:	70 03       	mulsu	r23, r16
     1e0:	70 03       	mulsu	r23, r16
     1e2:	70 03       	mulsu	r23, r16
     1e4:	70 03       	mulsu	r23, r16
     1e6:	70 03       	mulsu	r23, r16
     1e8:	b3 03       	fmuls	r19, r19
     1ea:	70 03       	mulsu	r23, r16
     1ec:	70 03       	mulsu	r23, r16
     1ee:	70 03       	mulsu	r23, r16
     1f0:	70 03       	mulsu	r23, r16
     1f2:	70 03       	mulsu	r23, r16
     1f4:	70 03       	mulsu	r23, r16
     1f6:	70 03       	mulsu	r23, r16
     1f8:	b3 03       	fmuls	r19, r19

000001fa <__trampolines_end>:
     1fa:	7b 20       	and	r7, r11
     1fc:	50 6c       	ori	r21, 0xC0	; 192
     1fe:	61 6e       	ori	r22, 0xE1	; 225
     200:	74 20       	and	r7, r4
     202:	20 53       	subi	r18, 0x30	; 48
     204:	61 76       	andi	r22, 0x61	; 97
     206:	65 72       	andi	r22, 0x25	; 37
     208:	20 7d       	andi	r18, 0xD0	; 208
	...

0000020b <__c.2926>:
     20b:	53 74 6f 70 3a 00                                   Stop:.

00000211 <__c.2924>:
     211:	53 74 61 72 74 3a 00                                Start:.

00000218 <__c.2922>:
     218:	42 61 63 6b 00                                      Back.

0000021d <__c.2920>:
     21d:	20 20 20 4c 69 67 68 74 20 4d 65 6e 75 20 20 20        Light Menu   
	...

0000022e <__c.2915>:
     22e:	20 6d 6c 00                                          ml.

00000232 <__c.2913>:
     232:	20 20 57 61 74 65 72 20 41 6d 6f 75 6e 74 20 20       Water Amount  
	...

00000243 <__c.2909>:
     243:	3a 20 4e 6f 20 77 61 74 65 72 00                    : No water.

0000024e <__c.2906>:
     24e:	3a 20 57 61 74 65 72 20 61 74 20 00                 : Water at .

0000025a <__c.2904>:
     25a:	42 61 63 6b 20 20 20 20 20 20 20 20 20 20 20 20     Back            
	...

0000026b <__c.2902>:
     26b:	20 57 61 74 65 72 20 53 63 68 65 64 75 6c 65 20      Water Schedule 
	...

0000027c <__c.2881>:
     27c:	20 20 20 20 20 20 20 20 20 20 20 42 61 63 6b 20                Back 
     28c:	20 00                                                .

0000028e <__c.2879>:
     28e:	2d 00                                               -.

00000290 <__c.2877>:
     290:	4c 3a 00                                            L:.

00000293 <__c.2875>:
     293:	4c 3a 20 6f 66 66 00                                L: off.

0000029a <__c.2873>:
     29a:	2f 2f 00                                            //.

0000029d <__c.2871>:
     29d:	57 3a 00                                            W:.

000002a0 <day_name>:
     2a0:	4d 6f 6e 00 00 00 00 54 75 65 00 00 00 00 57 65     Mon....Tue....We
     2b0:	64 00 00 00 00 54 68 75 00 00 00 00 46 72 69 00     d....Thu....Fri.
     2c0:	00 00 00 53 61 74 00 00 00 00 53 75 6e 00 00 00     ...Sat....Sun...
     2d0:	00 4d 6f 6e 00 00 00 00                             .Mon....

000002d8 <blank>:
     2d8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000002ea <__ctors_end>:
     2ea:	11 24       	eor	r1, r1
     2ec:	1f be       	out	0x3f, r1	; 63
     2ee:	cf ef       	ldi	r28, 0xFF	; 255
     2f0:	d8 e0       	ldi	r29, 0x08	; 8
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	cd bf       	out	0x3d, r28	; 61

000002f6 <__do_copy_data>:
     2f6:	11 e0       	ldi	r17, 0x01	; 1
     2f8:	a0 e0       	ldi	r26, 0x00	; 0
     2fa:	b1 e0       	ldi	r27, 0x01	; 1
     2fc:	e2 e9       	ldi	r30, 0x92	; 146
     2fe:	fd e1       	ldi	r31, 0x1D	; 29
     300:	02 c0       	rjmp	.+4      	; 0x306 <__do_copy_data+0x10>
     302:	05 90       	lpm	r0, Z+
     304:	0d 92       	st	X+, r0
     306:	a4 31       	cpi	r26, 0x14	; 20
     308:	b1 07       	cpc	r27, r17
     30a:	d9 f7       	brne	.-10     	; 0x302 <__do_copy_data+0xc>

0000030c <__do_clear_bss>:
     30c:	22 e0       	ldi	r18, 0x02	; 2
     30e:	a4 e1       	ldi	r26, 0x14	; 20
     310:	b1 e0       	ldi	r27, 0x01	; 1
     312:	01 c0       	rjmp	.+2      	; 0x316 <.do_clear_bss_start>

00000314 <.do_clear_bss_loop>:
     314:	1d 92       	st	X+, r1

00000316 <.do_clear_bss_start>:
     316:	a9 32       	cpi	r26, 0x29	; 41
     318:	b2 07       	cpc	r27, r18
     31a:	e1 f7       	brne	.-8      	; 0x314 <.do_clear_bss_loop>
     31c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <main>
     320:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <_exit>

00000324 <__bad_interrupt>:
     324:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000328 <lcd_write_nibble>:
  lcd_write_nibble(value);
}

void lcd_write_nibble(uint8_t nibble) {

	uint8_t temp = LCD_PORT;
     328:	9b b1       	in	r25, 0x0b	; 11
	if ((nibble>>0) & 0x01) temp |= _BV(LCD_D0); else temp &= ~_BV(LCD_D0);
     32a:	80 ff       	sbrs	r24, 0
     32c:	14 c0       	rjmp	.+40     	; 0x356 <lcd_write_nibble+0x2e>
     32e:	90 61       	ori	r25, 0x10	; 16
	if ((nibble>>1) & 0x01) temp |= _BV(LCD_D1); else temp &= ~_BV(LCD_D1);
     330:	81 ff       	sbrs	r24, 1
     332:	14 c0       	rjmp	.+40     	; 0x35c <lcd_write_nibble+0x34>
     334:	90 62       	ori	r25, 0x20	; 32
	if ((nibble>>2) & 0x01) temp |= _BV(LCD_D2); else temp &= ~_BV(LCD_D2);
     336:	82 ff       	sbrs	r24, 2
     338:	14 c0       	rjmp	.+40     	; 0x362 <lcd_write_nibble+0x3a>
     33a:	90 64       	ori	r25, 0x40	; 64
	if ((nibble>>3) & 0x01) temp |= _BV(LCD_D3); else temp &= ~_BV(LCD_D3);
     33c:	83 fd       	sbrc	r24, 3
     33e:	14 c0       	rjmp	.+40     	; 0x368 <lcd_write_nibble+0x40>
     340:	89 2f       	mov	r24, r25
     342:	8f 77       	andi	r24, 0x7F	; 127

	LCD_PORT=temp;
     344:	8b b9       	out	0x0b, r24	; 11

 // LCD_PORT = (LCD_PORT & 0xff & ~(0x0f << LCD_D0)) | ((nibble & 0x0f) << LCD_D0);

  LCD_PORT = LCD_PORT & ~(1 << LCD_EN);
     346:	5a 98       	cbi	0x0b, 2	; 11
  LCD_PORT = LCD_PORT | (1 << LCD_EN);
     348:	5a 9a       	sbi	0x0b, 2	; 11
  LCD_PORT = LCD_PORT & ~(1 << LCD_EN);
     34a:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34c:	85 e8       	ldi	r24, 0x85	; 133
     34e:	8a 95       	dec	r24
     350:	f1 f7       	brne	.-4      	; 0x34e <lcd_write_nibble+0x26>
     352:	00 00       	nop
     354:	08 95       	ret
}

void lcd_write_nibble(uint8_t nibble) {

	uint8_t temp = LCD_PORT;
	if ((nibble>>0) & 0x01) temp |= _BV(LCD_D0); else temp &= ~_BV(LCD_D0);
     356:	9f 7e       	andi	r25, 0xEF	; 239
	if ((nibble>>1) & 0x01) temp |= _BV(LCD_D1); else temp &= ~_BV(LCD_D1);
     358:	81 fd       	sbrc	r24, 1
     35a:	ec cf       	rjmp	.-40     	; 0x334 <lcd_write_nibble+0xc>
     35c:	9f 7d       	andi	r25, 0xDF	; 223
	if ((nibble>>2) & 0x01) temp |= _BV(LCD_D2); else temp &= ~_BV(LCD_D2);
     35e:	82 fd       	sbrc	r24, 2
     360:	ec cf       	rjmp	.-40     	; 0x33a <lcd_write_nibble+0x12>
     362:	9f 7b       	andi	r25, 0xBF	; 191
	if ((nibble>>3) & 0x01) temp |= _BV(LCD_D3); else temp &= ~_BV(LCD_D3);
     364:	83 ff       	sbrs	r24, 3
     366:	ec cf       	rjmp	.-40     	; 0x340 <lcd_write_nibble+0x18>
     368:	89 2f       	mov	r24, r25
     36a:	80 68       	ori	r24, 0x80	; 128
     36c:	eb cf       	rjmp	.-42     	; 0x344 <lcd_write_nibble+0x1c>

0000036e <lcd_send>:

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
}

void lcd_send(uint8_t value, uint8_t mode) {
     36e:	cf 93       	push	r28
     370:	c8 2f       	mov	r28, r24
	//mode=1 : write data
	//mode=0 : write instruction
  if (mode) {
     372:	61 11       	cpse	r22, r1
     374:	0b c0       	rjmp	.+22     	; 0x38c <lcd_send+0x1e>
    LCD_PORT = LCD_PORT | (1 << LCD_RS);
  } else {
    LCD_PORT = LCD_PORT & ~(1 << LCD_RS);
     376:	58 98       	cbi	0x0b, 0	; 11
  }

  //put in write mode
  LCD_PORT = LCD_PORT & ~(1 << LCD_RW);
     378:	59 98       	cbi	0x0b, 1	; 11
  //send 4 MSbits first
  lcd_write_nibble(value >> 4);
     37a:	8c 2f       	mov	r24, r28
     37c:	82 95       	swap	r24
     37e:	8f 70       	andi	r24, 0x0F	; 15
     380:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_nibble>
  lcd_write_nibble(value);
     384:	8c 2f       	mov	r24, r28
}
     386:	cf 91       	pop	r28

  //put in write mode
  LCD_PORT = LCD_PORT & ~(1 << LCD_RW);
  //send 4 MSbits first
  lcd_write_nibble(value >> 4);
  lcd_write_nibble(value);
     388:	0c 94 94 01 	jmp	0x328	; 0x328 <lcd_write_nibble>

void lcd_send(uint8_t value, uint8_t mode) {
	//mode=1 : write data
	//mode=0 : write instruction
  if (mode) {
    LCD_PORT = LCD_PORT | (1 << LCD_RS);
     38c:	58 9a       	sbi	0x0b, 0	; 11
     38e:	f4 cf       	rjmp	.-24     	; 0x378 <lcd_send+0xa>

00000390 <lcd_on>:
  lcd_clear();
  lcd_on();
}

void lcd_on(void) {
  lcd_displayparams |= LCD_DISPLAYON;
     390:	80 91 b1 01 	lds	r24, 0x01B1
     394:	98 2f       	mov	r25, r24
     396:	94 60       	ori	r25, 0x04	; 4
     398:	90 93 b1 01 	sts	0x01B1, r25

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	8c 60       	ori	r24, 0x0C	; 12
     3a0:	0c 94 b7 01 	jmp	0x36e	; 0x36e <lcd_send>

000003a4 <lcd_init>:
  _delay_ms(0.05);
}

void lcd_init(void) {
  // Configure pins as output
  LCD_DDR = LCD_DDR
     3a4:	8a b1       	in	r24, 0x0a	; 10
     3a6:	87 6f       	ori	r24, 0xF7	; 247
     3a8:	8a b9       	out	0x0a, r24	; 10
     3aa:	8f e3       	ldi	r24, 0x3F	; 63
     3ac:	9c e9       	ldi	r25, 0x9C	; 156
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_init+0xa>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lcd_init+0x10>
     3b4:	00 00       	nop
  //internal reset routine

  // Wait for LCD to become ready (docs say 15ms+)
  _delay_ms(20);

  LCD_PORT = LCD_PORT
     3b6:	8b b1       	in	r24, 0x0b	; 11
     3b8:	88 7f       	andi	r24, 0xF8	; 248
     3ba:	8b b9       	out	0x0b, r24	; 11
     3bc:	8f e0       	ldi	r24, 0x0F	; 15
     3be:	97 e2       	ldi	r25, 0x27	; 39
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_init+0x1c>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <lcd_init+0x22>
     3c6:	00 00       	nop
    & ~(1 << LCD_RS)
    & ~(1 << LCD_RW);

  _delay_ms(5);

  lcd_write_nibble(0x03); // Switch to 4 bit mode
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_nibble>
     3ce:	8f e0       	ldi	r24, 0x0F	; 15
     3d0:	97 e2       	ldi	r25, 0x27	; 39
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lcd_init+0x2e>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <lcd_init+0x34>
     3d8:	00 00       	nop
  _delay_ms(5);
  lcd_write_nibble(0x03); // 2nd time
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_nibble>
     3e0:	8f e0       	ldi	r24, 0x0F	; 15
     3e2:	97 e2       	ldi	r25, 0x27	; 39
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_init+0x40>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <lcd_init+0x46>
     3ea:	00 00       	nop
  _delay_ms(5);
  lcd_write_nibble(0x03); // 3rd time
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_nibble>
     3f2:	8f e0       	ldi	r24, 0x0F	; 15
     3f4:	97 e2       	ldi	r25, 0x27	; 39
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <lcd_init+0x52>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <lcd_init+0x58>
     3fc:	00 00       	nop
  _delay_ms(5);

  lcd_write_nibble(0x02); // Set 8-bit mode (?)
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	0e 94 94 01 	call	0x328	; 0x328 <lcd_write_nibble>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	88 e2       	ldi	r24, 0x28	; 40
     408:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_write_nibble(0x02); // Set 8-bit mode (?)

  lcd_command(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);

  lcd_displayparams = LCD_CURSOROFF | LCD_BLINKOFF ;
     40c:	10 92 b1 01 	sts	0x01B1, r1

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	88 e0       	ldi	r24, 0x08	; 8
     414:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	88 e0       	ldi	r24, 0x08	; 8
     41c:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
     438:	8f e9       	ldi	r24, 0x9F	; 159
     43a:	9f e0       	ldi	r25, 0x0F	; 15
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <lcd_init+0x98>
     440:	00 c0       	rjmp	.+0      	; 0x442 <lcd_init+0x9e>
     442:	00 00       	nop
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
     44c:	8f e9       	ldi	r24, 0x9F	; 159
     44e:	9f e0       	ldi	r25, 0x0F	; 15
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <lcd_init+0xac>
     454:	00 c0       	rjmp	.+0      	; 0x456 <lcd_init+0xb2>
     456:	00 00       	nop
  lcd_command(0x04); //entry set

  //not required by the datasheet, but without it doesn't work
  lcd_return_home();
  lcd_clear();
  lcd_on();
     458:	0c 94 c8 01 	jmp	0x390	; 0x390 <lcd_on>

0000045c <lcd_off>:
  lcd_displayparams |= LCD_DISPLAYON;
  lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
}

void lcd_off(void) {
  lcd_displayparams &= ~LCD_DISPLAYON;
     45c:	80 91 b1 01 	lds	r24, 0x01B1
     460:	8b 7f       	andi	r24, 0xFB	; 251
     462:	80 93 b1 01 	sts	0x01B1, r24

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <lcd_send>

0000046e <lcd_enable_blinking>:
  lcd_command(LCD_RETURNHOME);
  _delay_ms(2);
}

void lcd_enable_blinking(void) {
  lcd_displayparams |= LCD_BLINKON;
     46e:	80 91 b1 01 	lds	r24, 0x01B1
     472:	98 2f       	mov	r25, r24
     474:	91 60       	ori	r25, 0x01	; 1
     476:	90 93 b1 01 	sts	0x01B1, r25

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	89 60       	ori	r24, 0x09	; 9
     47e:	0c 94 b7 01 	jmp	0x36e	; 0x36e <lcd_send>

00000482 <lcd_disable_blinking>:
  lcd_displayparams |= LCD_BLINKON;
  lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
}

void lcd_disable_blinking(void) {
  lcd_displayparams &= ~LCD_BLINKON;
     482:	80 91 b1 01 	lds	r24, 0x01B1
     486:	8e 7f       	andi	r24, 0xFE	; 254
     488:	80 93 b1 01 	sts	0x01B1, r24

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	88 60       	ori	r24, 0x08	; 8
     490:	0c 94 b7 01 	jmp	0x36e	; 0x36e <lcd_send>

00000494 <lcd_enable_cursor>:
  lcd_displayparams &= ~LCD_BLINKON;
  lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
}

void lcd_enable_cursor(void) {
  lcd_displayparams |= LCD_CURSORON;
     494:	80 91 b1 01 	lds	r24, 0x01B1
     498:	98 2f       	mov	r25, r24
     49a:	92 60       	ori	r25, 0x02	; 2
     49c:	90 93 b1 01 	sts	0x01B1, r25

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	8a 60       	ori	r24, 0x0A	; 10
     4a4:	0c 94 b7 01 	jmp	0x36e	; 0x36e <lcd_send>

000004a8 <lcd_disable_cursor>:
  lcd_displayparams |= LCD_CURSORON;
  lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
}

void lcd_disable_cursor(void) {
  lcd_displayparams &= ~LCD_CURSORON;
     4a8:	80 91 b1 01 	lds	r24, 0x01B1
     4ac:	8d 7f       	andi	r24, 0xFD	; 253
     4ae:	80 93 b1 01 	sts	0x01B1, r24

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	88 60       	ori	r24, 0x08	; 8
     4b6:	0c 94 b7 01 	jmp	0x36e	; 0x36e <lcd_send>

000004ba <lcd_puts_P>:
  for (char *it = string; *it; it++) {
    lcd_write(*it);
  }
}

void lcd_puts_P(const char *string) {
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	ec 01       	movw	r28, r24
	uint8_t count=0;
	while ((pgm_read_byte(string) != 0x00) && (count<16)){
     4c4:	fe 01       	movw	r30, r28
     4c6:	24 91       	lpm	r18, Z
     4c8:	22 23       	and	r18, r18
     4ca:	89 f0       	breq	.+34     	; 0x4ee <lcd_puts_P+0x34>
     4cc:	8e 01       	movw	r16, r28
     4ce:	00 5f       	subi	r16, 0xF0	; 240
     4d0:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_write(pgm_read_byte(string++));
     4d2:	21 96       	adiw	r28, 0x01	; 1
     4d4:	fc 01       	movw	r30, r24
     4d6:	84 91       	lpm	r24, Z
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
  }
}

void lcd_puts_P(const char *string) {
	uint8_t count=0;
	while ((pgm_read_byte(string) != 0x00) && (count<16)){
     4de:	ce 01       	movw	r24, r28
     4e0:	fe 01       	movw	r30, r28
     4e2:	24 91       	lpm	r18, Z
     4e4:	22 23       	and	r18, r18
     4e6:	19 f0       	breq	.+6      	; 0x4ee <lcd_puts_P+0x34>
     4e8:	c0 17       	cp	r28, r16
     4ea:	d1 07       	cpc	r29, r17
     4ec:	91 f7       	brne	.-28     	; 0x4d2 <lcd_puts_P+0x18>
		lcd_write(pgm_read_byte(string++));
		count++;
	}
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <lcd_clear_f>:

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	80 ec       	ldi	r24, 0xC0	; 192
     4fc:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
}

const char blank[] PROGMEM = "                ";
void lcd_clear_f(void) {
	lcd_set_cursor(0,1);
	lcd_puts_P(blank);
     500:	88 ed       	ldi	r24, 0xD8	; 216
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	80 e8       	ldi	r24, 0x80	; 128
     50c:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
const char blank[] PROGMEM = "                ";
void lcd_clear_f(void) {
	lcd_set_cursor(0,1);
	lcd_puts_P(blank);
	lcd_set_cursor(0,0);
	lcd_puts_P(blank);
     510:	88 ed       	ldi	r24, 0xD8	; 216
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <lcd_puts_P>

00000518 <lcd_clear_top>:

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	80 e8       	ldi	r24, 0x80	; 128
     51c:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
	lcd_puts_P(blank);
}

void lcd_clear_top(void) {
	lcd_set_cursor(0,0);
	lcd_puts_P(blank);
     520:	88 ed       	ldi	r24, 0xD8	; 216
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <lcd_puts_P>

00000528 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     528:	41 32       	cpi	r20, 0x21	; 33
     52a:	90 f5       	brcc	.+100    	; 0x590 <twi_readFrom+0x68>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     52c:	90 91 b0 01 	lds	r25, 0x01B0
     530:	91 11       	cpse	r25, r1
     532:	fc cf       	rjmp	.-8      	; 0x52c <twi_readFrom+0x4>
    continue;
  }
  twi_state = TWI_MRX;
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	90 93 b0 01 	sts	0x01B0, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     53a:	9f ef       	ldi	r25, 0xFF	; 255
     53c:	90 93 45 01 	sts	0x0145, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     540:	10 92 8a 01 	sts	0x018A, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     544:	94 0f       	add	r25, r20
     546:	90 93 89 01 	sts	0x0189, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
     54a:	88 0f       	add	r24, r24
     54c:	81 60       	ori	r24, 0x01	; 1
     54e:	80 93 af 01 	sts	0x01AF, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     552:	85 ee       	ldi	r24, 0xE5	; 229
     554:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     558:	80 91 b0 01 	lds	r24, 0x01B0
     55c:	81 30       	cpi	r24, 0x01	; 1
     55e:	e1 f3       	breq	.-8      	; 0x558 <twi_readFrom+0x30>
    continue;
  }

  if (twi_masterBufferIndex < length)
     560:	80 91 8a 01 	lds	r24, 0x018A
     564:	84 17       	cp	r24, r20
     566:	88 f0       	brcs	.+34     	; 0x58a <twi_readFrom+0x62>
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     568:	44 23       	and	r20, r20
     56a:	91 f0       	breq	.+36     	; 0x590 <twi_readFrom+0x68>
     56c:	eb e8       	ldi	r30, 0x8B	; 139
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	db 01       	movw	r26, r22
     572:	2f ef       	ldi	r18, 0xFF	; 255
     574:	24 0f       	add	r18, r20
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	24 57       	subi	r18, 0x74	; 116
     57a:	3e 4f       	sbci	r19, 0xFE	; 254
    data[i] = twi_masterBuffer[i];
     57c:	91 91       	ld	r25, Z+
     57e:	9d 93       	st	X+, r25

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     580:	e2 17       	cp	r30, r18
     582:	f3 07       	cpc	r31, r19
     584:	d9 f7       	brne	.-10     	; 0x57c <twi_readFrom+0x54>
     586:	84 2f       	mov	r24, r20
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
     588:	08 95       	ret
  while(TWI_MRX == twi_state){
    continue;
  }

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;
     58a:	40 91 8a 01 	lds	r20, 0x018A
     58e:	ec cf       	rjmp	.-40     	; 0x568 <twi_readFrom+0x40>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	08 95       	ret

00000594 <twi_writeTo>:
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     594:	41 32       	cpi	r20, 0x21	; 33
     596:	c8 f5       	brcc	.+114    	; 0x60a <twi_writeTo+0x76>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     598:	90 91 b0 01 	lds	r25, 0x01B0
     59c:	91 11       	cpse	r25, r1
     59e:	fc cf       	rjmp	.-8      	; 0x598 <twi_writeTo+0x4>
    continue;
  }
  twi_state = TWI_MTX;
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	90 93 b0 01 	sts	0x01B0, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     5a6:	9f ef       	ldi	r25, 0xFF	; 255
     5a8:	90 93 45 01 	sts	0x0145, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     5ac:	10 92 8a 01 	sts	0x018A, r1
  twi_masterBufferLength = length;
     5b0:	40 93 89 01 	sts	0x0189, r20

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     5b4:	44 23       	and	r20, r20
     5b6:	69 f0       	breq	.+26     	; 0x5d2 <twi_writeTo+0x3e>
     5b8:	fb 01       	movw	r30, r22
     5ba:	ab e8       	ldi	r26, 0x8B	; 139
     5bc:	b1 e0       	ldi	r27, 0x01	; 1
     5be:	6f 5f       	subi	r22, 0xFF	; 255
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	41 50       	subi	r20, 0x01	; 1
     5c4:	64 0f       	add	r22, r20
     5c6:	71 1d       	adc	r23, r1
    twi_masterBuffer[i] = data[i];
     5c8:	91 91       	ld	r25, Z+
     5ca:	9d 93       	st	X+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     5cc:	e6 17       	cp	r30, r22
     5ce:	f7 07       	cpc	r31, r23
     5d0:	d9 f7       	brne	.-10     	; 0x5c8 <twi_writeTo+0x34>
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	80 93 af 01 	sts	0x01AF, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     5dc:	85 ee       	ldi	r24, 0xE5	; 229
     5de:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     5e2:	22 23       	and	r18, r18
     5e4:	21 f0       	breq	.+8      	; 0x5ee <twi_writeTo+0x5a>
     5e6:	80 91 b0 01 	lds	r24, 0x01B0
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	e1 f3       	breq	.-8      	; 0x5e6 <twi_writeTo+0x52>
    continue;
  }

  if (twi_error == 0xFF)
     5ee:	80 91 45 01 	lds	r24, 0x0145
     5f2:	8f 3f       	cpi	r24, 0xFF	; 255
     5f4:	71 f0       	breq	.+28     	; 0x612 <twi_writeTo+0x7e>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     5f6:	80 91 45 01 	lds	r24, 0x0145
     5fa:	80 32       	cpi	r24, 0x20	; 32
     5fc:	41 f0       	breq	.+16     	; 0x60e <twi_writeTo+0x7a>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     5fe:	80 91 45 01 	lds	r24, 0x0145
     602:	80 33       	cpi	r24, 0x30	; 48
     604:	41 f0       	breq	.+16     	; 0x616 <twi_writeTo+0x82>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
     606:	84 e0       	ldi	r24, 0x04	; 4
}
     608:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	08 95       	ret
  }

  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	08 95       	ret
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0;	// success
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	08 95       	ret
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
     616:	83 e0       	ldi	r24, 0x03	; 3
     618:	08 95       	ret

0000061a <twi_transmit>:
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     61a:	61 32       	cpi	r22, 0x21	; 33
     61c:	30 f4       	brcc	.+12     	; 0x62a <twi_transmit+0x10>
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     61e:	20 91 b0 01 	lds	r18, 0x01B0
     622:	24 30       	cpi	r18, 0x04	; 4
     624:	21 f0       	breq	.+8      	; 0x62e <twi_transmit+0x14>
    return 2;
     626:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }

  return 0;
}
     628:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	08 95       	ret
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     62e:	60 93 67 01 	sts	0x0167, r22
  for(i = 0; i < length; ++i){
     632:	66 23       	and	r22, r22
     634:	61 f0       	breq	.+24     	; 0x64e <twi_transmit+0x34>
     636:	fc 01       	movw	r30, r24
     638:	a9 e6       	ldi	r26, 0x69	; 105
     63a:	b1 e0       	ldi	r27, 0x01	; 1
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	61 50       	subi	r22, 0x01	; 1
     640:	86 0f       	add	r24, r22
     642:	91 1d       	adc	r25, r1
    twi_txBuffer[i] = data[i];
     644:	21 91       	ld	r18, Z+
     646:	2d 93       	st	X+, r18
    return 2;
  }

  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     648:	e8 17       	cp	r30, r24
     64a:	f9 07       	cpc	r31, r25
     64c:	d9 f7       	brne	.-10     	; 0x644 <twi_transmit+0x2a>
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	08 95       	ret

00000652 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

SIGNAL(TWI_vect)
{
     652:	1f 92       	push	r1
     654:	0f 92       	push	r0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	0f 92       	push	r0
     65a:	11 24       	eor	r1, r1
     65c:	2f 93       	push	r18
     65e:	3f 93       	push	r19
     660:	4f 93       	push	r20
     662:	5f 93       	push	r21
     664:	6f 93       	push	r22
     666:	7f 93       	push	r23
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	af 93       	push	r26
     66e:	bf 93       	push	r27
     670:	ef 93       	push	r30
     672:	ff 93       	push	r31
  switch(TW_STATUS){
     674:	80 91 b9 00 	lds	r24, 0x00B9
     678:	88 7f       	andi	r24, 0xF8	; 248
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	89 3c       	cpi	r24, 0xC9	; 201
     67e:	91 05       	cpc	r25, r1
     680:	78 f5       	brcc	.+94     	; 0x6e0 <__vector_24+0x8e>
     682:	fc 01       	movw	r30, r24
     684:	ec 5c       	subi	r30, 0xCC	; 204
     686:	ff 4f       	sbci	r31, 0xFF	; 255
     688:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__tablejump2__>

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     68c:	84 e0       	ldi	r24, 0x04	; 4
     68e:	80 93 b0 01 	sts	0x01B0, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     692:	10 92 68 01 	sts	0x0168, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     696:	10 92 67 01 	sts	0x0167, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     69a:	e0 91 ad 01 	lds	r30, 0x01AD
     69e:	f0 91 ae 01 	lds	r31, 0x01AE
     6a2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     6a4:	80 91 67 01 	lds	r24, 0x0167
     6a8:	81 11       	cpse	r24, r1
     6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <__vector_24+0x64>
        twi_txBufferLength = 1;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 67 01 	sts	0x0167, r24
        twi_txBuffer[0] = 0x00;
     6b2:	10 92 69 01 	sts	0x0169, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     6b6:	e0 91 68 01 	lds	r30, 0x0168
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	8e 0f       	add	r24, r30
     6be:	80 93 68 01 	sts	0x0168, r24
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	e7 59       	subi	r30, 0x97	; 151
     6c6:	fe 4f       	sbci	r31, 0xFE	; 254
     6c8:	80 81       	ld	r24, Z
     6ca:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     6ce:	90 91 68 01 	lds	r25, 0x0168
     6d2:	80 91 67 01 	lds	r24, 0x0167
     6d6:	98 17       	cp	r25, r24
     6d8:	c8 f4       	brcc	.+50     	; 0x70c <__vector_24+0xba>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     6da:	85 ec       	ldi	r24, 0xC5	; 197
     6dc:	80 93 bc 00 	sts	0x00BC, r24
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	7f 91       	pop	r23
     6ee:	6f 91       	pop	r22
     6f0:	5f 91       	pop	r21
     6f2:	4f 91       	pop	r20
     6f4:	3f 91       	pop	r19
     6f6:	2f 91       	pop	r18
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     702:	80 91 46 01 	lds	r24, 0x0146
     706:	80 32       	cpi	r24, 0x20	; 32
     708:	08 f4       	brcc	.+2      	; 0x70c <__vector_24+0xba>
     70a:	9c c0       	rjmp	.+312    	; 0x844 <__vector_24+0x1f2>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     70c:	85 e8       	ldi	r24, 0x85	; 133
     70e:	80 93 bc 00 	sts	0x00BC, r24
     712:	e6 cf       	rjmp	.-52     	; 0x6e0 <__vector_24+0x8e>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     714:	e0 91 8a 01 	lds	r30, 0x018A
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	8e 0f       	add	r24, r30
     71c:	80 93 8a 01 	sts	0x018A, r24
     720:	80 91 bb 00 	lds	r24, 0x00BB
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	e5 57       	subi	r30, 0x75	; 117
     728:	fe 4f       	sbci	r31, 0xFE	; 254
     72a:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     72c:	90 91 8a 01 	lds	r25, 0x018A
     730:	80 91 89 01 	lds	r24, 0x0189
     734:	98 17       	cp	r25, r24
     736:	50 f7       	brcc	.-44     	; 0x70c <__vector_24+0xba>
     738:	d0 cf       	rjmp	.-96     	; 0x6da <__vector_24+0x88>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     73a:	e0 91 8a 01 	lds	r30, 0x018A
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	8e 0f       	add	r24, r30
     742:	80 93 8a 01 	sts	0x018A, r24
     746:	80 91 bb 00 	lds	r24, 0x00BB
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	e5 57       	subi	r30, 0x75	; 117
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	80 83       	st	Z, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     752:	85 ed       	ldi	r24, 0xD5	; 213
     754:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     758:	80 91 bc 00 	lds	r24, 0x00BC
     75c:	84 fd       	sbrc	r24, 4
     75e:	fc cf       	rjmp	.-8      	; 0x758 <__vector_24+0x106>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     760:	10 92 b0 01 	sts	0x01B0, r1
     764:	bd cf       	rjmp	.-134    	; 0x6e0 <__vector_24+0x8e>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     766:	85 ec       	ldi	r24, 0xC5	; 197
     768:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     76c:	10 92 b0 01 	sts	0x01B0, r1
      break;
     770:	b7 cf       	rjmp	.-146    	; 0x6e0 <__vector_24+0x8e>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	80 93 b0 01 	sts	0x01B0, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     778:	10 92 46 01 	sts	0x0146, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     77c:	85 ec       	ldi	r24, 0xC5	; 197
     77e:	80 93 bc 00 	sts	0x00BC, r24
     782:	ae cf       	rjmp	.-164    	; 0x6e0 <__vector_24+0x8e>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     784:	10 92 45 01 	sts	0x0145, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     788:	85 ed       	ldi	r24, 0xD5	; 213
     78a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     78e:	80 91 bc 00 	lds	r24, 0x00BC
     792:	84 fd       	sbrc	r24, 4
     794:	fc cf       	rjmp	.-8      	; 0x78e <__vector_24+0x13c>
     796:	e4 cf       	rjmp	.-56     	; 0x760 <__vector_24+0x10e>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     798:	80 91 af 01 	lds	r24, 0x01AF
     79c:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     7a0:	85 ec       	ldi	r24, 0xC5	; 197
     7a2:	80 93 bc 00 	sts	0x00BC, r24
     7a6:	9c cf       	rjmp	.-200    	; 0x6e0 <__vector_24+0x8e>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
     7a8:	90 91 8a 01 	lds	r25, 0x018A
     7ac:	80 91 89 01 	lds	r24, 0x0189
     7b0:	98 17       	cp	r25, r24
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <__vector_24+0x164>
     7b4:	5e c0       	rjmp	.+188    	; 0x872 <__vector_24+0x220>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     7b6:	85 ed       	ldi	r24, 0xD5	; 213
     7b8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     7bc:	80 91 bc 00 	lds	r24, 0x00BC
     7c0:	84 fd       	sbrc	r24, 4
     7c2:	fc cf       	rjmp	.-8      	; 0x7bc <__vector_24+0x16a>
     7c4:	cd cf       	rjmp	.-102    	; 0x760 <__vector_24+0x10e>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     7c6:	80 e2       	ldi	r24, 0x20	; 32
     7c8:	80 93 45 01 	sts	0x0145, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     7cc:	85 ed       	ldi	r24, 0xD5	; 213
     7ce:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     7d2:	80 91 bc 00 	lds	r24, 0x00BC
     7d6:	84 fd       	sbrc	r24, 4
     7d8:	fc cf       	rjmp	.-8      	; 0x7d2 <__vector_24+0x180>
     7da:	c2 cf       	rjmp	.-124    	; 0x760 <__vector_24+0x10e>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     7dc:	80 91 46 01 	lds	r24, 0x0146
     7e0:	80 32       	cpi	r24, 0x20	; 32
     7e2:	08 f4       	brcc	.+2      	; 0x7e6 <__vector_24+0x194>
     7e4:	3f c0       	rjmp	.+126    	; 0x864 <__vector_24+0x212>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     7e6:	85 ed       	ldi	r24, 0xD5	; 213
     7e8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     7ec:	80 91 bc 00 	lds	r24, 0x00BC
     7f0:	84 fd       	sbrc	r24, 4
     7f2:	fc cf       	rjmp	.-8      	; 0x7ec <__vector_24+0x19a>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     7f4:	10 92 b0 01 	sts	0x01B0, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     7f8:	60 91 46 01 	lds	r22, 0x0146
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	e0 91 ab 01 	lds	r30, 0x01AB
     802:	f0 91 ac 01 	lds	r31, 0x01AC
     806:	87 e4       	ldi	r24, 0x47	; 71
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     80c:	10 92 46 01 	sts	0x0146, r1
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     810:	85 ec       	ldi	r24, 0xC5	; 197
     812:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     816:	10 92 b0 01 	sts	0x01B0, r1
     81a:	62 cf       	rjmp	.-316    	; 0x6e0 <__vector_24+0x8e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     81c:	80 e3       	ldi	r24, 0x30	; 48
     81e:	80 93 45 01 	sts	0x0145, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     822:	85 ed       	ldi	r24, 0xD5	; 213
     824:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     828:	80 91 bc 00 	lds	r24, 0x00BC
     82c:	84 fd       	sbrc	r24, 4
     82e:	fc cf       	rjmp	.-8      	; 0x828 <__vector_24+0x1d6>
     830:	97 cf       	rjmp	.-210    	; 0x760 <__vector_24+0x10e>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     832:	88 e3       	ldi	r24, 0x38	; 56
     834:	80 93 45 01 	sts	0x0145, r24
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     838:	85 ec       	ldi	r24, 0xC5	; 197
     83a:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     83e:	10 92 b0 01 	sts	0x01B0, r1
     842:	4e cf       	rjmp	.-356    	; 0x6e0 <__vector_24+0x8e>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     844:	e0 91 46 01 	lds	r30, 0x0146
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	8e 0f       	add	r24, r30
     84c:	80 93 46 01 	sts	0x0146, r24
     850:	80 91 bb 00 	lds	r24, 0x00BB
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	e9 5b       	subi	r30, 0xB9	; 185
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     85c:	85 ec       	ldi	r24, 0xC5	; 197
     85e:	80 93 bc 00 	sts	0x00BC, r24
     862:	3e cf       	rjmp	.-388    	; 0x6e0 <__vector_24+0x8e>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     864:	e0 91 46 01 	lds	r30, 0x0146
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	e9 5b       	subi	r30, 0xB9	; 185
     86c:	fe 4f       	sbci	r31, 0xFE	; 254
     86e:	10 82       	st	Z, r1
     870:	ba cf       	rjmp	.-140    	; 0x7e6 <__vector_24+0x194>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     872:	e0 91 8a 01 	lds	r30, 0x018A
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	8e 0f       	add	r24, r30
     87a:	80 93 8a 01 	sts	0x018A, r24
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	e5 57       	subi	r30, 0x75	; 117
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	80 81       	ld	r24, Z
     886:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     88a:	85 ec       	ldi	r24, 0xC5	; 197
     88c:	80 93 bc 00 	sts	0x00BC, r24
     890:	27 cf       	rjmp	.-434    	; 0x6e0 <__vector_24+0x8e>

00000892 <twi_request_from>:
  twi_attachSlaveRxEvent(onReceiveService);
  twi_init_master();
}

uint8_t twi_request_from(uint8_t address, uint8_t quantity)
{
     892:	46 2f       	mov	r20, r22
     894:	61 32       	cpi	r22, 0x21	; 33
     896:	08 f0       	brcs	.+2      	; 0x89a <twi_request_from+0x8>
     898:	40 e2       	ldi	r20, 0x20	; 32
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
     89a:	65 ec       	ldi	r22, 0xC5	; 197
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	0e 94 94 02 	call	0x528	; 0x528 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     8a2:	10 92 44 01 	sts	0x0144, r1
  rxBufferLength = read;
     8a6:	80 93 43 01 	sts	0x0143, r24

  return read;
}
     8aa:	08 95       	ret

000008ac <twi_end_transmission>:
}

uint8_t twi_end_transmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	40 91 40 01 	lds	r20, 0x0140
     8b2:	66 ef       	ldi	r22, 0xF6	; 246
     8b4:	71 e0       	ldi	r23, 0x01	; 1
     8b6:	80 91 42 01 	lds	r24, 0x0142
     8ba:	0e 94 ca 02 	call	0x594	; 0x594 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     8be:	10 92 41 01 	sts	0x0141, r1
  txBufferLength = 0;
     8c2:	10 92 40 01 	sts	0x0140, r1
  // indicate that we are done transmitting
  transmitting = 0;
     8c6:	10 92 3f 01 	sts	0x013F, r1
  return ret;
}
     8ca:	08 95       	ret

000008cc <twi_send_byte>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void twi_send_byte(uint8_t data)
{
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	1f 92       	push	r1
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	89 83       	std	Y+1, r24	; 0x01
  if(transmitting){
     8d8:	80 91 3f 01 	lds	r24, 0x013F
     8dc:	88 23       	and	r24, r24
     8de:	c9 f0       	breq	.+50     	; 0x912 <__stack+0x13>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     8e0:	80 91 40 01 	lds	r24, 0x0140
     8e4:	80 32       	cpi	r24, 0x20	; 32
     8e6:	20 f0       	brcs	.+8      	; 0x8f0 <twi_send_byte+0x24>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
     8e8:	0f 90       	pop	r0
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     8f0:	80 91 41 01 	lds	r24, 0x0141
     8f4:	e8 2f       	mov	r30, r24
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	ea 50       	subi	r30, 0x0A	; 10
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	99 81       	ldd	r25, Y+1	; 0x01
     8fe:	90 83       	st	Z, r25
    ++txBufferIndex;
     900:	8f 5f       	subi	r24, 0xFF	; 255
     902:	80 93 41 01 	sts	0x0141, r24
    // update amount in buffer
    txBufferLength = txBufferIndex;
     906:	80 93 40 01 	sts	0x0140, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
     90a:	0f 90       	pop	r0
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	0e 94 0d 03 	call	0x61a	; 0x61a <twi_transmit>
  }
}
     91c:	0f 90       	pop	r0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <rtc_read_byte>:
}

void twi_begin_transmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	90 93 3f 01 	sts	0x013F, r25
  // set address of targeted slave
  txAddress = address;
     92a:	98 e6       	ldi	r25, 0x68	; 104
     92c:	90 93 42 01 	sts	0x0142, r25
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     930:	10 92 41 01 	sts	0x0141, r1
  txBufferLength = 0;
     934:	10 92 40 01 	sts	0x0140, r1
}

uint8_t rtc_read_byte(uint8_t offset)
{
	twi_begin_transmission(RTC_ADDR);
	twi_send_byte(offset);
     938:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_end_transmission();
     93c:	0e 94 56 04 	call	0x8ac	; 0x8ac <twi_end_transmission>

	twi_request_from(RTC_ADDR, 1);
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	88 e6       	ldi	r24, 0x68	; 104
     944:	0e 94 49 04 	call	0x892	; 0x892 <twi_request_from>
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     948:	90 91 44 01 	lds	r25, 0x0144
     94c:	80 91 43 01 	lds	r24, 0x0143
     950:	98 17       	cp	r25, r24
     952:	48 f4       	brcc	.+18     	; 0x966 <rtc_read_byte+0x42>
    value = rxBuffer[rxBufferIndex];
     954:	e9 2f       	mov	r30, r25
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	eb 53       	subi	r30, 0x3B	; 59
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	80 81       	ld	r24, Z
    ++rxBufferIndex;
     95e:	9f 5f       	subi	r25, 0xFF	; 255
     960:	90 93 44 01 	sts	0x0144, r25
     964:	08 95       	ret
// or after requestFrom(address, numBytes)
uint8_t twi_receive(void)
{
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
     966:	80 e0       	ldi	r24, 0x00	; 0
	twi_send_byte(offset);
	twi_end_transmission();

	twi_request_from(RTC_ADDR, 1);
	return twi_receive();
}
     968:	08 95       	ret

0000096a <rtc_write_byte>:

void rtc_write_byte(uint8_t b, uint8_t offset)
{
     96a:	cf 93       	push	r28
     96c:	c8 2f       	mov	r28, r24
     96e:	86 2f       	mov	r24, r22
}

void twi_begin_transmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	90 93 3f 01 	sts	0x013F, r25
  // set address of targeted slave
  txAddress = address;
     976:	98 e6       	ldi	r25, 0x68	; 104
     978:	90 93 42 01 	sts	0x0142, r25
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     97c:	10 92 41 01 	sts	0x0141, r1
  txBufferLength = 0;
     980:	10 92 40 01 	sts	0x0140, r1
}

void rtc_write_byte(uint8_t b, uint8_t offset)
{
	twi_begin_transmission(RTC_ADDR);
	twi_send_byte(offset);
     984:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_send_byte(b);
     988:	8c 2f       	mov	r24, r28
     98a:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_end_transmission();
}
     98e:	cf 91       	pop	r28
void rtc_write_byte(uint8_t b, uint8_t offset)
{
	twi_begin_transmission(RTC_ADDR);
	twi_send_byte(offset);
	twi_send_byte(b);
	twi_end_transmission();
     990:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <twi_end_transmission>

00000994 <rtc_init>:

static bool s_is_ds1307 = false;
static bool s_is_ds3231 = false;

void rtc_init(void)
{
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
	// 2) Write a value to temperature register
	// 3) Read back the value
	//   equal to the one written: DS1307, write back saved value and return
	//   different from written:   DS3231

	uint8_t temp1 = rtc_read_byte(0x11);
     998:	81 e1       	ldi	r24, 0x11	; 17
     99a:	0e 94 92 04 	call	0x924	; 0x924 <rtc_read_byte>
     99e:	d8 2f       	mov	r29, r24
	uint8_t temp2 = rtc_read_byte(0x12);
     9a0:	82 e1       	ldi	r24, 0x12	; 18
     9a2:	0e 94 92 04 	call	0x924	; 0x924 <rtc_read_byte>
     9a6:	c8 2f       	mov	r28, r24

	rtc_write_byte(0xee, 0x11);
     9a8:	61 e1       	ldi	r22, 0x11	; 17
     9aa:	8e ee       	ldi	r24, 0xEE	; 238
     9ac:	0e 94 b5 04 	call	0x96a	; 0x96a <rtc_write_byte>
	rtc_write_byte(0xdd, 0x12);
     9b0:	62 e1       	ldi	r22, 0x12	; 18
     9b2:	8d ed       	ldi	r24, 0xDD	; 221
     9b4:	0e 94 b5 04 	call	0x96a	; 0x96a <rtc_write_byte>

	if (rtc_read_byte(0x11) == 0xee && rtc_read_byte(0x12) == 0xdd) {
     9b8:	81 e1       	ldi	r24, 0x11	; 17
     9ba:	0e 94 92 04 	call	0x924	; 0x924 <rtc_read_byte>
     9be:	8e 3e       	cpi	r24, 0xEE	; 238
     9c0:	31 f0       	breq	.+12     	; 0x9ce <rtc_init+0x3a>
		// restore values
		rtc_write_byte(temp1, 0x11);
		rtc_write_byte(temp2, 0x12);
	}
	else {
		s_is_ds3231 = true;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 3d 01 	sts	0x013D, r24
	}
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret
	uint8_t temp2 = rtc_read_byte(0x12);

	rtc_write_byte(0xee, 0x11);
	rtc_write_byte(0xdd, 0x12);

	if (rtc_read_byte(0x11) == 0xee && rtc_read_byte(0x12) == 0xdd) {
     9ce:	82 e1       	ldi	r24, 0x12	; 18
     9d0:	0e 94 92 04 	call	0x924	; 0x924 <rtc_read_byte>
     9d4:	8d 3d       	cpi	r24, 0xDD	; 221
     9d6:	a9 f7       	brne	.-22     	; 0x9c2 <rtc_init+0x2e>
		s_is_ds1307 = true;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 3e 01 	sts	0x013E, r24
		// restore values
		rtc_write_byte(temp1, 0x11);
     9de:	61 e1       	ldi	r22, 0x11	; 17
     9e0:	8d 2f       	mov	r24, r29
     9e2:	0e 94 b5 04 	call	0x96a	; 0x96a <rtc_write_byte>
		rtc_write_byte(temp2, 0x12);
     9e6:	62 e1       	ldi	r22, 0x12	; 18
     9e8:	8c 2f       	mov	r24, r28
	}
	else {
		s_is_ds3231 = true;
	}
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28

	if (rtc_read_byte(0x11) == 0xee && rtc_read_byte(0x12) == 0xdd) {
		s_is_ds1307 = true;
		// restore values
		rtc_write_byte(temp1, 0x11);
		rtc_write_byte(temp2, 0x12);
     9ee:	0c 94 b5 04 	jmp	0x96a	; 0x96a <rtc_write_byte>

000009f2 <rtc_get_time>:
// Autodetection override
void rtc_set_ds1307(void) { s_is_ds1307 = true;   s_is_ds3231 = false; }
void rtc_set_ds3231(void) { s_is_ds1307 = false;  s_is_ds3231 = true;  }

struct tm* rtc_get_time(void)
{
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	29 97       	sbiw	r28, 0x09	; 9
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	cd bf       	out	0x3d, r28	; 61
}

void twi_begin_transmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 3f 01 	sts	0x013F, r24
  // set address of targeted slave
  txAddress = address;
     a0c:	88 e6       	ldi	r24, 0x68	; 104
     a0e:	80 93 42 01 	sts	0x0142, r24
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     a12:	10 92 41 01 	sts	0x0141, r1
  txBufferLength = 0;
     a16:	10 92 40 01 	sts	0x0140, r1
	uint8_t century = 0;

	// read 7 bytes starting from register 0
	// sec, min, hour, day-of-week, date, month, year
	twi_begin_transmission(RTC_ADDR);
	twi_send_byte(0x0);
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_end_transmission();
     a20:	0e 94 56 04 	call	0x8ac	; 0x8ac <twi_end_transmission>

	twi_request_from(RTC_ADDR, 7);
     a24:	67 e0       	ldi	r22, 0x07	; 7
     a26:	88 e6       	ldi	r24, 0x68	; 104
     a28:	0e 94 49 04 	call	0x892	; 0x892 <twi_request_from>
     a2c:	40 91 43 01 	lds	r20, 0x0143
     a30:	20 91 44 01 	lds	r18, 0x0144
     a34:	fe 01       	movw	r30, r28
     a36:	31 96       	adiw	r30, 0x01	; 1
     a38:	ce 01       	movw	r24, r28
     a3a:	08 96       	adiw	r24, 0x08	; 8
     a3c:	0a c0       	rjmp	.+20     	; 0xa52 <rtc_get_time+0x60>
  // for people using with char strings
  uint8_t value = '\0';

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
     a3e:	a2 2f       	mov	r26, r18
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	ab 53       	subi	r26, 0x3B	; 59
     a44:	be 4f       	sbci	r27, 0xFE	; 254
     a46:	3c 91       	ld	r19, X
    ++rxBufferIndex;
     a48:	2f 5f       	subi	r18, 0xFF	; 255
	twi_end_transmission();

	twi_request_from(RTC_ADDR, 7);

	for (uint8_t i = 0; i < 7; i++) {
		rtc[i] = twi_receive();
     a4a:	31 93       	st	Z+, r19
	twi_send_byte(0x0);
	twi_end_transmission();

	twi_request_from(RTC_ADDR, 7);

	for (uint8_t i = 0; i < 7; i++) {
     a4c:	e8 17       	cp	r30, r24
     a4e:	f9 07       	cpc	r31, r25
     a50:	39 f0       	breq	.+14     	; 0xa60 <rtc_get_time+0x6e>
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     a52:	24 17       	cp	r18, r20
     a54:	a0 f3       	brcs	.-24     	; 0xa3e <rtc_get_time+0x4c>
// or after requestFrom(address, numBytes)
uint8_t twi_receive(void)
{
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
     a56:	30 e0       	ldi	r19, 0x00	; 0
	twi_end_transmission();

	twi_request_from(RTC_ADDR, 7);

	for (uint8_t i = 0; i < 7; i++) {
		rtc[i] = twi_receive();
     a58:	31 93       	st	Z+, r19
	twi_send_byte(0x0);
	twi_end_transmission();

	twi_request_from(RTC_ADDR, 7);

	for (uint8_t i = 0; i < 7; i++) {
     a5a:	e8 17       	cp	r30, r24
     a5c:	f9 07       	cpc	r31, r25
     a5e:	c9 f7       	brne	.-14     	; 0xa52 <rtc_get_time+0x60>
     a60:	20 93 44 01 	sts	0x0144, r18
		rtc[i] = twi_receive();
	}

	twi_end_transmission();
     a64:	0e 94 56 04 	call	0x8ac	; 0x8ac <twi_end_transmission>

	// Clear clock halt bit from read data
	// This starts the clock for a DS1307, and has no effect for a DS3231
	rtc[0] &= ~(_BV(CH_BIT)); // clear bit
     a68:	29 81       	ldd	r18, Y+1	; 0x01
  return ((d/10 * 16) + (d % 10));
}

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
     a6a:	92 2f       	mov	r25, r18
     a6c:	96 95       	lsr	r25
     a6e:	96 95       	lsr	r25
     a70:	96 95       	lsr	r25
     a72:	9e 70       	andi	r25, 0x0E	; 14
     a74:	89 2f       	mov	r24, r25
     a76:	88 0f       	add	r24, r24
     a78:	88 0f       	add	r24, r24
     a7a:	89 0f       	add	r24, r25
     a7c:	2f 70       	andi	r18, 0x0F	; 15
     a7e:	82 0f       	add	r24, r18

	// Clear clock halt bit from read data
	// This starts the clock for a DS1307, and has no effect for a DS3231
	rtc[0] &= ~(_BV(CH_BIT)); // clear bit

	_tm.sec = bcd2dec(rtc[0]);
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	90 93 17 02 	sts	0x0217, r25
     a86:	80 93 16 02 	sts	0x0216, r24
	_tm.min = bcd2dec(rtc[1]);
     a8a:	8a 81       	ldd	r24, Y+2	; 0x02
  return ((d/10 * 16) + (d % 10));
}

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
     a8c:	98 2f       	mov	r25, r24
     a8e:	92 95       	swap	r25
     a90:	9f 70       	andi	r25, 0x0F	; 15
     a92:	8f 70       	andi	r24, 0x0F	; 15
     a94:	2a e0       	ldi	r18, 0x0A	; 10
     a96:	92 9f       	mul	r25, r18
     a98:	80 0d       	add	r24, r0
     a9a:	11 24       	eor	r1, r1
	// Clear clock halt bit from read data
	// This starts the clock for a DS1307, and has no effect for a DS3231
	rtc[0] &= ~(_BV(CH_BIT)); // clear bit

	_tm.sec = bcd2dec(rtc[0]);
	_tm.min = bcd2dec(rtc[1]);
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	90 93 19 02 	sts	0x0219, r25
     aa2:	80 93 18 02 	sts	0x0218, r24
	_tm.hour = bcd2dec(rtc[2]);
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
  return ((d/10 * 16) + (d % 10));
}

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
     aa8:	98 2f       	mov	r25, r24
     aaa:	92 95       	swap	r25
     aac:	9f 70       	andi	r25, 0x0F	; 15
     aae:	8f 70       	andi	r24, 0x0F	; 15
     ab0:	4a e0       	ldi	r20, 0x0A	; 10
     ab2:	94 9f       	mul	r25, r20
     ab4:	80 0d       	add	r24, r0
     ab6:	11 24       	eor	r1, r1
	// This starts the clock for a DS1307, and has no effect for a DS3231
	rtc[0] &= ~(_BV(CH_BIT)); // clear bit

	_tm.sec = bcd2dec(rtc[0]);
	_tm.min = bcd2dec(rtc[1]);
	_tm.hour = bcd2dec(rtc[2]);
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	90 93 1b 02 	sts	0x021B, r25
     abe:	80 93 1a 02 	sts	0x021A, r24
	_tm.mday = bcd2dec(rtc[4]);
     ac2:	2d 81       	ldd	r18, Y+5	; 0x05
  return ((d/10 * 16) + (d % 10));
}

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
     ac4:	32 2f       	mov	r19, r18
     ac6:	32 95       	swap	r19
     ac8:	3f 70       	andi	r19, 0x0F	; 15
     aca:	2f 70       	andi	r18, 0x0F	; 15
     acc:	4a e0       	ldi	r20, 0x0A	; 10
     ace:	34 9f       	mul	r19, r20
     ad0:	20 0d       	add	r18, r0
     ad2:	11 24       	eor	r1, r1
	rtc[0] &= ~(_BV(CH_BIT)); // clear bit

	_tm.sec = bcd2dec(rtc[0]);
	_tm.min = bcd2dec(rtc[1]);
	_tm.hour = bcd2dec(rtc[2]);
	_tm.mday = bcd2dec(rtc[4]);
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	30 93 1d 02 	sts	0x021D, r19
     ada:	20 93 1c 02 	sts	0x021C, r18
	_tm.mon = bcd2dec(rtc[5] & 0x1F); // returns 1-12
     ade:	4e 81       	ldd	r20, Y+6	; 0x06
  return ((d/10 * 16) + (d % 10));
}

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
     ae0:	44 fb       	bst	r20, 4
     ae2:	33 27       	eor	r19, r19
     ae4:	30 f9       	bld	r19, 0
     ae6:	33 0f       	add	r19, r19
     ae8:	23 2f       	mov	r18, r19
     aea:	22 0f       	add	r18, r18
     aec:	22 0f       	add	r18, r18
     aee:	23 0f       	add	r18, r19
     af0:	34 2f       	mov	r19, r20
     af2:	3f 70       	andi	r19, 0x0F	; 15
     af4:	23 0f       	add	r18, r19

	_tm.sec = bcd2dec(rtc[0]);
	_tm.min = bcd2dec(rtc[1]);
	_tm.hour = bcd2dec(rtc[2]);
	_tm.mday = bcd2dec(rtc[4]);
	_tm.mon = bcd2dec(rtc[5] & 0x1F); // returns 1-12
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	30 93 1f 02 	sts	0x021F, r19
     afc:	20 93 1e 02 	sts	0x021E, r18
	century = (rtc[5] & 0x80) >> 7;
	_tm.year = century == 1 ? 2000 + bcd2dec(rtc[6]) : 1900 + bcd2dec(rtc[6]); // year 0-99
     b00:	2f 81       	ldd	r18, Y+7	; 0x07
  return ((d/10 * 16) + (d % 10));
}

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
     b02:	32 2f       	mov	r19, r18
     b04:	32 95       	swap	r19
     b06:	3f 70       	andi	r19, 0x0F	; 15
     b08:	2f 70       	andi	r18, 0x0F	; 15
	_tm.min = bcd2dec(rtc[1]);
	_tm.hour = bcd2dec(rtc[2]);
	_tm.mday = bcd2dec(rtc[4]);
	_tm.mon = bcd2dec(rtc[5] & 0x1F); // returns 1-12
	century = (rtc[5] & 0x80) >> 7;
	_tm.year = century == 1 ? 2000 + bcd2dec(rtc[6]) : 1900 + bcd2dec(rtc[6]); // year 0-99
     b0a:	47 fd       	sbrc	r20, 7
     b0c:	40 c0       	rjmp	.+128    	; 0xb8e <rtc_get_time+0x19c>
  return ((d/10 * 16) + (d % 10));
}

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
     b0e:	4a e0       	ldi	r20, 0x0A	; 10
     b10:	34 9f       	mul	r19, r20
     b12:	20 0d       	add	r18, r0
     b14:	11 24       	eor	r1, r1
	_tm.min = bcd2dec(rtc[1]);
	_tm.hour = bcd2dec(rtc[2]);
	_tm.mday = bcd2dec(rtc[4]);
	_tm.mon = bcd2dec(rtc[5] & 0x1F); // returns 1-12
	century = (rtc[5] & 0x80) >> 7;
	_tm.year = century == 1 ? 2000 + bcd2dec(rtc[6]) : 1900 + bcd2dec(rtc[6]); // year 0-99
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	24 59       	subi	r18, 0x94	; 148
     b1a:	38 4f       	sbci	r19, 0xF8	; 248
     b1c:	30 93 21 02 	sts	0x0221, r19
     b20:	20 93 20 02 	sts	0x0220, r18
	_tm.wday = bcd2dec(rtc[3]); // returns 1-7
     b24:	2c 81       	ldd	r18, Y+4	; 0x04
  return ((d/10 * 16) + (d % 10));
}

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
     b26:	32 2f       	mov	r19, r18
     b28:	32 95       	swap	r19
     b2a:	3f 70       	andi	r19, 0x0F	; 15
     b2c:	2f 70       	andi	r18, 0x0F	; 15
     b2e:	4a e0       	ldi	r20, 0x0A	; 10
     b30:	34 9f       	mul	r19, r20
     b32:	20 0d       	add	r18, r0
     b34:	11 24       	eor	r1, r1
	_tm.hour = bcd2dec(rtc[2]);
	_tm.mday = bcd2dec(rtc[4]);
	_tm.mon = bcd2dec(rtc[5] & 0x1F); // returns 1-12
	century = (rtc[5] & 0x80) >> 7;
	_tm.year = century == 1 ? 2000 + bcd2dec(rtc[6]) : 1900 + bcd2dec(rtc[6]); // year 0-99
	_tm.wday = bcd2dec(rtc[3]); // returns 1-7
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	30 93 23 02 	sts	0x0223, r19
     b3c:	20 93 22 02 	sts	0x0222, r18

	if (_tm.hour == 0) {
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	e9 f0       	breq	.+58     	; 0xb7e <rtc_get_time+0x18c>
		_tm.twelveHour = 0;
		_tm.am = 1;
	} else if (_tm.hour < 12) {
     b44:	8c 30       	cpi	r24, 0x0C	; 12
     b46:	91 05       	cpc	r25, r1
     b48:	94 f0       	brlt	.+36     	; 0xb6e <rtc_get_time+0x17c>
		_tm.twelveHour = _tm.hour;
		_tm.am = 1;
	} else {
		_tm.twelveHour = _tm.hour - 12;
     b4a:	0c 97       	sbiw	r24, 0x0c	; 12
     b4c:	90 93 26 02 	sts	0x0226, r25
     b50:	80 93 25 02 	sts	0x0225, r24
		_tm.am = 0;
     b54:	10 92 24 02 	sts	0x0224, r1
	}

	return &_tm;
}
     b58:	86 e1       	ldi	r24, 0x16	; 22
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	29 96       	adiw	r28, 0x09	; 9
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

	if (_tm.hour == 0) {
		_tm.twelveHour = 0;
		_tm.am = 1;
	} else if (_tm.hour < 12) {
		_tm.twelveHour = _tm.hour;
     b6e:	90 93 26 02 	sts	0x0226, r25
     b72:	80 93 25 02 	sts	0x0225, r24
		_tm.am = 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 24 02 	sts	0x0224, r24
     b7c:	ed cf       	rjmp	.-38     	; 0xb58 <rtc_get_time+0x166>
	century = (rtc[5] & 0x80) >> 7;
	_tm.year = century == 1 ? 2000 + bcd2dec(rtc[6]) : 1900 + bcd2dec(rtc[6]); // year 0-99
	_tm.wday = bcd2dec(rtc[3]); // returns 1-7

	if (_tm.hour == 0) {
		_tm.twelveHour = 0;
     b7e:	10 92 26 02 	sts	0x0226, r1
     b82:	10 92 25 02 	sts	0x0225, r1
		_tm.am = 1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	80 93 24 02 	sts	0x0224, r24
     b8c:	e5 cf       	rjmp	.-54     	; 0xb58 <rtc_get_time+0x166>
  return ((d/10 * 16) + (d % 10));
}

uint8_t bcd2dec(uint8_t b)
{
  return ((b/16 * 10) + (b % 16));
     b8e:	4a e0       	ldi	r20, 0x0A	; 10
     b90:	34 9f       	mul	r19, r20
     b92:	20 0d       	add	r18, r0
     b94:	11 24       	eor	r1, r1
	_tm.min = bcd2dec(rtc[1]);
	_tm.hour = bcd2dec(rtc[2]);
	_tm.mday = bcd2dec(rtc[4]);
	_tm.mon = bcd2dec(rtc[5] & 0x1F); // returns 1-12
	century = (rtc[5] & 0x80) >> 7;
	_tm.year = century == 1 ? 2000 + bcd2dec(rtc[6]) : 1900 + bcd2dec(rtc[6]); // year 0-99
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	20 53       	subi	r18, 0x30	; 48
     b9a:	38 4f       	sbci	r19, 0xF8	; 248
     b9c:	bf cf       	rjmp	.-130    	; 0xb1c <rtc_get_time+0x12a>

00000b9e <rtc_set_time>:
	if (hour) *hour = bcd2dec(rtc[2]);
}

// fixme: support 12-hour mode for setting time
void rtc_set_time(struct tm* tm_)
{
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ec 01       	movw	r28, r24
}

void twi_begin_transmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 3f 01 	sts	0x013F, r24
  // set address of targeted slave
  txAddress = address;
     bae:	88 e6       	ldi	r24, 0x68	; 104
     bb0:	80 93 42 01 	sts	0x0142, r24
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     bb4:	10 92 41 01 	sts	0x0141, r1
  txBufferLength = 0;
     bb8:	10 92 40 01 	sts	0x0140, r1

// fixme: support 12-hour mode for setting time
void rtc_set_time(struct tm* tm_)
{
	twi_begin_transmission(RTC_ADDR);
	twi_send_byte(0x0);
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>

	uint8_t century;
	if (tm_->year > 2000) {
     bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
     bc6:	81 3d       	cpi	r24, 0xD1	; 209
     bc8:	27 e0       	ldi	r18, 0x07	; 7
     bca:	92 07       	cpc	r25, r18
     bcc:	0c f0       	brlt	.+2      	; 0xbd0 <rtc_set_time+0x32>
     bce:	69 c0       	rjmp	.+210    	; 0xca2 <rtc_set_time+0x104>
		century = 0x80;
		tm_->year = tm_->year - 2000;
	} else {
		century = 0;
		tm_->year = tm_->year - 1900;
     bd0:	8c 56       	subi	r24, 0x6C	; 108
     bd2:	97 40       	sbci	r25, 0x07	; 7
     bd4:	9b 87       	std	Y+11, r25	; 0x0b
     bd6:	8a 87       	std	Y+10, r24	; 0x0a
	uint8_t century;
	if (tm_->year > 2000) {
		century = 0x80;
		tm_->year = tm_->year - 2000;
	} else {
		century = 0;
     bd8:	00 e0       	ldi	r16, 0x00	; 0
		tm_->year = tm_->year - 1900;
	}

	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
	twi_send_byte(dec2bcd(tm_->sec)); // seconds
     bda:	88 81       	ld	r24, Y
// statically allocated structure for time value
struct tm _tm;

uint8_t dec2bcd(uint8_t d)
{
  return ((d/10 * 16) + (d % 10));
     bdc:	1d ec       	ldi	r17, 0xCD	; 205
     bde:	81 9f       	mul	r24, r17
     be0:	91 2d       	mov	r25, r1
     be2:	11 24       	eor	r1, r1
     be4:	96 95       	lsr	r25
     be6:	96 95       	lsr	r25
     be8:	96 95       	lsr	r25
		century = 0;
		tm_->year = tm_->year - 1900;
	}

	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
	twi_send_byte(dec2bcd(tm_->sec)); // seconds
     bea:	36 e0       	ldi	r19, 0x06	; 6
     bec:	93 9f       	mul	r25, r19
     bee:	80 0d       	add	r24, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->min)); // minutes
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
// statically allocated structure for time value
struct tm _tm;

uint8_t dec2bcd(uint8_t d)
{
  return ((d/10 * 16) + (d % 10));
     bf8:	81 9f       	mul	r24, r17
     bfa:	91 2d       	mov	r25, r1
     bfc:	11 24       	eor	r1, r1
     bfe:	96 95       	lsr	r25
     c00:	96 95       	lsr	r25
     c02:	96 95       	lsr	r25
		tm_->year = tm_->year - 1900;
	}

	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
	twi_send_byte(dec2bcd(tm_->sec)); // seconds
	twi_send_byte(dec2bcd(tm_->min)); // minutes
     c04:	26 e0       	ldi	r18, 0x06	; 6
     c06:	92 9f       	mul	r25, r18
     c08:	80 0d       	add	r24, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->hour)); // hours
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
// statically allocated structure for time value
struct tm _tm;

uint8_t dec2bcd(uint8_t d)
{
  return ((d/10 * 16) + (d % 10));
     c12:	81 9f       	mul	r24, r17
     c14:	91 2d       	mov	r25, r1
     c16:	11 24       	eor	r1, r1
     c18:	96 95       	lsr	r25
     c1a:	96 95       	lsr	r25
     c1c:	96 95       	lsr	r25
	}

	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
	twi_send_byte(dec2bcd(tm_->sec)); // seconds
	twi_send_byte(dec2bcd(tm_->min)); // minutes
	twi_send_byte(dec2bcd(tm_->hour)); // hours
     c1e:	36 e0       	ldi	r19, 0x06	; 6
     c20:	93 9f       	mul	r25, r19
     c22:	80 0d       	add	r24, r0
     c24:	11 24       	eor	r1, r1
     c26:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->wday)); // day of week
     c2a:	8c 85       	ldd	r24, Y+12	; 0x0c
// statically allocated structure for time value
struct tm _tm;

uint8_t dec2bcd(uint8_t d)
{
  return ((d/10 * 16) + (d % 10));
     c2c:	81 9f       	mul	r24, r17
     c2e:	91 2d       	mov	r25, r1
     c30:	11 24       	eor	r1, r1
     c32:	96 95       	lsr	r25
     c34:	96 95       	lsr	r25
     c36:	96 95       	lsr	r25

	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
	twi_send_byte(dec2bcd(tm_->sec)); // seconds
	twi_send_byte(dec2bcd(tm_->min)); // minutes
	twi_send_byte(dec2bcd(tm_->hour)); // hours
	twi_send_byte(dec2bcd(tm_->wday)); // day of week
     c38:	26 e0       	ldi	r18, 0x06	; 6
     c3a:	92 9f       	mul	r25, r18
     c3c:	80 0d       	add	r24, r0
     c3e:	11 24       	eor	r1, r1
     c40:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->mday)); // day
     c44:	8e 81       	ldd	r24, Y+6	; 0x06
// statically allocated structure for time value
struct tm _tm;

uint8_t dec2bcd(uint8_t d)
{
  return ((d/10 * 16) + (d % 10));
     c46:	81 9f       	mul	r24, r17
     c48:	91 2d       	mov	r25, r1
     c4a:	11 24       	eor	r1, r1
     c4c:	96 95       	lsr	r25
     c4e:	96 95       	lsr	r25
     c50:	96 95       	lsr	r25
	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
	twi_send_byte(dec2bcd(tm_->sec)); // seconds
	twi_send_byte(dec2bcd(tm_->min)); // minutes
	twi_send_byte(dec2bcd(tm_->hour)); // hours
	twi_send_byte(dec2bcd(tm_->wday)); // day of week
	twi_send_byte(dec2bcd(tm_->mday)); // day
     c52:	36 e0       	ldi	r19, 0x06	; 6
     c54:	93 9f       	mul	r25, r19
     c56:	80 0d       	add	r24, r0
     c58:	11 24       	eor	r1, r1
     c5a:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->mon) + century); // month
     c5e:	28 85       	ldd	r18, Y+8	; 0x08
// statically allocated structure for time value
struct tm _tm;

uint8_t dec2bcd(uint8_t d)
{
  return ((d/10 * 16) + (d % 10));
     c60:	21 9f       	mul	r18, r17
     c62:	91 2d       	mov	r25, r1
     c64:	11 24       	eor	r1, r1
     c66:	96 95       	lsr	r25
     c68:	96 95       	lsr	r25
     c6a:	96 95       	lsr	r25
     c6c:	82 2f       	mov	r24, r18
     c6e:	36 e0       	ldi	r19, 0x06	; 6
     c70:	93 9f       	mul	r25, r19
     c72:	80 0d       	add	r24, r0
     c74:	11 24       	eor	r1, r1
	twi_send_byte(dec2bcd(tm_->sec)); // seconds
	twi_send_byte(dec2bcd(tm_->min)); // minutes
	twi_send_byte(dec2bcd(tm_->hour)); // hours
	twi_send_byte(dec2bcd(tm_->wday)); // day of week
	twi_send_byte(dec2bcd(tm_->mday)); // day
	twi_send_byte(dec2bcd(tm_->mon) + century); // month
     c76:	80 0f       	add	r24, r16
     c78:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>
	twi_send_byte(dec2bcd(tm_->year)); // year
     c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
// statically allocated structure for time value
struct tm _tm;

uint8_t dec2bcd(uint8_t d)
{
  return ((d/10 * 16) + (d % 10));
     c7e:	81 9f       	mul	r24, r17
     c80:	11 2d       	mov	r17, r1
     c82:	11 24       	eor	r1, r1
     c84:	16 95       	lsr	r17
     c86:	16 95       	lsr	r17
     c88:	16 95       	lsr	r17
	twi_send_byte(dec2bcd(tm_->min)); // minutes
	twi_send_byte(dec2bcd(tm_->hour)); // hours
	twi_send_byte(dec2bcd(tm_->wday)); // day of week
	twi_send_byte(dec2bcd(tm_->mday)); // day
	twi_send_byte(dec2bcd(tm_->mon) + century); // month
	twi_send_byte(dec2bcd(tm_->year)); // year
     c8a:	96 e0       	ldi	r25, 0x06	; 6
     c8c:	19 9f       	mul	r17, r25
     c8e:	80 0d       	add	r24, r0
     c90:	11 24       	eor	r1, r1
     c92:	0e 94 66 04 	call	0x8cc	; 0x8cc <twi_send_byte>

	twi_end_transmission();
}
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
	twi_send_byte(dec2bcd(tm_->wday)); // day of week
	twi_send_byte(dec2bcd(tm_->mday)); // day
	twi_send_byte(dec2bcd(tm_->mon) + century); // month
	twi_send_byte(dec2bcd(tm_->year)); // year

	twi_end_transmission();
     c9e:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <twi_end_transmission>
	twi_send_byte(0x0);

	uint8_t century;
	if (tm_->year > 2000) {
		century = 0x80;
		tm_->year = tm_->year - 2000;
     ca2:	80 5d       	subi	r24, 0xD0	; 208
     ca4:	97 40       	sbci	r25, 0x07	; 7
     ca6:	9b 87       	std	Y+11, r25	; 0x0b
     ca8:	8a 87       	std	Y+10, r24	; 0x0a
	twi_begin_transmission(RTC_ADDR);
	twi_send_byte(0x0);

	uint8_t century;
	if (tm_->year > 2000) {
		century = 0x80;
     caa:	00 e8       	ldi	r16, 0x80	; 128
     cac:	96 cf       	rjmp	.-212    	; 0xbda <rtc_set_time+0x3c>

00000cae <format_2_string>:
void restore_vars_from_EEPROM();
void EEPROM_compare(unsigned int address, unsigned char data);

void update_the_stuff(uint8_t tick_tock);

void format_2_string(time_t* time){
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ec 01       	movw	r28, r24
	if (time->seconds<10){
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cb6:	4a e0       	ldi	r20, 0x0A	; 10
     cb8:	be 01       	movw	r22, r28
     cba:	8a 30       	cpi	r24, 0x0A	; 10
     cbc:	64 f5       	brge	.+88     	; 0xd16 <format_2_string+0x68>
     cbe:	61 5f       	subi	r22, 0xF1	; 241
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	99 27       	eor	r25, r25
     cc4:	87 fd       	sbrc	r24, 7
     cc6:	90 95       	com	r25
     cc8:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__itoa_ncheck>
		itoa(time->seconds, &time->whole_time[7],10);
		time->whole_time[6]='0';
     ccc:	80 e3       	ldi	r24, 0x30	; 48
     cce:	8e 87       	std	Y+14, r24	; 0x0e
	}
	else itoa(time->seconds, &time->whole_time[6],10);

	if (time->minutes<10){
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	4a e0       	ldi	r20, 0x0A	; 10
     cd4:	be 01       	movw	r22, r28
     cd6:	8a 30       	cpi	r24, 0x0A	; 10
     cd8:	54 f5       	brge	.+84     	; 0xd2e <format_2_string+0x80>
     cda:	64 5f       	subi	r22, 0xF4	; 244
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	99 27       	eor	r25, r25
     ce0:	87 fd       	sbrc	r24, 7
     ce2:	90 95       	com	r25
     ce4:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__itoa_ncheck>
		itoa(time->minutes, &time->whole_time[4],10);
		time->whole_time[3]='0';
     ce8:	80 e3       	ldi	r24, 0x30	; 48
     cea:	8b 87       	std	Y+11, r24	; 0x0b
	}
	else itoa(time->minutes, &time->whole_time[3],10);

	if (time->hours<10){
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	8a 30       	cpi	r24, 0x0A	; 10
     cf0:	44 f1       	brlt	.+80     	; 0xd42 <format_2_string+0x94>
		itoa(time->hours, &time->whole_time[1],10);
		time->whole_time[0]='0';
	}
	else ltoa(time->hours, &time->whole_time[0],10);
     cf2:	68 2f       	mov	r22, r24
     cf4:	77 27       	eor	r23, r23
     cf6:	67 fd       	sbrc	r22, 7
     cf8:	70 95       	com	r23
     cfa:	87 2f       	mov	r24, r23
     cfc:	97 2f       	mov	r25, r23
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     cfe:	2a e0       	ldi	r18, 0x0A	; 10
     d00:	ae 01       	movw	r20, r28
     d02:	48 5f       	subi	r20, 0xF8	; 248
     d04:	5f 4f       	sbci	r21, 0xFF	; 255
     d06:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__ltoa_ncheck>

	time->whole_time[2]=':';
     d0a:	8a e3       	ldi	r24, 0x3A	; 58
     d0c:	8a 87       	std	Y+10, r24	; 0x0a
	time->whole_time[5]=':';
     d0e:	8d 87       	std	Y+13, r24	; 0x0d
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d16:	62 5f       	subi	r22, 0xF2	; 242
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	99 27       	eor	r25, r25
     d1c:	87 fd       	sbrc	r24, 7
     d1e:	90 95       	com	r25
     d20:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__itoa_ncheck>
		itoa(time->seconds, &time->whole_time[7],10);
		time->whole_time[6]='0';
	}
	else itoa(time->seconds, &time->whole_time[6],10);

	if (time->minutes<10){
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	4a e0       	ldi	r20, 0x0A	; 10
     d28:	be 01       	movw	r22, r28
     d2a:	8a 30       	cpi	r24, 0x0A	; 10
     d2c:	b4 f2       	brlt	.-84     	; 0xcda <format_2_string+0x2c>
     d2e:	65 5f       	subi	r22, 0xF5	; 245
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	99 27       	eor	r25, r25
     d34:	87 fd       	sbrc	r24, 7
     d36:	90 95       	com	r25
     d38:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__itoa_ncheck>
		itoa(time->minutes, &time->whole_time[4],10);
		time->whole_time[3]='0';
	}
	else itoa(time->minutes, &time->whole_time[3],10);

	if (time->hours<10){
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	8a 30       	cpi	r24, 0x0A	; 10
     d40:	c4 f6       	brge	.-80     	; 0xcf2 <format_2_string+0x44>
     d42:	4a e0       	ldi	r20, 0x0A	; 10
     d44:	be 01       	movw	r22, r28
     d46:	67 5f       	subi	r22, 0xF7	; 247
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	99 27       	eor	r25, r25
     d4c:	87 fd       	sbrc	r24, 7
     d4e:	90 95       	com	r25
     d50:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__itoa_ncheck>
		itoa(time->hours, &time->whole_time[1],10);
		time->whole_time[0]='0';
     d54:	80 e3       	ldi	r24, 0x30	; 48
     d56:	88 87       	std	Y+8, r24	; 0x08
	}
	else ltoa(time->hours, &time->whole_time[0],10);

	time->whole_time[2]=':';
     d58:	8a e3       	ldi	r24, 0x3A	; 58
     d5a:	8a 87       	std	Y+10, r24	; 0x0a
	time->whole_time[5]=':';
     d5c:	8d 87       	std	Y+13, r24	; 0x0d
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <update_clock>:

void update_clock(uint8_t elapsed_millis){
     d64:	cf 93       	push	r28
	if (time.is_being_changed) return;
     d66:	90 91 ec 01 	lds	r25, 0x01EC
     d6a:	91 11       	cpse	r25, r1
     d6c:	0e c0       	rjmp	.+28     	; 0xd8a <update_clock+0x26>

	time.millis += elapsed_millis;
     d6e:	20 91 e5 01 	lds	r18, 0x01E5
     d72:	30 91 e6 01 	lds	r19, 0x01E6
     d76:	28 0f       	add	r18, r24
     d78:	31 1d       	adc	r19, r1
     d7a:	30 93 e6 01 	sts	0x01E6, r19
     d7e:	20 93 e5 01 	sts	0x01E5, r18
	if (time.millis<(1000)) return;
     d82:	28 3e       	cpi	r18, 0xE8	; 232
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	38 07       	cpc	r19, r24
     d88:	14 f4       	brge	.+4      	; 0xd8e <update_clock+0x2a>

	format_2_string(&time);
	time.has_changed=1;


}
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret
void update_clock(uint8_t elapsed_millis){
	if (time.is_being_changed) return;

	time.millis += elapsed_millis;
	if (time.millis<(1000)) return;
	time.millis -= 1000;
     d8e:	28 5e       	subi	r18, 0xE8	; 232
     d90:	33 40       	sbci	r19, 0x03	; 3
     d92:	30 93 e6 01 	sts	0x01E6, r19
     d96:	20 93 e5 01 	sts	0x01E5, r18

	int8_t old_hour = time.hours;
     d9a:	c0 91 e9 01 	lds	r28, 0x01E9

	rtc_get_time();
     d9e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <rtc_get_time>
	time.seconds = (int8_t) _tm.sec;
     da2:	80 91 16 02 	lds	r24, 0x0216
     da6:	80 93 e7 01 	sts	0x01E7, r24
	time.minutes = (int8_t) _tm.min;
     daa:	80 91 18 02 	lds	r24, 0x0218
     dae:	80 93 e8 01 	sts	0x01E8, r24
	time.hours = (int8_t) _tm.hour;
     db2:	80 91 1a 02 	lds	r24, 0x021A
     db6:	80 93 e9 01 	sts	0x01E9, r24
	time.days = (int8_t) _tm.wday;
     dba:	90 91 22 02 	lds	r25, 0x0222
	if (time.days==7) time.days=0; //wrap over for when the rtc automatically goes from sunday (6) to monday (7), which I instead count as 0
     dbe:	97 30       	cpi	r25, 0x07	; 7
     dc0:	79 f0       	breq	.+30     	; 0xde0 <update_clock+0x7c>

	rtc_get_time();
	time.seconds = (int8_t) _tm.sec;
	time.minutes = (int8_t) _tm.min;
	time.hours = (int8_t) _tm.hour;
	time.days = (int8_t) _tm.wday;
     dc2:	90 93 ea 01 	sts	0x01EA, r25
	if (time.days==7) time.days=0; //wrap over for when the rtc automatically goes from sunday (6) to monday (7), which I instead count as 0

	if (time.hours==0 && old_hour==23)
     dc6:	81 11       	cpse	r24, r1
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <update_clock+0x6a>
     dca:	c7 31       	cpi	r28, 0x17	; 23
     dcc:	61 f0       	breq	.+24     	; 0xde6 <update_clock+0x82>
		water_schedule[time.days].done_today=0; //as the old day sets, clear the "done_today" flag, so that it can fly another day

	format_2_string(&time);
     dce:	85 ee       	ldi	r24, 0xE5	; 229
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 57 06 	call	0xcae	; 0xcae <format_2_string>
	time.has_changed=1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 eb 01 	sts	0x01EB, r24


}
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret
	rtc_get_time();
	time.seconds = (int8_t) _tm.sec;
	time.minutes = (int8_t) _tm.min;
	time.hours = (int8_t) _tm.hour;
	time.days = (int8_t) _tm.wday;
	if (time.days==7) time.days=0; //wrap over for when the rtc automatically goes from sunday (6) to monday (7), which I instead count as 0
     de0:	10 92 ea 01 	sts	0x01EA, r1
     de4:	f0 cf       	rjmp	.-32     	; 0xdc6 <update_clock+0x62>

	if (time.hours==0 && old_hour==23)
		water_schedule[time.days].done_today=0; //as the old day sets, clear the "done_today" flag, so that it can fly another day
     de6:	e0 91 ea 01 	lds	r30, 0x01EA
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	e8 02       	muls	r30, r24
     dee:	f0 01       	movw	r30, r0
     df0:	11 24       	eor	r1, r1
     df2:	e4 5e       	subi	r30, 0xE4	; 228
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	13 82       	std	Z+3, r1	; 0x03
     df8:	ea cf       	rjmp	.-44     	; 0xdce <update_clock+0x6a>

00000dfa <__vector_7>:
	}
	return 0;
}


ISR(TIMER2_COMPA_vect){
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	0f 92       	push	r0
     e02:	11 24       	eor	r1, r1
     e04:	8f 93       	push	r24
	debounced_b=0;
     e06:	10 92 38 01 	sts	0x0138, r1
	debounced_a=0;
     e0a:	10 92 39 01 	sts	0x0139, r1
	tick_tock+=4;
     e0e:	80 91 3a 01 	lds	r24, 0x013A
     e12:	8c 5f       	subi	r24, 0xFC	; 252
     e14:	80 93 3a 01 	sts	0x013A, r24
}
     e18:	8f 91       	pop	r24
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	1f 90       	pop	r1
     e22:	18 95       	reti

00000e24 <__vector_3>:

ISR(PCINT0_vect){ //todo: simplify this stuff
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	2f 93       	push	r18
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
	//immediately get PINB
	uint8_t pin_b = PINB;
     e34:	23 b1       	in	r18, 0x03	; 3

	if (debounced_a==0){
     e36:	90 91 39 01 	lds	r25, 0x0139
     e3a:	91 11       	cpse	r25, r1
     e3c:	13 c0       	rjmp	.+38     	; 0xe64 <__vector_3+0x40>
		debounced_a++;
     e3e:	80 91 39 01 	lds	r24, 0x0139
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	80 93 39 01 	sts	0x0139, r24

		static uint8_t  old_button=1;
		uint8_t  enc_button=1;

		enc_button 	= (pin_b>>ENC_BUTTON) & 0x01;
     e48:	21 fb       	bst	r18, 1
     e4a:	88 27       	eor	r24, r24
     e4c:	80 f9       	bld	r24, 0

		if (enc_button!=old_button){
     e4e:	90 91 04 01 	lds	r25, 0x0104
     e52:	89 17       	cp	r24, r25
     e54:	39 f0       	breq	.+14     	; 0xe64 <__vector_3+0x40>
			old_button=enc_button;
     e56:	80 93 04 01 	sts	0x0104, r24
			enc_button_pressed=!enc_button;
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	81 11       	cpse	r24, r1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	90 93 3c 01 	sts	0x013C, r25
		}
	}
}
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	2f 91       	pop	r18
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	0f 90       	pop	r0
     e70:	1f 90       	pop	r1
     e72:	18 95       	reti

00000e74 <__vector_4>:

ISR(PCINT1_vect){
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
	//immediately get PINC
	uint8_t pin_c = PINC;
     e8a:	56 b1       	in	r21, 0x06	; 6

	if (debounced_b==0){
     e8c:	80 91 38 01 	lds	r24, 0x0138
     e90:	81 11       	cpse	r24, r1
     e92:	1c c0       	rjmp	.+56     	; 0xecc <__vector_4+0x58>
		debounced_b++;
     e94:	80 91 38 01 	lds	r24, 0x0138
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	80 93 38 01 	sts	0x0138, r24

		static uint8_t old_a=0;
		uint8_t enc_a=0, enc_b=0;

		enc_a 		= (pin_c>>ENC_A_PIN) & 0x01;
     e9e:	45 2f       	mov	r20, r21
     ea0:	41 70       	andi	r20, 0x01	; 1
		enc_b 		= (pin_c>>ENC_B_PIN) & 0x01;

		if((enc_a != old_a) & enc_a){
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	80 91 14 01 	lds	r24, 0x0114
     eaa:	48 17       	cp	r20, r24
     eac:	d1 f0       	breq	.+52     	; 0xee2 <__vector_4+0x6e>
     eae:	84 2f       	mov	r24, r20
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	82 23       	and	r24, r18
     eb4:	93 23       	and	r25, r19
     eb6:	89 2b       	or	r24, r25
     eb8:	39 f0       	breq	.+14     	; 0xec8 <__vector_4+0x54>

		static uint8_t old_a=0;
		uint8_t enc_a=0, enc_b=0;

		enc_a 		= (pin_c>>ENC_A_PIN) & 0x01;
		enc_b 		= (pin_c>>ENC_B_PIN) & 0x01;
     eba:	56 95       	lsr	r21
     ebc:	51 70       	andi	r21, 0x01	; 1

		if((enc_a != old_a) & enc_a){
			if ((enc_a != enc_b)) enc_dir=1;
     ebe:	45 17       	cp	r20, r21
     ec0:	c9 f0       	breq	.+50     	; 0xef4 <__vector_4+0x80>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 3b 01 	sts	0x013B, r24
			else enc_dir=-1;
		}
		old_a = enc_a;
     ec8:	40 93 14 01 	sts	0x0114, r20
	}
}
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti
		uint8_t enc_a=0, enc_b=0;

		enc_a 		= (pin_c>>ENC_A_PIN) & 0x01;
		enc_b 		= (pin_c>>ENC_B_PIN) & 0x01;

		if((enc_a != old_a) & enc_a){
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	84 2f       	mov	r24, r20
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	82 23       	and	r24, r18
     eec:	93 23       	and	r25, r19
     eee:	89 2b       	or	r24, r25
     ef0:	59 f3       	breq	.-42     	; 0xec8 <__vector_4+0x54>
     ef2:	e3 cf       	rjmp	.-58     	; 0xeba <__vector_4+0x46>
			if ((enc_a != enc_b)) enc_dir=1;
			else enc_dir=-1;
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	80 93 3b 01 	sts	0x013B, r24
     efa:	e6 cf       	rjmp	.-52     	; 0xec8 <__vector_4+0x54>

00000efc <update_the_stuff>:
	}
}

#define _NOP() do { __asm__ __volatile__ ("nop"); } while (0)

void update_the_stuff(uint8_t tick_tock){
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
	uint8_t today=time.days;
     f04:	e0 91 ea 01 	lds	r30, 0x01EA
	static int32_t water_timer=-1; //-1:disabled   positive or zero: activated



	//if the time is right, and the light is not on yet, switch it on
	if (light_start_time<light_stop_time){ //case 1
     f08:	90 91 19 01 	lds	r25, 0x0119
     f0c:	30 91 18 01 	lds	r19, 0x0118
		if ( (light_start_time<=time.hours) && (time.hours<light_stop_time) && !light_is_on && light_start_time!=light_stop_time){
     f10:	20 91 e9 01 	lds	r18, 0x01E9
	static int32_t water_timer=-1; //-1:disabled   positive or zero: activated



	//if the time is right, and the light is not on yet, switch it on
	if (light_start_time<light_stop_time){ //case 1
     f14:	93 17       	cp	r25, r19
     f16:	3c f5       	brge	.+78     	; 0xf66 <update_the_stuff+0x6a>
		if ( (light_start_time<=time.hours) && (time.hours<light_stop_time) && !light_is_on && light_start_time!=light_stop_time){
     f18:	29 17       	cp	r18, r25
     f1a:	9c f0       	brlt	.+38     	; 0xf42 <update_the_stuff+0x46>
     f1c:	23 17       	cp	r18, r19
     f1e:	8c f4       	brge	.+34     	; 0xf42 <update_the_stuff+0x46>
     f20:	40 91 17 01 	lds	r20, 0x0117
     f24:	41 11       	cpse	r20, r1
     f26:	83 c0       	rjmp	.+262    	; 0x102e <update_the_stuff+0x132>
			 LIGHT_ON;
     f28:	2a 9a       	sbi	0x05, 2	; 5
			light_is_on=1;
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	90 93 17 01 	sts	0x0117, r25
		}
		//if it's outside the "on" hours, and the light is on, switch it off
		if ( ((time.hours<light_start_time) || (time.hours>=light_stop_time)) && light_is_on){
     f30:	90 91 19 01 	lds	r25, 0x0119
     f34:	29 17       	cp	r18, r25
     f36:	54 f0       	brlt	.+20     	; 0xf4c <update_the_stuff+0x50>
     f38:	30 91 18 01 	lds	r19, 0x0118
     f3c:	43 2f       	mov	r20, r19
     f3e:	23 17       	cp	r18, r19
     f40:	cc f0       	brlt	.+50     	; 0xf74 <update_the_stuff+0x78>
     f42:	40 91 17 01 	lds	r20, 0x0117
     f46:	44 23       	and	r20, r20
     f48:	09 f4       	brne	.+2      	; 0xf4c <update_the_stuff+0x50>
     f4a:	71 c0       	rjmp	.+226    	; 0x102e <update_the_stuff+0x132>
		if ( (light_start_time<=time.hours) && !light_is_on && light_start_time!=light_stop_time){
			LIGHT_ON;
			light_is_on=1;
		}
		if ( (light_stop_time<=time.hours) && (time.hours<light_start_time) && light_is_on){
			LIGHT_OFF;
     f4c:	2a 98       	cbi	0x05, 2	; 5
			light_is_on=0;
     f4e:	10 92 17 01 	sts	0x0117, r1
     f52:	90 91 19 01 	lds	r25, 0x0119
     f56:	40 91 18 01 	lds	r20, 0x0118
		}
	}

	if (light_start_time==light_stop_time){
     f5a:	94 13       	cpse	r25, r20
     f5c:	0d c0       	rjmp	.+26     	; 0xf78 <update_the_stuff+0x7c>
		LIGHT_OFF;
     f5e:	2a 98       	cbi	0x05, 2	; 5
		light_is_on=0;
     f60:	10 92 17 01 	sts	0x0117, r1
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <update_the_stuff+0x7c>
			LIGHT_OFF;
			light_is_on=0;
		}
	}
	else { //case 2 when it starts the first day and goes on till the next day
		if ( (light_start_time<=time.hours) && !light_is_on && light_start_time!=light_stop_time){
     f66:	29 17       	cp	r18, r25
     f68:	0c f0       	brlt	.+2      	; 0xf6c <update_the_stuff+0x70>
     f6a:	52 c0       	rjmp	.+164    	; 0x1010 <update_the_stuff+0x114>
     f6c:	43 2f       	mov	r20, r19
			LIGHT_ON;
			light_is_on=1;
		}
		if ( (light_stop_time<=time.hours) && (time.hours<light_start_time) && light_is_on){
     f6e:	24 17       	cp	r18, r20
     f70:	0c f0       	brlt	.+2      	; 0xf74 <update_the_stuff+0x78>
     f72:	5f c0       	rjmp	.+190    	; 0x1032 <update_the_stuff+0x136>
			LIGHT_OFF;
			light_is_on=0;
		}
	}

	if (light_start_time==light_stop_time){
     f74:	94 17       	cp	r25, r20
     f76:	99 f3       	breq	.-26     	; 0xf5e <update_the_stuff+0x62>




	//if the time is right, if today it should water, and has not watered previously today...water
	if (!water_schedule[today].is_being_changed && !time.is_being_changed){ //only water once things have been set
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	e4 5e       	subi	r30, 0xE4	; 228
     f84:	fe 4f       	sbci	r31, 0xFE	; 254
     f86:	92 81       	ldd	r25, Z+2	; 0x02
     f88:	91 11       	cpse	r25, r1
     f8a:	3d c0       	rjmp	.+122    	; 0x1006 <update_the_stuff+0x10a>
     f8c:	90 91 ec 01 	lds	r25, 0x01EC
     f90:	91 11       	cpse	r25, r1
     f92:	39 c0       	rjmp	.+114    	; 0x1006 <update_the_stuff+0x10a>
		if ((water_schedule[today].hour == time.hours) && !(water_schedule[today].done_today) && water_schedule[today].on){
     f94:	90 81       	ld	r25, Z
     f96:	92 17       	cp	r25, r18
     f98:	09 f4       	brne	.+2      	; 0xf9c <update_the_stuff+0xa0>
     f9a:	54 c0       	rjmp	.+168    	; 0x1044 <update_the_stuff+0x148>
			water_schedule[today].done_today=1;
			//enable the water timer
			water_timer=0;
		}

		if (water_timer != -1){
     f9c:	40 91 00 01 	lds	r20, 0x0100
     fa0:	50 91 01 01 	lds	r21, 0x0101
     fa4:	60 91 02 01 	lds	r22, 0x0102
     fa8:	70 91 03 01 	lds	r23, 0x0103
     fac:	4f 3f       	cpi	r20, 0xFF	; 255
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	59 07       	cpc	r21, r25
     fb2:	69 07       	cpc	r22, r25
     fb4:	79 07       	cpc	r23, r25
     fb6:	39 f1       	breq	.+78     	; 0x1006 <update_the_stuff+0x10a>
			water_timer+= tick_tock;
     fb8:	6a 01       	movw	r12, r20
     fba:	7b 01       	movw	r14, r22
     fbc:	c8 0e       	add	r12, r24
     fbe:	d1 1c       	adc	r13, r1
     fc0:	e1 1c       	adc	r14, r1
     fc2:	f1 1c       	adc	r15, r1
     fc4:	c0 92 00 01 	sts	0x0100, r12
     fc8:	d0 92 01 01 	sts	0x0101, r13
     fcc:	e0 92 02 01 	sts	0x0102, r14
     fd0:	f0 92 03 01 	sts	0x0103, r15

			if (water_timer >= ((long)water_ml*ML_2_MS)) {
     fd4:	a0 91 1a 01 	lds	r26, 0x011A
     fd8:	b0 91 1b 01 	lds	r27, 0x011B
     fdc:	2a e0       	ldi	r18, 0x0A	; 10
     fde:	31 e0       	ldi	r19, 0x01	; 1
     fe0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__usmulhisi3>
     fe4:	c6 16       	cp	r12, r22
     fe6:	d7 06       	cpc	r13, r23
     fe8:	e8 06       	cpc	r14, r24
     fea:	f9 06       	cpc	r15, r25
     fec:	64 f0       	brlt	.+24     	; 0x1006 <update_the_stuff+0x10a>
				MOTOR_OFF;
     fee:	28 98       	cbi	0x05, 0	; 5
				SECOND_MOTOR_OFF;
				water_timer=-1; //disable timer
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	9f ef       	ldi	r25, 0xFF	; 255
     ff4:	dc 01       	movw	r26, r24
     ff6:	80 93 00 01 	sts	0x0100, r24
     ffa:	90 93 01 01 	sts	0x0101, r25
     ffe:	a0 93 02 01 	sts	0x0102, r26
    1002:	b0 93 03 01 	sts	0x0103, r27
			}
		}
	}


}
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	df 90       	pop	r13
    100c:	cf 90       	pop	r12
    100e:	08 95       	ret
			LIGHT_OFF;
			light_is_on=0;
		}
	}
	else { //case 2 when it starts the first day and goes on till the next day
		if ( (light_start_time<=time.hours) && !light_is_on && light_start_time!=light_stop_time){
    1010:	40 91 17 01 	lds	r20, 0x0117
    1014:	41 11       	cpse	r20, r1
    1016:	aa cf       	rjmp	.-172    	; 0xf6c <update_the_stuff+0x70>
    1018:	93 17       	cp	r25, r19
    101a:	11 f1       	breq	.+68     	; 0x1060 <update_the_stuff+0x164>
			LIGHT_ON;
    101c:	2a 9a       	sbi	0x05, 2	; 5
			light_is_on=1;
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	90 93 17 01 	sts	0x0117, r25
    1024:	40 91 18 01 	lds	r20, 0x0118
    1028:	90 91 19 01 	lds	r25, 0x0119
    102c:	a0 cf       	rjmp	.-192    	; 0xf6e <update_the_stuff+0x72>
    102e:	43 2f       	mov	r20, r19
    1030:	a1 cf       	rjmp	.-190    	; 0xf74 <update_the_stuff+0x78>
		}
		if ( (light_stop_time<=time.hours) && (time.hours<light_start_time) && light_is_on){
    1032:	29 17       	cp	r18, r25
    1034:	0c f0       	brlt	.+2      	; 0x1038 <update_the_stuff+0x13c>
    1036:	9e cf       	rjmp	.-196    	; 0xf74 <update_the_stuff+0x78>
    1038:	90 91 17 01 	lds	r25, 0x0117
    103c:	99 23       	and	r25, r25
    103e:	09 f4       	brne	.+2      	; 0x1042 <update_the_stuff+0x146>
    1040:	9b cf       	rjmp	.-202    	; 0xf78 <update_the_stuff+0x7c>
    1042:	84 cf       	rjmp	.-248    	; 0xf4c <update_the_stuff+0x50>



	//if the time is right, if today it should water, and has not watered previously today...water
	if (!water_schedule[today].is_being_changed && !time.is_being_changed){ //only water once things have been set
		if ((water_schedule[today].hour == time.hours) && !(water_schedule[today].done_today) && water_schedule[today].on){
    1044:	93 81       	ldd	r25, Z+3	; 0x03
    1046:	91 11       	cpse	r25, r1
    1048:	a9 cf       	rjmp	.-174    	; 0xf9c <update_the_stuff+0xa0>
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	99 23       	and	r25, r25
    104e:	09 f4       	brne	.+2      	; 0x1052 <update_the_stuff+0x156>
    1050:	a5 cf       	rjmp	.-182    	; 0xf9c <update_the_stuff+0xa0>
			MOTOR_ON;
    1052:	28 9a       	sbi	0x05, 0	; 5
			SECOND_MOTOR_ON;
			water_schedule[today].done_today=1;
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	93 83       	std	Z+3, r25	; 0x03
			//enable the water timer
			water_timer=0;
		}

		if (water_timer != -1){
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	ba 01       	movw	r22, r20
    105e:	ac cf       	rjmp	.-168    	; 0xfb8 <update_the_stuff+0xbc>
    1060:	49 2f       	mov	r20, r25
    1062:	88 cf       	rjmp	.-240    	; 0xf74 <update_the_stuff+0x78>

00001064 <restore_vars_from_EEPROM>:
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    1064:	f9 99       	sbic	0x1f, 1	; 31
    1066:	fe cf       	rjmp	.-4      	; 0x1064 <restore_vars_from_EEPROM>
	/* Set up address register */
	EEAR = uiAddress;
    1068:	8a e0       	ldi	r24, 0x0A	; 10
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	92 bd       	out	0x22, r25	; 34
    106e:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1070:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    1072:	80 b5       	in	r24, 0x20	; 32

}


void restore_vars_from_EEPROM(){
	light_start_time=EEPROM_read(LIGHT_START_ADDRESS);
    1074:	80 93 19 01 	sts	0x0119, r24
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    1078:	f9 99       	sbic	0x1f, 1	; 31
    107a:	fe cf       	rjmp	.-4      	; 0x1078 <restore_vars_from_EEPROM+0x14>
	/* Set up address register */
	EEAR = uiAddress;
    107c:	8c e0       	ldi	r24, 0x0C	; 12
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	92 bd       	out	0x22, r25	; 34
    1082:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1084:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    1086:	80 b5       	in	r24, 0x20	; 32
}


void restore_vars_from_EEPROM(){
	light_start_time=EEPROM_read(LIGHT_START_ADDRESS);
	light_stop_time=EEPROM_read(LIGHT_STOP_ADDRESS);
    1088:	80 93 18 01 	sts	0x0118, r24
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    108c:	f9 99       	sbic	0x1f, 1	; 31
    108e:	fe cf       	rjmp	.-4      	; 0x108c <restore_vars_from_EEPROM+0x28>
	/* Set up address register */
	EEAR = uiAddress;
    1090:	8e e0       	ldi	r24, 0x0E	; 14
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	92 bd       	out	0x22, r25	; 34
    1096:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1098:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    109a:	80 b5       	in	r24, 0x20	; 32
void restore_vars_from_EEPROM(){
	light_start_time=EEPROM_read(LIGHT_START_ADDRESS);
	light_stop_time=EEPROM_read(LIGHT_STOP_ADDRESS);


	water_ml = EEPROM_read(WATER_AMOUNT_ADDRESS) * 10;
    109c:	2a e0       	ldi	r18, 0x0A	; 10
    109e:	82 9f       	mul	r24, r18
    10a0:	c0 01       	movw	r24, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	90 93 1b 01 	sts	0x011B, r25
    10a8:	80 93 1a 01 	sts	0x011A, r24
    10ac:	ed e1       	ldi	r30, 0x1D	; 29
    10ae:	f1 e0       	ldi	r31, 0x01	; 1
    10b0:	82 e1       	ldi	r24, 0x12	; 18
    10b2:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i=0; i<7; i++){
		water_schedule[i].hour=EEPROM_read(WATER_SCHEDULE_HOUR_BASE_ADDRESS+i);
		//water_schedule[i].hour=24;
		//check if water should be on or off that day
		if (water_schedule[i].hour==24) water_schedule[i].on=0;
		else water_schedule[i].on=1;
    10b4:	31 e0       	ldi	r19, 0x01	; 1
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    10b6:	f9 99       	sbic	0x1f, 1	; 31
    10b8:	fe cf       	rjmp	.-4      	; 0x10b6 <restore_vars_from_EEPROM+0x52>
	/* Set up address register */
	EEAR = uiAddress;
    10ba:	92 bd       	out	0x22, r25	; 34
    10bc:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    10be:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    10c0:	20 b5       	in	r18, 0x20	; 32
    10c2:	df 01       	movw	r26, r30
    10c4:	11 97       	sbiw	r26, 0x01	; 1


	water_ml = EEPROM_read(WATER_AMOUNT_ADDRESS) * 10;

	for (uint8_t i=0; i<7; i++){
		water_schedule[i].hour=EEPROM_read(WATER_SCHEDULE_HOUR_BASE_ADDRESS+i);
    10c6:	2c 93       	st	X, r18
		//water_schedule[i].hour=24;
		//check if water should be on or off that day
		if (water_schedule[i].hour==24) water_schedule[i].on=0;
    10c8:	28 31       	cpi	r18, 0x18	; 24
    10ca:	39 f0       	breq	.+14     	; 0x10da <restore_vars_from_EEPROM+0x76>
		else water_schedule[i].on=1;
    10cc:	30 83       	st	Z, r19
    10ce:	34 96       	adiw	r30, 0x04	; 4
    10d0:	01 96       	adiw	r24, 0x01	; 1
	light_stop_time=EEPROM_read(LIGHT_STOP_ADDRESS);


	water_ml = EEPROM_read(WATER_AMOUNT_ADDRESS) * 10;

	for (uint8_t i=0; i<7; i++){
    10d2:	89 31       	cpi	r24, 0x19	; 25
    10d4:	91 05       	cpc	r25, r1
    10d6:	79 f7       	brne	.-34     	; 0x10b6 <restore_vars_from_EEPROM+0x52>
	EEPROM_compare(LIGHT_START_ADDRESS, 7);
	EEPROM_compare(LIGHT_STOP_ADDRESS, 10);
	for (uint8_t i=0; i<7; i++) EEPROM_compare(WATER_SCHEDULE_HOUR_BASE_ADDRESS+i, 24);
	*/

}
    10d8:	08 95       	ret

	for (uint8_t i=0; i<7; i++){
		water_schedule[i].hour=EEPROM_read(WATER_SCHEDULE_HOUR_BASE_ADDRESS+i);
		//water_schedule[i].hour=24;
		//check if water should be on or off that day
		if (water_schedule[i].hour==24) water_schedule[i].on=0;
    10da:	10 82       	st	Z, r1
    10dc:	f8 cf       	rjmp	.-16     	; 0x10ce <restore_vars_from_EEPROM+0x6a>

000010de <EEPROM_compare>:
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    10de:	f9 99       	sbic	0x1f, 1	; 31
    10e0:	fe cf       	rjmp	.-4      	; 0x10de <EEPROM_compare>
	/* Set up address register */
	EEAR = uiAddress;
    10e2:	92 bd       	out	0x22, r25	; 34
    10e4:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    10e6:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    10e8:	20 b5       	in	r18, 0x20	; 32

}
void EEPROM_compare(unsigned int address, unsigned char data){

	uint8_t temp=EEPROM_read(address);
	if (temp!=data) EEPROM_write(address, data);
    10ea:	62 17       	cp	r22, r18
    10ec:	49 f0       	breq	.+18     	; 0x1100 <EEPROM_compare+0x22>
}

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    10ee:	f9 99       	sbic	0x1f, 1	; 31
    10f0:	fe cf       	rjmp	.-4      	; 0x10ee <EEPROM_compare+0x10>
	/* Set up address and Data Registers */
	EEAR = uiAddress;
    10f2:	92 bd       	out	0x22, r25	; 34
    10f4:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    10f6:	60 bd       	out	0x20, r22	; 32

	cli(); //the next two intrsuctions need to happen immediately one after the other, or else the write won't work
    10f8:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
    10fa:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
    10fc:	f9 9a       	sbi	0x1f, 1	; 31
	sei();
    10fe:	78 94       	sei
    1100:	08 95       	ret

00001102 <update_menu>:
}
//commento solo per provare git...funziona???

#define NUM_MENUS 4

void update_menu(int8_t e_dir, uint8_t b_pressed, uint8_t reset_to_main_menu){
    1102:	df 92       	push	r13
    1104:	ef 92       	push	r14
    1106:	ff 92       	push	r15
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	29 97       	sbiw	r28, 0x09	; 9
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	f8 2e       	mov	r15, r24
    1122:	e6 2e       	mov	r14, r22
    1124:	14 2f       	mov	r17, r20
	}menu = {.current=0, .level=0, .cursor_on=0, .clear_is_due=1};
	static int8_t item=0; //goes 0 to 15 for first row, 16 to 31 second row
	static int8_t cursor_pos=0; //goes 0 to 15 for first row, 16 to 31 second row


	lcd_off(); //switch off the lcd, and switch it on at the end
    1126:	0e 94 2e 02 	call	0x45c	; 0x45c <lcd_off>

	//enable cursor for menu levels above 0
	if ((menu.level > 0) && !menu.cursor_on) {lcd_enable_cursor();	menu.cursor_on=1;}
    112a:	80 91 06 01 	lds	r24, 0x0106
    112e:	81 11       	cpse	r24, r1
    1130:	19 c0       	rjmp	.+50     	; 0x1164 <update_menu+0x62>
	if ((menu.level == 0) && menu.cursor_on) {lcd_disable_cursor();	menu.cursor_on=0;}
    1132:	80 91 07 01 	lds	r24, 0x0107
    1136:	81 11       	cpse	r24, r1
    1138:	53 c1       	rjmp	.+678    	; 0x13e0 <update_menu+0x2de>

	//default level 0 actions
	if (menu.level == 0) {
		//e_dir: 1=left -1=right 0=nothing
		menu.current += e_dir;
    113a:	80 91 05 01 	lds	r24, 0x0105
    113e:	8f 0d       	add	r24, r15
		wrap_around(menu.current, NUM_MENUS);
    1140:	84 30       	cpi	r24, 0x04	; 4
    1142:	0c f4       	brge	.+2      	; 0x1146 <update_menu+0x44>
    1144:	b7 c0       	rjmp	.+366    	; 0x12b4 <update_menu+0x1b2>
    1146:	9c ef       	ldi	r25, 0xFC	; 252
    1148:	89 0f       	add	r24, r25
    114a:	80 93 05 01 	sts	0x0105, r24
		//clear e_dir and the screen to avoid further interactions

		if (e_dir) menu.clear_is_due=1;
    114e:	ff 20       	and	r15, r15
    1150:	19 f0       	breq	.+6      	; 0x1158 <update_menu+0x56>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 08 01 	sts	0x0108, r24
		e_dir=0;
		//if button is pressed, move to level 1 and clear cursor_pos
		if (b_pressed) {
    1158:	e1 10       	cpse	r14, r1
    115a:	28 c1       	rjmp	.+592    	; 0x13ac <update_menu+0x2aa>
    115c:	80 91 08 01 	lds	r24, 0x0108
		menu.current += e_dir;
		wrap_around(menu.current, NUM_MENUS);
		//clear e_dir and the screen to avoid further interactions

		if (e_dir) menu.clear_is_due=1;
		e_dir=0;
    1160:	f1 2c       	mov	r15, r1
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <update_menu+0x70>


	lcd_off(); //switch off the lcd, and switch it on at the end

	//enable cursor for menu levels above 0
	if ((menu.level > 0) && !menu.cursor_on) {lcd_enable_cursor();	menu.cursor_on=1;}
    1164:	80 91 07 01 	lds	r24, 0x0107
    1168:	88 23       	and	r24, r24
    116a:	09 f4       	brne	.+2      	; 0x116e <update_menu+0x6c>
    116c:	30 c1       	rjmp	.+608    	; 0x13ce <update_menu+0x2cc>
    116e:	80 91 08 01 	lds	r24, 0x0108
		}
		//clear b_pressed to avoid further button interactions this time around
		b_pressed=0;
	}

	if (menu.clear_is_due) { lcd_clear_f(); menu.clear_is_due=0; menu.was_cleared=1;}
    1172:	81 11       	cpse	r24, r1
    1174:	24 c1       	rjmp	.+584    	; 0x13be <update_menu+0x2bc>

	if (reset_to_main_menu) menu.current=0;
    1176:	11 23       	and	r17, r17
    1178:	09 f4       	brne	.+2      	; 0x117c <update_menu+0x7a>
    117a:	5e c0       	rjmp	.+188    	; 0x1238 <update_menu+0x136>
    117c:	10 92 05 01 	sts	0x0105, r1
	//now for all the menus
	switch (menu.current){
	case 0: //just display the time...evventualy pressing the button should make it possible to change the time
		//_ddd__hh:mm:ss__
		//_W:hh__L:hh-hh__
		if (time.has_changed || time.is_being_changed || menu.was_cleared){
    1180:	80 91 eb 01 	lds	r24, 0x01EB
    1184:	81 11       	cpse	r24, r1
    1186:	09 c0       	rjmp	.+18     	; 0x119a <update_menu+0x98>
    1188:	80 91 ec 01 	lds	r24, 0x01EC
    118c:	81 11       	cpse	r24, r1
    118e:	05 c0       	rjmp	.+10     	; 0x119a <update_menu+0x98>
    1190:	80 91 09 01 	lds	r24, 0x0109
    1194:	88 23       	and	r24, r24
    1196:	09 f4       	brne	.+2      	; 0x119a <update_menu+0x98>
    1198:	a0 c2       	rjmp	.+1344   	; 0x16da <update_menu+0x5d8>
			char temp[3]={0};
    119a:	19 82       	std	Y+1, r1	; 0x01
    119c:	1a 82       	std	Y+2, r1	; 0x02
    119e:	1b 82       	std	Y+3, r1	; 0x03

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	81 e8       	ldi	r24, 0x81	; 129
    11a4:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

			//lcd_set_cursor(0,0);  //debug help
			//lcd_puts(itoa(time.days, temp, 10));
			lcd_set_cursor(1,0);
			lcd_puts_P(day_name[time.days]);
    11a8:	80 91 ea 01 	lds	r24, 0x01EA
    11ac:	27 e0       	ldi	r18, 0x07	; 7
    11ae:	82 02       	muls	r24, r18
    11b0:	c0 01       	movw	r24, r0
    11b2:	11 24       	eor	r1, r1
    11b4:	80 56       	subi	r24, 0x60	; 96
    11b6:	9d 4f       	sbci	r25, 0xFD	; 253
    11b8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	86 e8       	ldi	r24, 0x86	; 134
    11c0:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    11c4:	80 91 ed 01 	lds	r24, 0x01ED
    11c8:	88 23       	and	r24, r24
    11ca:	51 f0       	breq	.+20     	; 0x11e0 <update_menu+0xde>
    11cc:	0e ee       	ldi	r16, 0xEE	; 238
    11ce:	11 e0       	ldi	r17, 0x01	; 1
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    11d6:	f8 01       	movw	r30, r16
    11d8:	81 91       	ld	r24, Z+
    11da:	8f 01       	movw	r16, r30
    11dc:	81 11       	cpse	r24, r1
    11de:	f8 cf       	rjmp	.-16     	; 0x11d0 <update_menu+0xce>
			lcd_set_cursor(6,0);
			lcd_puts(time.whole_time);

			if (menu.level==0){
    11e0:	80 91 06 01 	lds	r24, 0x0106
    11e4:	88 23       	and	r24, r24
    11e6:	09 f4       	brne	.+2      	; 0x11ea <update_menu+0xe8>
    11e8:	b3 c2       	rjmp	.+1382   	; 0x1750 <update_menu+0x64e>
					temp[0]='0' + (light_stop_time / 10);
					temp[1]='0' + (light_stop_time % 10);
					lcd_puts(temp);
				}
			}
			else if (menu.level==1){
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <update_menu+0xee>
    11ee:	5e c3       	rjmp	.+1724   	; 0x18ac <update_menu+0x7aa>

				lcd_set_cursor(0,1);
				lcd_puts_P(L("           Back  "));
			}
			time.has_changed=0;
    11f0:	10 92 eb 01 	sts	0x01EB, r1
		}

		//change the time
		if (menu.level==1){
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <update_menu+0xf8>
    11f8:	2a c2       	rjmp	.+1108   	; 0x164e <update_menu+0x54c>
			case 4: menu.level=0; menu.clear_is_due=1; break;//exit to level 0
			}
			b_pressed=0;
		}

		if(menu.level==2){
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	09 f4       	brne	.+2      	; 0x1200 <update_menu+0xfe>
    11fe:	47 c2       	rjmp	.+1166   	; 0x168e <update_menu+0x58c>
    1200:	80 91 15 01 	lds	r24, 0x0115

		break;

	}

	if (cursor_pos<16) lcd_set_cursor(cursor_pos,0);
    1204:	80 31       	cpi	r24, 0x10	; 16
    1206:	0c f4       	brge	.+2      	; 0x120a <update_menu+0x108>
    1208:	cc c0       	rjmp	.+408    	; 0x13a2 <update_menu+0x2a0>
    120a:	80 5d       	subi	r24, 0xD0	; 208
    120c:	80 68       	ori	r24, 0x80	; 128

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
	else lcd_set_cursor(cursor_pos-16,1);

	lcd_on();
    1214:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_on>
	menu.was_cleared=0;
    1218:	10 92 09 01 	sts	0x0109, r1
}
    121c:	29 96       	adiw	r28, 0x09	; 9
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	08 95       	ret
	if (menu.clear_is_due) { lcd_clear_f(); menu.clear_is_due=0; menu.was_cleared=1;}

	if (reset_to_main_menu) menu.current=0;

	//now for all the menus
	switch (menu.current){
    1238:	80 91 05 01 	lds	r24, 0x0105
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	09 f4       	brne	.+2      	; 0x1242 <update_menu+0x140>
    1240:	40 c0       	rjmp	.+128    	; 0x12c2 <update_menu+0x1c0>
    1242:	0c f4       	brge	.+2      	; 0x1246 <update_menu+0x144>
    1244:	64 c1       	rjmp	.+712    	; 0x150e <update_menu+0x40c>
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	09 f4       	brne	.+2      	; 0x124c <update_menu+0x14a>
    124a:	74 c0       	rjmp	.+232    	; 0x1334 <update_menu+0x232>
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	c1 f6       	brne	.-80     	; 0x1200 <update_menu+0xfe>
		break;

	case 3: //light settings, should probably be the same as above...could merge...
		//___light_menu___
		//start:dd_stop:dd
		if(menu.was_cleared){
    1250:	80 91 09 01 	lds	r24, 0x0109
    1254:	81 11       	cpse	r24, r1
    1256:	5e c1       	rjmp	.+700    	; 0x1514 <update_menu+0x412>
				lcd_puts_P(L("Stop:"));
				lcd_puts(temp2);
			}
		}

		if(menu.level==1){
    1258:	80 91 06 01 	lds	r24, 0x0106
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	09 f4       	brne	.+2      	; 0x1262 <update_menu+0x160>
    1260:	aa c1       	rjmp	.+852    	; 0x15b6 <update_menu+0x4b4>
			cursor_pos= (item==2) ? 16 :( (item==1) ? 14+16 : 6+16);
			e_dir=0;
			b_pressed=0;
		}

		if(menu.level==2){
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	69 f6       	brne	.-102    	; 0x1200 <update_menu+0xfe>
			//lcd_enable_blinking();
			if(e_dir){
    1266:	ff 20       	and	r15, r15
    1268:	99 f0       	breq	.+38     	; 0x1290 <update_menu+0x18e>
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
    126a:	80 91 16 01 	lds	r24, 0x0116
    126e:	81 11       	cpse	r24, r1
    1270:	3f c3       	rjmp	.+1662   	; 0x18f0 <update_menu+0x7ee>
    1272:	80 91 19 01 	lds	r24, 0x0119
    1276:	8f 0d       	add	r24, r15
    1278:	88 31       	cpi	r24, 0x18	; 24
    127a:	0c f0       	brlt	.+2      	; 0x127e <update_menu+0x17c>
    127c:	b5 c3       	rjmp	.+1898   	; 0x19e8 <update_menu+0x8e6>
    127e:	87 fd       	sbrc	r24, 7
    1280:	f5 c3       	rjmp	.+2026   	; 0x1a6c <update_menu+0x96a>
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	89 0f       	add	r24, r25
    1286:	80 93 19 01 	sts	0x0119, r24
				if (item==1) { light_stop_time+=e_dir;  wrap_around(light_stop_time, 24);  }
				menu.clear_is_due=1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 08 01 	sts	0x0108, r24
			}

			if(b_pressed){
    1290:	ee 20       	and	r14, r14
    1292:	09 f4       	brne	.+2      	; 0x1296 <update_menu+0x194>
    1294:	b5 cf       	rjmp	.-150    	; 0x1200 <update_menu+0xfe>
				menu.level=1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 06 01 	sts	0x0106, r24
				//lcd_disable_blinking();
				if (item==0) EEPROM_compare(LIGHT_START_ADDRESS, light_start_time); ////////////////////////////////////////////////////////////////
    129c:	80 91 16 01 	lds	r24, 0x0116
    12a0:	88 23       	and	r24, r24
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <update_menu+0x1a4>
    12a4:	60 c3       	rjmp	.+1728   	; 0x1966 <update_menu+0x864>
				if (item==1) EEPROM_compare(LIGHT_STOP_ADDRESS , light_stop_time ); ////////////////////////////////////////////////////////////////
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <update_menu+0x1aa>
    12aa:	ce c3       	rjmp	.+1948   	; 0x1a48 <update_menu+0x946>
				menu.clear_is_due=1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 08 01 	sts	0x0108, r24
    12b2:	a6 cf       	rjmp	.-180    	; 0x1200 <update_menu+0xfe>

	//default level 0 actions
	if (menu.level == 0) {
		//e_dir: 1=left -1=right 0=nothing
		menu.current += e_dir;
		wrap_around(menu.current, NUM_MENUS);
    12b4:	98 2f       	mov	r25, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	99 27       	eor	r25, r25
    12ba:	99 1f       	adc	r25, r25
    12bc:	99 0f       	add	r25, r25
    12be:	99 0f       	add	r25, r25
    12c0:	43 cf       	rjmp	.-378    	; 0x1148 <update_menu+0x46>
		//format:
		//_water_schedule_
		//DAY:_water_at_HH

		//print all of the neccessary info
		if (menu.was_cleared){
    12c2:	80 91 09 01 	lds	r24, 0x0109
    12c6:	81 11       	cpse	r24, r1
    12c8:	c7 c0       	rjmp	.+398    	; 0x1458 <update_menu+0x356>
					else lcd_puts_P(L(": No water"));
				}
			}
		}

		if (menu.level==1){
    12ca:	80 91 06 01 	lds	r24, 0x0106
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <update_menu+0x1d2>
    12d2:	95 c1       	rjmp	.+810    	; 0x15fe <update_menu+0x4fc>
			b_pressed=0;
			e_dir=0;

		}

		if (menu.level==2){
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	09 f0       	breq	.+2      	; 0x12da <update_menu+0x1d8>
    12d8:	93 cf       	rjmp	.-218    	; 0x1200 <update_menu+0xfe>
			water_schedule[item].is_being_changed=1;
    12da:	80 91 16 01 	lds	r24, 0x0116
    12de:	99 27       	eor	r25, r25
    12e0:	87 fd       	sbrc	r24, 7
    12e2:	90 95       	com	r25
    12e4:	9c 01       	movw	r18, r24
    12e6:	22 0f       	add	r18, r18
    12e8:	33 1f       	adc	r19, r19
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	f9 01       	movw	r30, r18
    12f0:	e4 5e       	subi	r30, 0xE4	; 228
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	42 83       	std	Z+2, r20	; 0x02
			water_schedule[item].hour+=e_dir;
    12f8:	40 81       	ld	r20, Z
    12fa:	4f 0d       	add	r20, r15
			wrap_around(water_schedule[item].hour, 25);
    12fc:	49 31       	cpi	r20, 0x19	; 25
    12fe:	0c f0       	brlt	.+2      	; 0x1302 <update_menu+0x200>
    1300:	ef c1       	rjmp	.+990    	; 0x16e0 <update_menu+0x5de>
    1302:	47 fd       	sbrc	r20, 7
    1304:	6d c3       	rjmp	.+1754   	; 0x19e0 <update_menu+0x8de>
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	45 0f       	add	r20, r21
    130a:	f9 01       	movw	r30, r18
    130c:	e4 5e       	subi	r30, 0xE4	; 228
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	40 83       	st	Z, r20

			//use hour==24 as an off condition
			if(water_schedule[item].hour==24) water_schedule[item].on=0;
    1312:	48 31       	cpi	r20, 0x18	; 24
    1314:	09 f4       	brne	.+2      	; 0x1318 <update_menu+0x216>
    1316:	d3 c2       	rjmp	.+1446   	; 0x18be <update_menu+0x7bc>
			else water_schedule[item].on=1;
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	41 83       	std	Z+1, r20	; 0x01

			if(b_pressed) {
    131c:	e1 10       	cpse	r14, r1
    131e:	b6 c2       	rjmp	.+1388   	; 0x188c <update_menu+0x78a>
				EEPROM_compare(WATER_SCHEDULE_HOUR_BASE_ADDRESS + item , water_schedule[item].hour); ///////////////////////////////////////////////////////
				lcd_disable_blinking();
				menu.clear_is_due=1;
			}

			if (e_dir!=0) menu.clear_is_due=1;
    1320:	ff 20       	and	r15, r15
    1322:	19 f0       	breq	.+6      	; 0x132a <update_menu+0x228>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	80 93 08 01 	sts	0x0108, r24
			b_pressed=0;
			e_dir=0;
			cursor_pos=16+4;
    132a:	84 e1       	ldi	r24, 0x14	; 20
    132c:	80 93 15 01 	sts	0x0115, r24
    1330:	84 ec       	ldi	r24, 0xC4	; 196
    1332:	6d cf       	rjmp	.-294    	; 0x120e <update_menu+0x10c>

		break;

	case 2: //water amount setting
		//draw
		if(menu.was_cleared){
    1334:	80 91 09 01 	lds	r24, 0x0109
    1338:	81 11       	cpse	r24, r1
    133a:	61 c0       	rjmp	.+194    	; 0x13fe <update_menu+0x2fc>
			lcd_set_cursor(0,1);
			lcd_puts(temp);
			lcd_puts_P(L(" ml"));
		}

		if (menu.level==1){
    133c:	80 91 06 01 	lds	r24, 0x0106
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	09 f0       	breq	.+2      	; 0x1346 <update_menu+0x244>
    1344:	5d cf       	rjmp	.-326    	; 0x1200 <update_menu+0xfe>
			if(e_dir){
    1346:	ff 20       	and	r15, r15
    1348:	29 f1       	breq	.+74     	; 0x1394 <update_menu+0x292>
				//fine control...increase water amount by 50 above 100ml, and by 10 under 100ml
				if (water_ml==100) water_ml+= (e_dir==1) ? 50 : -10;
    134a:	80 91 1a 01 	lds	r24, 0x011A
    134e:	90 91 1b 01 	lds	r25, 0x011B
    1352:	84 36       	cpi	r24, 0x64	; 100
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <update_menu+0x258>
    1358:	be c2       	rjmp	.+1404   	; 0x18d6 <update_menu+0x7d4>
				else if((0<water_ml) && (water_ml<100)) water_ml+=e_dir*10; //todo check this
    135a:	9c 01       	movw	r18, r24
    135c:	21 50       	subi	r18, 0x01	; 1
    135e:	31 09       	sbc	r19, r1
    1360:	23 36       	cpi	r18, 0x63	; 99
    1362:	31 05       	cpc	r19, r1
    1364:	08 f0       	brcs	.+2      	; 0x1368 <update_menu+0x266>
    1366:	dd c2       	rjmp	.+1466   	; 0x1922 <update_menu+0x820>
    1368:	2f 2d       	mov	r18, r15
    136a:	3a e0       	ldi	r19, 0x0A	; 10
    136c:	23 02       	muls	r18, r19
    136e:	80 0d       	add	r24, r0
    1370:	91 1d       	adc	r25, r1
    1372:	11 24       	eor	r1, r1
				else water_ml+=e_dir*50;
				wrap_around(water_ml, 1000);
    1374:	88 3e       	cpi	r24, 0xE8	; 232
    1376:	23 e0       	ldi	r18, 0x03	; 3
    1378:	92 07       	cpc	r25, r18
    137a:	0c f4       	brge	.+2      	; 0x137e <update_menu+0x27c>
    137c:	b4 c2       	rjmp	.+1384   	; 0x18e6 <update_menu+0x7e4>
    137e:	28 e1       	ldi	r18, 0x18	; 24
    1380:	3c ef       	ldi	r19, 0xFC	; 252
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	90 93 1b 01 	sts	0x011B, r25
    138a:	80 93 1a 01 	sts	0x011A, r24
				menu.clear_is_due=1;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	80 93 08 01 	sts	0x0108, r24
			}
			if(b_pressed) {
    1394:	e1 10       	cpse	r14, r1
    1396:	b9 c1       	rjmp	.+882    	; 0x170a <update_menu+0x608>
				menu.level=0;
				menu.clear_is_due=1;
				EEPROM_compare(WATER_AMOUNT_ADDRESS , water_ml / 10); ////////////////////////////////////////////////////////////////
			}

			cursor_pos=16;
    1398:	80 e1       	ldi	r24, 0x10	; 16
    139a:	80 93 15 01 	sts	0x0115, r24
    139e:	80 ec       	ldi	r24, 0xC0	; 192
    13a0:	36 cf       	rjmp	.-404    	; 0x120e <update_menu+0x10c>
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	80 68       	ori	r24, 0x80	; 128
    13a6:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
    13aa:	34 cf       	rjmp	.-408    	; 0x1214 <update_menu+0x112>

		if (e_dir) menu.clear_is_due=1;
		e_dir=0;
		//if button is pressed, move to level 1 and clear cursor_pos
		if (b_pressed) {
			menu.level=1;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 06 01 	sts	0x0106, r24
			menu.clear_is_due=1;
    13b2:	80 93 08 01 	sts	0x0108, r24
			item=0;
    13b6:	10 92 16 01 	sts	0x0116, r1
		}
		//clear b_pressed to avoid further button interactions this time around
		b_pressed=0;
    13ba:	e1 2c       	mov	r14, r1
		menu.current += e_dir;
		wrap_around(menu.current, NUM_MENUS);
		//clear e_dir and the screen to avoid further interactions

		if (e_dir) menu.clear_is_due=1;
		e_dir=0;
    13bc:	f1 2c       	mov	r15, r1
		}
		//clear b_pressed to avoid further button interactions this time around
		b_pressed=0;
	}

	if (menu.clear_is_due) { lcd_clear_f(); menu.clear_is_due=0; menu.was_cleared=1;}
    13be:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <lcd_clear_f>
    13c2:	10 92 08 01 	sts	0x0108, r1
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 09 01 	sts	0x0109, r24
    13cc:	d4 ce       	rjmp	.-600    	; 0x1176 <update_menu+0x74>


	lcd_off(); //switch off the lcd, and switch it on at the end

	//enable cursor for menu levels above 0
	if ((menu.level > 0) && !menu.cursor_on) {lcd_enable_cursor();	menu.cursor_on=1;}
    13ce:	0e 94 4a 02 	call	0x494	; 0x494 <lcd_enable_cursor>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 07 01 	sts	0x0107, r24
	if ((menu.level == 0) && menu.cursor_on) {lcd_disable_cursor();	menu.cursor_on=0;}
    13d8:	80 91 06 01 	lds	r24, 0x0106
    13dc:	81 11       	cpse	r24, r1
    13de:	c7 ce       	rjmp	.-626    	; 0x116e <update_menu+0x6c>
    13e0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_disable_cursor>
    13e4:	10 92 07 01 	sts	0x0107, r1

	//default level 0 actions
	if (menu.level == 0) {
    13e8:	80 91 06 01 	lds	r24, 0x0106
    13ec:	81 11       	cpse	r24, r1
    13ee:	bf ce       	rjmp	.-642    	; 0x116e <update_menu+0x6c>
		//e_dir: 1=left -1=right 0=nothing
		menu.current += e_dir;
    13f0:	80 91 05 01 	lds	r24, 0x0105
    13f4:	8f 0d       	add	r24, r15
		wrap_around(menu.current, NUM_MENUS);
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	0c f4       	brge	.+2      	; 0x13fc <update_menu+0x2fa>
    13fa:	5c cf       	rjmp	.-328    	; 0x12b4 <update_menu+0x1b2>
    13fc:	a4 ce       	rjmp	.-696    	; 0x1146 <update_menu+0x44>

	case 2: //water amount setting
		//draw
		if(menu.was_cleared){
			char temp[6];
			ltoa(water_ml, temp, 10);
    13fe:	60 91 1a 01 	lds	r22, 0x011A
    1402:	70 91 1b 01 	lds	r23, 0x011B
    1406:	88 27       	eor	r24, r24
    1408:	77 fd       	sbrc	r23, 7
    140a:	80 95       	com	r24
    140c:	98 2f       	mov	r25, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    140e:	2a e0       	ldi	r18, 0x0A	; 10
    1410:	ae 01       	movw	r20, r28
    1412:	4f 5f       	subi	r20, 0xFF	; 255
    1414:	5f 4f       	sbci	r21, 0xFF	; 255
    1416:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__ltoa_ncheck>
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	80 e8       	ldi	r24, 0x80	; 128
    141e:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

			lcd_set_cursor(0,0);
			lcd_puts_P(L("  Water Amount  "));
    1422:	82 e3       	ldi	r24, 0x32	; 50
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	80 ec       	ldi	r24, 0xC0	; 192
    142e:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	88 23       	and	r24, r24
    1436:	59 f0       	breq	.+22     	; 0x144e <update_menu+0x34c>
    1438:	8e 01       	movw	r16, r28
    143a:	0e 5f       	subi	r16, 0xFE	; 254
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1444:	f8 01       	movw	r30, r16
    1446:	81 91       	ld	r24, Z+
    1448:	8f 01       	movw	r16, r30
    144a:	81 11       	cpse	r24, r1
    144c:	f8 cf       	rjmp	.-16     	; 0x143e <update_menu+0x33c>

			lcd_set_cursor(0,1);
			lcd_puts(temp);
			lcd_puts_P(L(" ml"));
    144e:	8e e2       	ldi	r24, 0x2E	; 46
    1450:	92 e0       	ldi	r25, 0x02	; 2
    1452:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    1456:	72 cf       	rjmp	.-284    	; 0x133c <update_menu+0x23a>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	80 e8       	ldi	r24, 0x80	; 128
    145c:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
		//DAY:_water_at_HH

		//print all of the neccessary info
		if (menu.was_cleared){
			lcd_set_cursor(0,0);
			lcd_puts_P(L(" Water Schedule "));
    1460:	8b e6       	ldi	r24, 0x6B	; 107
    1462:	92 e0       	ldi	r25, 0x02	; 2
    1464:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>

			//display level 1 or 2 settings if on that level
			if (menu.level>=1){
    1468:	80 91 06 01 	lds	r24, 0x0106
    146c:	88 23       	and	r24, r24
    146e:	09 f4       	brne	.+2      	; 0x1472 <update_menu+0x370>
    1470:	c7 ce       	rjmp	.-626    	; 0x1200 <update_menu+0xfe>
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	80 ec       	ldi	r24, 0xC0	; 192
    1476:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
				lcd_set_cursor(0,1);
				//8th item: back option
				if (item==7) lcd_puts_P(L("Back            "));
    147a:	80 91 16 01 	lds	r24, 0x0116
    147e:	87 30       	cpi	r24, 0x07	; 7
    1480:	09 f4       	brne	.+2      	; 0x1484 <update_menu+0x382>
    1482:	d6 c2       	rjmp	.+1452   	; 0x1a30 <update_menu+0x92e>
				//1-7th items: day with corresponding schedule
				else {
					//display the day
					lcd_puts_P(day_name[item]);
    1484:	f7 e0       	ldi	r31, 0x07	; 7
    1486:	8f 02       	muls	r24, r31
    1488:	c0 01       	movw	r24, r0
    148a:	11 24       	eor	r1, r1
    148c:	80 56       	subi	r24, 0x60	; 96
    148e:	9d 4f       	sbci	r25, 0xFD	; 253
    1490:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
					//if water is scheduled, write ": Water at " and the hour
					if (water_schedule[item].on){
    1494:	e0 91 16 01 	lds	r30, 0x0116
    1498:	24 e0       	ldi	r18, 0x04	; 4
    149a:	e2 02       	muls	r30, r18
    149c:	f0 01       	movw	r30, r0
    149e:	11 24       	eor	r1, r1
    14a0:	e4 5e       	subi	r30, 0xE4	; 228
    14a2:	fe 4f       	sbci	r31, 0xFE	; 254
    14a4:	81 81       	ldd	r24, Z+1	; 0x01
    14a6:	88 23       	and	r24, r24
    14a8:	09 f4       	brne	.+2      	; 0x14ac <update_menu+0x3aa>
    14aa:	a5 c2       	rjmp	.+1354   	; 0x19f6 <update_menu+0x8f4>
						lcd_puts_P(L(": Water at "));
    14ac:	8e e4       	ldi	r24, 0x4E	; 78
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
						//get hour in string format
						char temp[3]={0};
    14b4:	19 82       	std	Y+1, r1	; 0x01
    14b6:	1a 82       	std	Y+2, r1	; 0x02
    14b8:	1b 82       	std	Y+3, r1	; 0x03
						temp[0]='0' + (water_schedule[item].hour / 10);
    14ba:	e0 91 16 01 	lds	r30, 0x0116
    14be:	34 e0       	ldi	r19, 0x04	; 4
    14c0:	e3 02       	muls	r30, r19
    14c2:	f0 01       	movw	r30, r0
    14c4:	11 24       	eor	r1, r1
    14c6:	e4 5e       	subi	r30, 0xE4	; 228
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	20 81       	ld	r18, Z
    14cc:	97 e6       	ldi	r25, 0x67	; 103
    14ce:	29 02       	muls	r18, r25
    14d0:	91 2d       	mov	r25, r1
    14d2:	11 24       	eor	r1, r1
    14d4:	95 95       	asr	r25
    14d6:	95 95       	asr	r25
    14d8:	27 fd       	sbrc	r18, 7
    14da:	93 95       	inc	r25
    14dc:	80 e3       	ldi	r24, 0x30	; 48
    14de:	89 0f       	add	r24, r25
    14e0:	89 83       	std	Y+1, r24	; 0x01
						temp[1]='0' + (water_schedule[item].hour % 10);
    14e2:	d2 2e       	mov	r13, r18
    14e4:	ea e0       	ldi	r30, 0x0A	; 10
    14e6:	9e 9f       	mul	r25, r30
    14e8:	d0 18       	sub	r13, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	f0 e3       	ldi	r31, 0x30	; 48
    14ee:	df 0e       	add	r13, r31
    14f0:	da 82       	std	Y+2, r13	; 0x02
    14f2:	8e 01       	movw	r16, r28
    14f4:	0d 5f       	subi	r16, 0xFD	; 253
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <update_menu+0x400>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    14fa:	8d 2d       	mov	r24, r13
    14fc:	f8 01       	movw	r30, r16
    14fe:	d1 90       	ld	r13, Z+
    1500:	8f 01       	movw	r16, r30
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1508:	d1 10       	cpse	r13, r1
    150a:	f7 cf       	rjmp	.-18     	; 0x14fa <update_menu+0x3f8>
    150c:	de ce       	rjmp	.-580    	; 0x12ca <update_menu+0x1c8>
	if (menu.clear_is_due) { lcd_clear_f(); menu.clear_is_due=0; menu.was_cleared=1;}

	if (reset_to_main_menu) menu.current=0;

	//now for all the menus
	switch (menu.current){
    150e:	81 11       	cpse	r24, r1
    1510:	77 ce       	rjmp	.-786    	; 0x1200 <update_menu+0xfe>
    1512:	36 ce       	rjmp	.-916    	; 0x1180 <update_menu+0x7e>
	case 3: //light settings, should probably be the same as above...could merge...
		//___light_menu___
		//start:dd_stop:dd
		if(menu.was_cleared){
			char temp1[3], temp2[3];
			itoa(light_start_time, temp1, 10);
    1514:	80 91 19 01 	lds	r24, 0x0119
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1518:	4a e0       	ldi	r20, 0x0A	; 10
    151a:	be 01       	movw	r22, r28
    151c:	69 5f       	subi	r22, 0xF9	; 249
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	99 27       	eor	r25, r25
    1522:	87 fd       	sbrc	r24, 7
    1524:	90 95       	com	r25
    1526:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__itoa_ncheck>
			itoa(light_stop_time, temp2, 10);
    152a:	80 91 18 01 	lds	r24, 0x0118
    152e:	4a e0       	ldi	r20, 0x0A	; 10
    1530:	be 01       	movw	r22, r28
    1532:	6f 5f       	subi	r22, 0xFF	; 255
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	99 27       	eor	r25, r25
    1538:	87 fd       	sbrc	r24, 7
    153a:	90 95       	com	r25
    153c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__itoa_ncheck>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	80 e8       	ldi	r24, 0x80	; 128
    1544:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

			lcd_set_cursor(0,0);
			lcd_puts_P(L("   Light Menu   "));
    1548:	8d e1       	ldi	r24, 0x1D	; 29
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>

			if(item==2){ lcd_set_cursor(0,1); lcd_puts_P(L("Back")); }
    1550:	80 91 16 01 	lds	r24, 0x0116
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	82 30       	cpi	r24, 0x02	; 2
    1558:	09 f4       	brne	.+2      	; 0x155c <update_menu+0x45a>
    155a:	cf c0       	rjmp	.+414    	; 0x16fa <update_menu+0x5f8>
    155c:	80 ec       	ldi	r24, 0xC0	; 192
    155e:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
			else{
				lcd_set_cursor(0,1);
				lcd_puts_P(L("Start:"));
    1562:	81 e1       	ldi	r24, 0x11	; 17
    1564:	92 e0       	ldi	r25, 0x02	; 2
    1566:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	88 23       	and	r24, r24
    156e:	59 f0       	breq	.+22     	; 0x1586 <update_menu+0x484>
    1570:	8e 01       	movw	r16, r28
    1572:	08 5f       	subi	r16, 0xF8	; 248
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    157c:	f8 01       	movw	r30, r16
    157e:	81 91       	ld	r24, Z+
    1580:	8f 01       	movw	r16, r30
    1582:	81 11       	cpse	r24, r1
    1584:	f8 cf       	rjmp	.-16     	; 0x1576 <update_menu+0x474>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	89 ec       	ldi	r24, 0xC9	; 201
    158a:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
				lcd_puts(temp1);

				lcd_set_cursor(9,1);
				lcd_puts_P(L("Stop:"));
    158e:	8b e0       	ldi	r24, 0x0B	; 11
    1590:	92 e0       	ldi	r25, 0x02	; 2
    1592:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <update_menu+0x49c>
    159c:	5d ce       	rjmp	.-838    	; 0x1258 <update_menu+0x156>
    159e:	8e 01       	movw	r16, r28
    15a0:	0e 5f       	subi	r16, 0xFE	; 254
    15a2:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    15aa:	f8 01       	movw	r30, r16
    15ac:	81 91       	ld	r24, Z+
    15ae:	8f 01       	movw	r16, r30
    15b0:	81 11       	cpse	r24, r1
    15b2:	f8 cf       	rjmp	.-16     	; 0x15a4 <update_menu+0x4a2>
    15b4:	51 ce       	rjmp	.-862    	; 0x1258 <update_menu+0x156>
			}
		}

		if(menu.level==1){
			if(e_dir){
				item+=e_dir;
    15b6:	80 91 16 01 	lds	r24, 0x0116
				lcd_puts(temp2);
			}
		}

		if(menu.level==1){
			if(e_dir){
    15ba:	ff 20       	and	r15, r15
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <update_menu+0x4d6>
				item+=e_dir;
    15be:	8f 0d       	add	r24, r15
				wrap_around(item, 3);
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	0c f0       	brlt	.+2      	; 0x15c6 <update_menu+0x4c4>
    15c4:	86 c1       	rjmp	.+780    	; 0x18d2 <update_menu+0x7d0>
    15c6:	87 fd       	sbrc	r24, 7
    15c8:	3d c2       	rjmp	.+1146   	; 0x1a44 <update_menu+0x942>
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	89 0f       	add	r24, r25
    15ce:	80 93 16 01 	sts	0x0116, r24
				menu.clear_is_due=1;
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	90 93 08 01 	sts	0x0108, r25
			}
			if(b_pressed){
    15d8:	ee 20       	and	r14, r14
    15da:	09 f4       	brne	.+2      	; 0x15de <update_menu+0x4dc>
    15dc:	89 c0       	rjmp	.+274    	; 0x16f0 <update_menu+0x5ee>
				if (item==2) {menu.level=0; item=0;}
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <update_menu+0x4e2>
    15e2:	f8 c1       	rjmp	.+1008   	; 0x19d4 <update_menu+0x8d2>
				else menu.level=2;
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	90 93 06 01 	sts	0x0106, r25
				menu.clear_is_due=1;
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	90 93 08 01 	sts	0x0108, r25

			}

			cursor_pos= (item==2) ? 16 :( (item==1) ? 14+16 : 6+16);
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <update_menu+0x4f4>
    15f4:	94 c1       	rjmp	.+808    	; 0x191e <update_menu+0x81c>
    15f6:	86 e1       	ldi	r24, 0x16	; 22
    15f8:	80 93 15 01 	sts	0x0115, r24
    15fc:	06 ce       	rjmp	.-1012   	; 0x120a <update_menu+0x108>
				}
			}
		}

		if (menu.level==1){
			item+=e_dir;
    15fe:	80 91 16 01 	lds	r24, 0x0116
    1602:	8f 0d       	add	r24, r15
			wrap_around(item, 8);
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	0c f0       	brlt	.+2      	; 0x160a <update_menu+0x508>
    1608:	71 c0       	rjmp	.+226    	; 0x16ec <update_menu+0x5ea>
    160a:	98 2f       	mov	r25, r24
    160c:	99 1f       	adc	r25, r25
    160e:	99 27       	eor	r25, r25
    1610:	99 1f       	adc	r25, r25
    1612:	99 0f       	add	r25, r25
    1614:	99 0f       	add	r25, r25
    1616:	99 0f       	add	r25, r25
    1618:	89 0f       	add	r24, r25
    161a:	80 93 16 01 	sts	0x0116, r24

			if (b_pressed){
    161e:	ee 20       	and	r14, r14
    1620:	09 f4       	brne	.+2      	; 0x1624 <update_menu+0x522>
    1622:	26 c1       	rjmp	.+588    	; 0x1870 <update_menu+0x76e>
				if (item==7) {menu.level=0; menu.clear_is_due=1;}
    1624:	87 30       	cpi	r24, 0x07	; 7
    1626:	09 f0       	breq	.+2      	; 0x162a <update_menu+0x528>
    1628:	4c c1       	rjmp	.+664    	; 0x18c2 <update_menu+0x7c0>
    162a:	10 92 06 01 	sts	0x0106, r1
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	80 93 08 01 	sts	0x0108, r24
    1634:	80 e0       	ldi	r24, 0x00	; 0
					menu.level=2;
					lcd_enable_blinking();
				}
			}

			cursor_pos=16+0;
    1636:	90 e1       	ldi	r25, 0x10	; 16
    1638:	90 93 15 01 	sts	0x0115, r25
			if (e_dir!=0) menu.clear_is_due=1;
    163c:	ff 20       	and	r15, r15
    163e:	09 f4       	brne	.+2      	; 0x1642 <update_menu+0x540>
    1640:	15 c1       	rjmp	.+554    	; 0x186c <update_menu+0x76a>
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	90 93 08 01 	sts	0x0108, r25
			b_pressed=0;
    1648:	e1 2c       	mov	r14, r1
			e_dir=0;
    164a:	f1 2c       	mov	r15, r1
    164c:	43 ce       	rjmp	.-890    	; 0x12d4 <update_menu+0x1d2>
			time.has_changed=0;
		}

		//change the time
		if (menu.level==1){
			item+=e_dir;
    164e:	80 91 16 01 	lds	r24, 0x0116
    1652:	8f 0d       	add	r24, r15
			e_dir=0;
			wrap_around(item, 5);
    1654:	85 30       	cpi	r24, 0x05	; 5
    1656:	0c f4       	brge	.+2      	; 0x165a <update_menu+0x558>
    1658:	45 c0       	rjmp	.+138    	; 0x16e4 <update_menu+0x5e2>
    165a:	9b ef       	ldi	r25, 0xFB	; 251
    165c:	89 0f       	add	r24, r25
    165e:	80 93 16 01 	sts	0x0116, r24
			//choose what to show based on cursor pos
			switch(item){
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	09 f4       	brne	.+2      	; 0x1668 <update_menu+0x566>
    1666:	64 c1       	rjmp	.+712    	; 0x1930 <update_menu+0x82e>
    1668:	0c f0       	brlt	.+2      	; 0x166c <update_menu+0x56a>
    166a:	04 c1       	rjmp	.+520    	; 0x1874 <update_menu+0x772>
    166c:	88 23       	and	r24, r24
    166e:	09 f4       	brne	.+2      	; 0x1672 <update_menu+0x570>
    1670:	63 c1       	rjmp	.+710    	; 0x1938 <update_menu+0x836>
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	09 f0       	breq	.+2      	; 0x1678 <update_menu+0x576>
    1676:	5b c0       	rjmp	.+182    	; 0x172e <update_menu+0x62c>
			case 0: cursor_pos=1; break; //set on hour
			case 1: cursor_pos=6; break; //set on hour
    1678:	86 e0       	ldi	r24, 0x06	; 6
    167a:	80 93 15 01 	sts	0x0115, r24
			case 2: cursor_pos=9; break;//set on minutes
			case 3: cursor_pos=12; break;//set on seconds
			case 4: cursor_pos=16 + 11; break;//exit to level 0
			}
			//choose what to do for button press based on cursor pos
			if (b_pressed) switch(item){
    167e:	ee 20       	and	r14, r14
    1680:	09 f4       	brne	.+2      	; 0x1684 <update_menu+0x582>
    1682:	be cd       	rjmp	.-1156   	; 0x1200 <update_menu+0xfe>
			case 0:
			case 1:
			case 2:
			case 3: menu.level=2; break;
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	80 93 06 01 	sts	0x0106, r24
			case 4: menu.level=0; menu.clear_is_due=1; break;//exit to level 0
			}
			b_pressed=0;
    168a:	e1 2c       	mov	r14, r1
		}

		//change the time
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
    168c:	f1 2c       	mov	r15, r1
			}
			b_pressed=0;
		}

		if(menu.level==2){
			time.is_being_changed=1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	80 93 ec 01 	sts	0x01EC, r24
			lcd_enable_blinking();
    1694:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_enable_blinking>

			switch(item){
    1698:	80 91 16 01 	lds	r24, 0x0116
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <update_menu+0x5a0>
    16a0:	bb c1       	rjmp	.+886    	; 0x1a18 <update_menu+0x916>
    16a2:	0c f4       	brge	.+2      	; 0x16a6 <update_menu+0x5a4>
    16a4:	51 c1       	rjmp	.+674    	; 0x1948 <update_menu+0x846>
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	09 f4       	brne	.+2      	; 0x16ac <update_menu+0x5aa>
    16aa:	aa c1       	rjmp	.+852    	; 0x1a00 <update_menu+0x8fe>
    16ac:	83 30       	cpi	r24, 0x03	; 3
    16ae:	61 f4       	brne	.+24     	; 0x16c8 <update_menu+0x5c6>
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
			case 3: time.seconds+=e_dir;	wrap_around(time.seconds, 60); 	break;//set on seconds
    16b0:	80 91 e7 01 	lds	r24, 0x01E7
    16b4:	8f 0d       	add	r24, r15
    16b6:	8c 33       	cpi	r24, 0x3C	; 60
    16b8:	0c f0       	brlt	.+2      	; 0x16bc <update_menu+0x5ba>
    16ba:	cd c1       	rjmp	.+922    	; 0x1a56 <update_menu+0x954>
    16bc:	87 fd       	sbrc	r24, 7
    16be:	da c1       	rjmp	.+948    	; 0x1a74 <update_menu+0x972>
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	89 0f       	add	r24, r25
    16c4:	80 93 e7 01 	sts	0x01E7, r24
			}
			if (b_pressed) {
    16c8:	e1 10       	cpse	r14, r1
    16ca:	54 c1       	rjmp	.+680    	; 0x1974 <update_menu+0x872>
				rtc_set_time(&_tm);
				time.is_being_changed=0;
			}
			b_pressed=0;
			e_dir=0;
			format_2_string(&time);
    16cc:	85 ee       	ldi	r24, 0xE5	; 229
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	0e 94 57 06 	call	0xcae	; 0xcae <format_2_string>
    16d4:	80 91 15 01 	lds	r24, 0x0115
    16d8:	95 cd       	rjmp	.-1238   	; 0x1204 <update_menu+0x102>
    16da:	80 91 06 01 	lds	r24, 0x0106
    16de:	8a cd       	rjmp	.-1260   	; 0x11f4 <update_menu+0xf2>
		}

		if (menu.level==2){
			water_schedule[item].is_being_changed=1;
			water_schedule[item].hour+=e_dir;
			wrap_around(water_schedule[item].hour, 25);
    16e0:	57 ee       	ldi	r21, 0xE7	; 231
    16e2:	12 ce       	rjmp	.-988    	; 0x1308 <update_menu+0x206>

		//change the time
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
			wrap_around(item, 5);
    16e4:	87 fd       	sbrc	r24, 7
    16e6:	7e c1       	rjmp	.+764    	; 0x19e4 <update_menu+0x8e2>
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	b8 cf       	rjmp	.-144    	; 0x165c <update_menu+0x55a>
			}
		}

		if (menu.level==1){
			item+=e_dir;
			wrap_around(item, 8);
    16ec:	98 ef       	ldi	r25, 0xF8	; 248
    16ee:	94 cf       	rjmp	.-216    	; 0x1618 <update_menu+0x516>
				else menu.level=2;
				menu.clear_is_due=1;

			}

			cursor_pos= (item==2) ? 16 :( (item==1) ? 14+16 : 6+16);
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <update_menu+0x5f4>
    16f4:	7d cf       	rjmp	.-262    	; 0x15f0 <update_menu+0x4ee>
    16f6:	80 e1       	ldi	r24, 0x10	; 16
    16f8:	7f cf       	rjmp	.-258    	; 0x15f8 <update_menu+0x4f6>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    16fa:	80 ec       	ldi	r24, 0xC0	; 192
    16fc:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
			itoa(light_stop_time, temp2, 10);

			lcd_set_cursor(0,0);
			lcd_puts_P(L("   Light Menu   "));

			if(item==2){ lcd_set_cursor(0,1); lcd_puts_P(L("Back")); }
    1700:	88 e1       	ldi	r24, 0x18	; 24
    1702:	92 e0       	ldi	r25, 0x02	; 2
    1704:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    1708:	a7 cd       	rjmp	.-1202   	; 0x1258 <update_menu+0x156>
				else water_ml+=e_dir*50;
				wrap_around(water_ml, 1000);
				menu.clear_is_due=1;
			}
			if(b_pressed) {
				menu.level=0;
    170a:	10 92 06 01 	sts	0x0106, r1
				menu.clear_is_due=1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	80 93 08 01 	sts	0x0108, r24
				EEPROM_compare(WATER_AMOUNT_ADDRESS , water_ml / 10); ////////////////////////////////////////////////////////////////
    1714:	80 91 1a 01 	lds	r24, 0x011A
    1718:	90 91 1b 01 	lds	r25, 0x011B
    171c:	6a e0       	ldi	r22, 0x0A	; 10
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__divmodhi4>
    1724:	8e e0       	ldi	r24, 0x0E	; 14
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_compare>
    172c:	35 ce       	rjmp	.-918    	; 0x1398 <update_menu+0x296>
			case 2: cursor_pos=9; break;//set on minutes
			case 3: cursor_pos=12; break;//set on seconds
			case 4: cursor_pos=16 + 11; break;//exit to level 0
			}
			//choose what to do for button press based on cursor pos
			if (b_pressed) switch(item){
    172e:	ee 20       	and	r14, r14
    1730:	09 f4       	brne	.+2      	; 0x1734 <update_menu+0x632>
    1732:	66 cd       	rjmp	.-1332   	; 0x1200 <update_menu+0xfe>
    1734:	87 fd       	sbrc	r24, 7
    1736:	64 cd       	rjmp	.-1336   	; 0x1200 <update_menu+0xfe>
    1738:	84 30       	cpi	r24, 0x04	; 4
    173a:	0c f4       	brge	.+2      	; 0x173e <update_menu+0x63c>
    173c:	a3 cf       	rjmp	.-186    	; 0x1684 <update_menu+0x582>
    173e:	84 30       	cpi	r24, 0x04	; 4
    1740:	09 f0       	breq	.+2      	; 0x1744 <update_menu+0x642>
    1742:	5e cd       	rjmp	.-1348   	; 0x1200 <update_menu+0xfe>
			case 0:
			case 1:
			case 2:
			case 3: menu.level=2; break;
			case 4: menu.level=0; menu.clear_is_due=1; break;//exit to level 0
    1744:	10 92 06 01 	sts	0x0106, r1
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	80 93 08 01 	sts	0x0108, r24
    174e:	58 cd       	rjmp	.-1360   	; 0x1200 <update_menu+0xfe>
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	80 ec       	ldi	r24, 0xC0	; 192
    1754:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
			lcd_set_cursor(6,0);
			lcd_puts(time.whole_time);

			if (menu.level==0){
				lcd_set_cursor(0,1);
				lcd_puts_P(L("W:"));
    1758:	8d e9       	ldi	r24, 0x9D	; 157
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
				if (water_schedule[time.days].hour==24) lcd_puts_P(L("//"));
    1760:	e0 91 ea 01 	lds	r30, 0x01EA
    1764:	24 e0       	ldi	r18, 0x04	; 4
    1766:	e2 02       	muls	r30, r18
    1768:	f0 01       	movw	r30, r0
    176a:	11 24       	eor	r1, r1
    176c:	e4 5e       	subi	r30, 0xE4	; 228
    176e:	fe 4f       	sbci	r31, 0xFE	; 254
    1770:	20 81       	ld	r18, Z
    1772:	28 31       	cpi	r18, 0x18	; 24
    1774:	09 f4       	brne	.+2      	; 0x1778 <update_menu+0x676>
    1776:	3a c1       	rjmp	.+628    	; 0x19ec <update_menu+0x8ea>
				else{
					temp[0]='0' + (water_schedule[time.days].hour / 10); //todo check if this works
    1778:	97 e6       	ldi	r25, 0x67	; 103
    177a:	29 02       	muls	r18, r25
    177c:	91 2d       	mov	r25, r1
    177e:	11 24       	eor	r1, r1
    1780:	95 95       	asr	r25
    1782:	95 95       	asr	r25
    1784:	27 fd       	sbrc	r18, 7
    1786:	93 95       	inc	r25
    1788:	80 e3       	ldi	r24, 0x30	; 48
    178a:	89 0f       	add	r24, r25
    178c:	89 83       	std	Y+1, r24	; 0x01
					temp[1]='0' + (water_schedule[time.days].hour % 10);
    178e:	d2 2e       	mov	r13, r18
    1790:	3a e0       	ldi	r19, 0x0A	; 10
    1792:	93 9f       	mul	r25, r19
    1794:	d0 18       	sub	r13, r0
    1796:	11 24       	eor	r1, r1
    1798:	90 e3       	ldi	r25, 0x30	; 48
    179a:	d9 0e       	add	r13, r25
    179c:	da 82       	std	Y+2, r13	; 0x02
    179e:	8e 01       	movw	r16, r28
    17a0:	0d 5f       	subi	r16, 0xFD	; 253
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <update_menu+0x6ac>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    17a6:	8d 2d       	mov	r24, r13
    17a8:	f8 01       	movw	r30, r16
    17aa:	d1 90       	ld	r13, Z+
    17ac:	8f 01       	movw	r16, r30
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    17b4:	d1 10       	cpse	r13, r1
    17b6:	f7 cf       	rjmp	.-18     	; 0x17a6 <update_menu+0x6a4>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	88 ec       	ldi	r24, 0xC8	; 200
    17bc:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
					lcd_puts(temp);
				}

				lcd_set_cursor(8,1);
				if (light_stop_time==light_start_time) lcd_puts_P(L("L: off"));
    17c0:	90 91 18 01 	lds	r25, 0x0118
    17c4:	80 91 19 01 	lds	r24, 0x0119
    17c8:	98 17       	cp	r25, r24
    17ca:	09 f4       	brne	.+2      	; 0x17ce <update_menu+0x6cc>
    17cc:	a1 c0       	rjmp	.+322    	; 0x1910 <update_menu+0x80e>
				else{

					lcd_puts_P(L("L:"));
    17ce:	80 e9       	ldi	r24, 0x90	; 144
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
					temp[0]='0' + (light_start_time / 10);
    17d6:	20 91 19 01 	lds	r18, 0x0119
    17da:	97 e6       	ldi	r25, 0x67	; 103
    17dc:	29 02       	muls	r18, r25
    17de:	91 2d       	mov	r25, r1
    17e0:	11 24       	eor	r1, r1
    17e2:	95 95       	asr	r25
    17e4:	95 95       	asr	r25
    17e6:	27 fd       	sbrc	r18, 7
    17e8:	93 95       	inc	r25
    17ea:	80 e3       	ldi	r24, 0x30	; 48
    17ec:	89 0f       	add	r24, r25
    17ee:	89 83       	std	Y+1, r24	; 0x01
					temp[1]='0' + (light_start_time % 10);
    17f0:	d2 2e       	mov	r13, r18
    17f2:	fa e0       	ldi	r31, 0x0A	; 10
    17f4:	9f 9f       	mul	r25, r31
    17f6:	d0 18       	sub	r13, r0
    17f8:	11 24       	eor	r1, r1
    17fa:	20 e3       	ldi	r18, 0x30	; 48
    17fc:	d2 0e       	add	r13, r18
    17fe:	da 82       	std	Y+2, r13	; 0x02
    1800:	8e 01       	movw	r16, r28
    1802:	0d 5f       	subi	r16, 0xFD	; 253
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <update_menu+0x70e>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1808:	8d 2d       	mov	r24, r13
    180a:	f8 01       	movw	r30, r16
    180c:	d1 90       	ld	r13, Z+
    180e:	8f 01       	movw	r16, r30
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1816:	d1 10       	cpse	r13, r1
    1818:	f7 cf       	rjmp	.-18     	; 0x1808 <update_menu+0x706>
					lcd_puts(temp);
					lcd_puts_P(L("-"));
    181a:	8e e8       	ldi	r24, 0x8E	; 142
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
					temp[0]='0' + (light_stop_time / 10);
    1822:	20 91 18 01 	lds	r18, 0x0118
    1826:	97 e6       	ldi	r25, 0x67	; 103
    1828:	29 02       	muls	r18, r25
    182a:	91 2d       	mov	r25, r1
    182c:	11 24       	eor	r1, r1
    182e:	95 95       	asr	r25
    1830:	95 95       	asr	r25
    1832:	27 fd       	sbrc	r18, 7
    1834:	93 95       	inc	r25
    1836:	80 e3       	ldi	r24, 0x30	; 48
    1838:	89 0f       	add	r24, r25
    183a:	89 83       	std	Y+1, r24	; 0x01
					temp[1]='0' + (light_stop_time % 10);
    183c:	d2 2e       	mov	r13, r18
    183e:	3a e0       	ldi	r19, 0x0A	; 10
    1840:	93 9f       	mul	r25, r19
    1842:	d0 18       	sub	r13, r0
    1844:	11 24       	eor	r1, r1
    1846:	90 e3       	ldi	r25, 0x30	; 48
    1848:	d9 0e       	add	r13, r25
    184a:	da 82       	std	Y+2, r13	; 0x02
    184c:	8e 01       	movw	r16, r28
    184e:	0d 5f       	subi	r16, 0xFD	; 253
    1850:	1f 4f       	sbci	r17, 0xFF	; 255
    1852:	04 c0       	rjmp	.+8      	; 0x185c <update_menu+0x75a>
    1854:	8d 2d       	mov	r24, r13
    1856:	f8 01       	movw	r30, r16
    1858:	d1 90       	ld	r13, Z+
    185a:	8f 01       	movw	r16, r30
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1862:	d1 10       	cpse	r13, r1
    1864:	f7 cf       	rjmp	.-18     	; 0x1854 <update_menu+0x752>
    1866:	80 91 06 01 	lds	r24, 0x0106
    186a:	c2 cc       	rjmp	.-1660   	; 0x11f0 <update_menu+0xee>
				}
			}

			cursor_pos=16+0;
			if (e_dir!=0) menu.clear_is_due=1;
			b_pressed=0;
    186c:	e1 2c       	mov	r14, r1
    186e:	32 cd       	rjmp	.-1436   	; 0x12d4 <update_menu+0x1d2>
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	e1 ce       	rjmp	.-574    	; 0x1636 <update_menu+0x534>
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
			wrap_around(item, 5);
			//choose what to show based on cursor pos
			switch(item){
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	09 f4       	brne	.+2      	; 0x187a <update_menu+0x778>
    1878:	63 c0       	rjmp	.+198    	; 0x1940 <update_menu+0x83e>
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	09 f0       	breq	.+2      	; 0x1880 <update_menu+0x77e>
    187e:	57 cf       	rjmp	.-338    	; 0x172e <update_menu+0x62c>
			case 0: cursor_pos=1; break; //set on hour
			case 1: cursor_pos=6; break; //set on hour
			case 2: cursor_pos=9; break;//set on minutes
			case 3: cursor_pos=12; break;//set on seconds
			case 4: cursor_pos=16 + 11; break;//exit to level 0
    1880:	8b e1       	ldi	r24, 0x1B	; 27
    1882:	80 93 15 01 	sts	0x0115, r24
			}
			//choose what to do for button press based on cursor pos
			if (b_pressed) switch(item){
    1886:	e1 10       	cpse	r14, r1
    1888:	5d cf       	rjmp	.-326    	; 0x1744 <update_menu+0x642>
    188a:	ba cc       	rjmp	.-1676   	; 0x1200 <update_menu+0xfe>
			//use hour==24 as an off condition
			if(water_schedule[item].hour==24) water_schedule[item].on=0;
			else water_schedule[item].on=1;

			if(b_pressed) {
				menu.level=1;
    188c:	11 e0       	ldi	r17, 0x01	; 1
    188e:	10 93 06 01 	sts	0x0106, r17
				water_schedule[item].is_being_changed=0;
    1892:	f9 01       	movw	r30, r18
    1894:	e4 5e       	subi	r30, 0xE4	; 228
    1896:	fe 4f       	sbci	r31, 0xFE	; 254
    1898:	12 82       	std	Z+2, r1	; 0x02
				EEPROM_compare(WATER_SCHEDULE_HOUR_BASE_ADDRESS + item , water_schedule[item].hour); ///////////////////////////////////////////////////////
    189a:	60 81       	ld	r22, Z
    189c:	42 96       	adiw	r24, 0x12	; 18
    189e:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_compare>
				lcd_disable_blinking();
    18a2:	0e 94 41 02 	call	0x482	; 0x482 <lcd_disable_blinking>
				menu.clear_is_due=1;
    18a6:	10 93 08 01 	sts	0x0108, r17
    18aa:	3a cd       	rjmp	.-1420   	; 0x1320 <update_menu+0x21e>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	80 ec       	ldi	r24, 0xC0	; 192
    18b0:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_send>
				}
			}
			else if (menu.level==1){

				lcd_set_cursor(0,1);
				lcd_puts_P(L("           Back  "));
    18b4:	8c e7       	ldi	r24, 0x7C	; 124
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    18bc:	d4 cf       	rjmp	.-88     	; 0x1866 <update_menu+0x764>
			water_schedule[item].is_being_changed=1;
			water_schedule[item].hour+=e_dir;
			wrap_around(water_schedule[item].hour, 25);

			//use hour==24 as an off condition
			if(water_schedule[item].hour==24) water_schedule[item].on=0;
    18be:	11 82       	std	Z+1, r1	; 0x01
    18c0:	2d cd       	rjmp	.-1446   	; 0x131c <update_menu+0x21a>
			wrap_around(item, 8);

			if (b_pressed){
				if (item==7) {menu.level=0; menu.clear_is_due=1;}
				else {
					menu.level=2;
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	80 93 06 01 	sts	0x0106, r24
					lcd_enable_blinking();
    18c8:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_enable_blinking>
    18cc:	80 91 06 01 	lds	r24, 0x0106
    18d0:	b2 ce       	rjmp	.-668    	; 0x1636 <update_menu+0x534>
		}

		if(menu.level==1){
			if(e_dir){
				item+=e_dir;
				wrap_around(item, 3);
    18d2:	9d ef       	ldi	r25, 0xFD	; 253
    18d4:	7b ce       	rjmp	.-778    	; 0x15cc <update_menu+0x4ca>
		}

		if (menu.level==1){
			if(e_dir){
				//fine control...increase water amount by 50 above 100ml, and by 10 under 100ml
				if (water_ml==100) water_ml+= (e_dir==1) ? 50 : -10;
    18d6:	f1 e0       	ldi	r31, 0x01	; 1
    18d8:	ff 16       	cp	r15, r31
    18da:	09 f4       	brne	.+2      	; 0x18de <update_menu+0x7dc>
    18dc:	c4 c0       	rjmp	.+392    	; 0x1a66 <update_menu+0x964>
    18de:	3a e5       	ldi	r19, 0x5A	; 90
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	83 2f       	mov	r24, r19
    18e4:	92 2f       	mov	r25, r18
				else if((0<water_ml) && (water_ml<100)) water_ml+=e_dir*10; //todo check this
				else water_ml+=e_dir*50;
				wrap_around(water_ml, 1000);
    18e6:	97 fd       	sbrc	r25, 7
    18e8:	aa c0       	rjmp	.+340    	; 0x1a3e <update_menu+0x93c>
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	49 cd       	rjmp	.-1390   	; 0x1382 <update_menu+0x280>

		if(menu.level==2){
			//lcd_enable_blinking();
			if(e_dir){
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
				if (item==1) { light_stop_time+=e_dir;  wrap_around(light_stop_time, 24);  }
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <update_menu+0x7f4>
    18f4:	ca cc       	rjmp	.-1644   	; 0x128a <update_menu+0x188>
    18f6:	80 91 18 01 	lds	r24, 0x0118
    18fa:	8f 0d       	add	r24, r15
    18fc:	88 31       	cpi	r24, 0x18	; 24
    18fe:	0c f0       	brlt	.+2      	; 0x1902 <update_menu+0x800>
    1900:	9c c0       	rjmp	.+312    	; 0x1a3a <update_menu+0x938>
    1902:	87 fd       	sbrc	r24, 7
    1904:	b5 c0       	rjmp	.+362    	; 0x1a70 <update_menu+0x96e>
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	89 0f       	add	r24, r25
    190a:	80 93 18 01 	sts	0x0118, r24
    190e:	bd cc       	rjmp	.-1670   	; 0x128a <update_menu+0x188>
					temp[1]='0' + (water_schedule[time.days].hour % 10);
					lcd_puts(temp);
				}

				lcd_set_cursor(8,1);
				if (light_stop_time==light_start_time) lcd_puts_P(L("L: off"));
    1910:	83 e9       	ldi	r24, 0x93	; 147
    1912:	92 e0       	ldi	r25, 0x02	; 2
    1914:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    1918:	80 91 06 01 	lds	r24, 0x0106
    191c:	69 cc       	rjmp	.-1838   	; 0x11f0 <update_menu+0xee>
				else menu.level=2;
				menu.clear_is_due=1;

			}

			cursor_pos= (item==2) ? 16 :( (item==1) ? 14+16 : 6+16);
    191e:	8e e1       	ldi	r24, 0x1E	; 30
    1920:	6b ce       	rjmp	.-810    	; 0x15f8 <update_menu+0x4f6>
		if (menu.level==1){
			if(e_dir){
				//fine control...increase water amount by 50 above 100ml, and by 10 under 100ml
				if (water_ml==100) water_ml+= (e_dir==1) ? 50 : -10;
				else if((0<water_ml) && (water_ml<100)) water_ml+=e_dir*10; //todo check this
				else water_ml+=e_dir*50;
    1922:	ef 2d       	mov	r30, r15
    1924:	f2 e3       	ldi	r31, 0x32	; 50
    1926:	ef 02       	muls	r30, r31
    1928:	80 0d       	add	r24, r0
    192a:	91 1d       	adc	r25, r1
    192c:	11 24       	eor	r1, r1
    192e:	22 cd       	rjmp	.-1468   	; 0x1374 <update_menu+0x272>
			wrap_around(item, 5);
			//choose what to show based on cursor pos
			switch(item){
			case 0: cursor_pos=1; break; //set on hour
			case 1: cursor_pos=6; break; //set on hour
			case 2: cursor_pos=9; break;//set on minutes
    1930:	89 e0       	ldi	r24, 0x09	; 9
    1932:	80 93 15 01 	sts	0x0115, r24
    1936:	a3 ce       	rjmp	.-698    	; 0x167e <update_menu+0x57c>
			item+=e_dir;
			e_dir=0;
			wrap_around(item, 5);
			//choose what to show based on cursor pos
			switch(item){
			case 0: cursor_pos=1; break; //set on hour
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 15 01 	sts	0x0115, r24
    193e:	9f ce       	rjmp	.-706    	; 0x167e <update_menu+0x57c>
			case 1: cursor_pos=6; break; //set on hour
			case 2: cursor_pos=9; break;//set on minutes
			case 3: cursor_pos=12; break;//set on seconds
    1940:	8c e0       	ldi	r24, 0x0C	; 12
    1942:	80 93 15 01 	sts	0x0115, r24
    1946:	9b ce       	rjmp	.-714    	; 0x167e <update_menu+0x57c>

		if(menu.level==2){
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
    1948:	81 11       	cpse	r24, r1
    194a:	be ce       	rjmp	.-644    	; 0x16c8 <update_menu+0x5c6>
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
    194c:	80 91 ea 01 	lds	r24, 0x01EA
    1950:	8f 0d       	add	r24, r15
    1952:	87 30       	cpi	r24, 0x07	; 7
    1954:	0c f0       	brlt	.+2      	; 0x1958 <update_menu+0x856>
    1956:	83 c0       	rjmp	.+262    	; 0x1a5e <update_menu+0x95c>
    1958:	87 fd       	sbrc	r24, 7
    195a:	92 c0       	rjmp	.+292    	; 0x1a80 <update_menu+0x97e>
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	89 0f       	add	r24, r25
    1960:	80 93 ea 01 	sts	0x01EA, r24
    1964:	b1 ce       	rjmp	.-670    	; 0x16c8 <update_menu+0x5c6>
			}

			if(b_pressed){
				menu.level=1;
				//lcd_disable_blinking();
				if (item==0) EEPROM_compare(LIGHT_START_ADDRESS, light_start_time); ////////////////////////////////////////////////////////////////
    1966:	60 91 19 01 	lds	r22, 0x0119
    196a:	8a e0       	ldi	r24, 0x0A	; 10
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_compare>
    1972:	9c cc       	rjmp	.-1736   	; 0x12ac <update_menu+0x1aa>
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
			case 3: time.seconds+=e_dir;	wrap_around(time.seconds, 60); 	break;//set on seconds
			}
			if (b_pressed) {
				menu.level=1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	80 93 06 01 	sts	0x0106, r24
				lcd_disable_blinking();
    197a:	0e 94 41 02 	call	0x482	; 0x482 <lcd_disable_blinking>
				_tm.sec=time.seconds;
    197e:	80 91 e7 01 	lds	r24, 0x01E7
    1982:	99 27       	eor	r25, r25
    1984:	87 fd       	sbrc	r24, 7
    1986:	90 95       	com	r25
    1988:	90 93 17 02 	sts	0x0217, r25
    198c:	80 93 16 02 	sts	0x0216, r24
				_tm.min=time.minutes;
    1990:	80 91 e8 01 	lds	r24, 0x01E8
    1994:	99 27       	eor	r25, r25
    1996:	87 fd       	sbrc	r24, 7
    1998:	90 95       	com	r25
    199a:	90 93 19 02 	sts	0x0219, r25
    199e:	80 93 18 02 	sts	0x0218, r24
				_tm.hour=time.hours;
    19a2:	80 91 e9 01 	lds	r24, 0x01E9
    19a6:	99 27       	eor	r25, r25
    19a8:	87 fd       	sbrc	r24, 7
    19aa:	90 95       	com	r25
    19ac:	90 93 1b 02 	sts	0x021B, r25
    19b0:	80 93 1a 02 	sts	0x021A, r24
				_tm.wday=time.days;
    19b4:	80 91 ea 01 	lds	r24, 0x01EA
    19b8:	99 27       	eor	r25, r25
    19ba:	87 fd       	sbrc	r24, 7
    19bc:	90 95       	com	r25
    19be:	90 93 23 02 	sts	0x0223, r25
    19c2:	80 93 22 02 	sts	0x0222, r24
				rtc_set_time(&_tm);
    19c6:	86 e1       	ldi	r24, 0x16	; 22
    19c8:	92 e0       	ldi	r25, 0x02	; 2
    19ca:	0e 94 cf 05 	call	0xb9e	; 0xb9e <rtc_set_time>
				time.is_being_changed=0;
    19ce:	10 92 ec 01 	sts	0x01EC, r1
    19d2:	7c ce       	rjmp	.-776    	; 0x16cc <update_menu+0x5ca>
				item+=e_dir;
				wrap_around(item, 3);
				menu.clear_is_due=1;
			}
			if(b_pressed){
				if (item==2) {menu.level=0; item=0;}
    19d4:	10 92 06 01 	sts	0x0106, r1
    19d8:	10 92 16 01 	sts	0x0116, r1
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	05 ce       	rjmp	.-1014   	; 0x15ea <update_menu+0x4e8>
		}

		if (menu.level==2){
			water_schedule[item].is_being_changed=1;
			water_schedule[item].hour+=e_dir;
			wrap_around(water_schedule[item].hour, 25);
    19e0:	59 e1       	ldi	r21, 0x19	; 25
    19e2:	92 cc       	rjmp	.-1756   	; 0x1308 <update_menu+0x206>

		//change the time
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
			wrap_around(item, 5);
    19e4:	95 e0       	ldi	r25, 0x05	; 5
    19e6:	3a ce       	rjmp	.-908    	; 0x165c <update_menu+0x55a>
		}

		if(menu.level==2){
			//lcd_enable_blinking();
			if(e_dir){
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
    19e8:	98 ee       	ldi	r25, 0xE8	; 232
    19ea:	4c cc       	rjmp	.-1896   	; 0x1284 <update_menu+0x182>
			lcd_puts(time.whole_time);

			if (menu.level==0){
				lcd_set_cursor(0,1);
				lcd_puts_P(L("W:"));
				if (water_schedule[time.days].hour==24) lcd_puts_P(L("//"));
    19ec:	8a e9       	ldi	r24, 0x9A	; 154
    19ee:	92 e0       	ldi	r25, 0x02	; 2
    19f0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    19f4:	e1 ce       	rjmp	.-574    	; 0x17b8 <update_menu+0x6b6>
						char temp[3]={0};
						temp[0]='0' + (water_schedule[item].hour / 10);
						temp[1]='0' + (water_schedule[item].hour % 10);
						lcd_puts(temp);
					}
					else lcd_puts_P(L(": No water"));
    19f6:	83 e4       	ldi	r24, 0x43	; 67
    19f8:	92 e0       	ldi	r25, 0x02	; 2
    19fa:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    19fe:	65 cc       	rjmp	.-1846   	; 0x12ca <update_menu+0x1c8>
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
    1a00:	80 91 e8 01 	lds	r24, 0x01E8
    1a04:	8f 0d       	add	r24, r15
    1a06:	8c 33       	cpi	r24, 0x3C	; 60
    1a08:	64 f5       	brge	.+88     	; 0x1a62 <update_menu+0x960>
    1a0a:	87 fd       	sbrc	r24, 7
    1a0c:	35 c0       	rjmp	.+106    	; 0x1a78 <update_menu+0x976>
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	89 0f       	add	r24, r25
    1a12:	80 93 e8 01 	sts	0x01E8, r24
    1a16:	58 ce       	rjmp	.-848    	; 0x16c8 <update_menu+0x5c6>
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
    1a18:	80 91 e9 01 	lds	r24, 0x01E9
    1a1c:	8f 0d       	add	r24, r15
    1a1e:	88 31       	cpi	r24, 0x18	; 24
    1a20:	e4 f4       	brge	.+56     	; 0x1a5a <update_menu+0x958>
    1a22:	87 fd       	sbrc	r24, 7
    1a24:	2b c0       	rjmp	.+86     	; 0x1a7c <update_menu+0x97a>
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	89 0f       	add	r24, r25
    1a2a:	80 93 e9 01 	sts	0x01E9, r24
    1a2e:	4c ce       	rjmp	.-872    	; 0x16c8 <update_menu+0x5c6>

			//display level 1 or 2 settings if on that level
			if (menu.level>=1){
				lcd_set_cursor(0,1);
				//8th item: back option
				if (item==7) lcd_puts_P(L("Back            "));
    1a30:	8a e5       	ldi	r24, 0x5A	; 90
    1a32:	92 e0       	ldi	r25, 0x02	; 2
    1a34:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    1a38:	48 cc       	rjmp	.-1904   	; 0x12ca <update_menu+0x1c8>

		if(menu.level==2){
			//lcd_enable_blinking();
			if(e_dir){
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
				if (item==1) { light_stop_time+=e_dir;  wrap_around(light_stop_time, 24);  }
    1a3a:	98 ee       	ldi	r25, 0xE8	; 232
    1a3c:	65 cf       	rjmp	.-310    	; 0x1908 <update_menu+0x806>
			if(e_dir){
				//fine control...increase water amount by 50 above 100ml, and by 10 under 100ml
				if (water_ml==100) water_ml+= (e_dir==1) ? 50 : -10;
				else if((0<water_ml) && (water_ml<100)) water_ml+=e_dir*10; //todo check this
				else water_ml+=e_dir*50;
				wrap_around(water_ml, 1000);
    1a3e:	28 ee       	ldi	r18, 0xE8	; 232
    1a40:	33 e0       	ldi	r19, 0x03	; 3
    1a42:	9f cc       	rjmp	.-1730   	; 0x1382 <update_menu+0x280>
		}

		if(menu.level==1){
			if(e_dir){
				item+=e_dir;
				wrap_around(item, 3);
    1a44:	93 e0       	ldi	r25, 0x03	; 3
    1a46:	c2 cd       	rjmp	.-1148   	; 0x15cc <update_menu+0x4ca>

			if(b_pressed){
				menu.level=1;
				//lcd_disable_blinking();
				if (item==0) EEPROM_compare(LIGHT_START_ADDRESS, light_start_time); ////////////////////////////////////////////////////////////////
				if (item==1) EEPROM_compare(LIGHT_STOP_ADDRESS , light_stop_time ); ////////////////////////////////////////////////////////////////
    1a48:	60 91 18 01 	lds	r22, 0x0118
    1a4c:	8c e0       	ldi	r24, 0x0C	; 12
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 6f 08 	call	0x10de	; 0x10de <EEPROM_compare>
    1a54:	2b cc       	rjmp	.-1962   	; 0x12ac <update_menu+0x1aa>

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
			case 3: time.seconds+=e_dir;	wrap_around(time.seconds, 60); 	break;//set on seconds
    1a56:	94 ec       	ldi	r25, 0xC4	; 196
    1a58:	34 ce       	rjmp	.-920    	; 0x16c2 <update_menu+0x5c0>
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
    1a5a:	98 ee       	ldi	r25, 0xE8	; 232
    1a5c:	e5 cf       	rjmp	.-54     	; 0x1a28 <update_menu+0x926>
		if(menu.level==2){
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
    1a5e:	99 ef       	ldi	r25, 0xF9	; 249
    1a60:	7e cf       	rjmp	.-260    	; 0x195e <update_menu+0x85c>
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
    1a62:	94 ec       	ldi	r25, 0xC4	; 196
    1a64:	d5 cf       	rjmp	.-86     	; 0x1a10 <update_menu+0x90e>
		}

		if (menu.level==1){
			if(e_dir){
				//fine control...increase water amount by 50 above 100ml, and by 10 under 100ml
				if (water_ml==100) water_ml+= (e_dir==1) ? 50 : -10;
    1a66:	36 e9       	ldi	r19, 0x96	; 150
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3b cf       	rjmp	.-394    	; 0x18e2 <update_menu+0x7e0>
		}

		if(menu.level==2){
			//lcd_enable_blinking();
			if(e_dir){
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
    1a6c:	98 e1       	ldi	r25, 0x18	; 24
    1a6e:	0a cc       	rjmp	.-2028   	; 0x1284 <update_menu+0x182>
				if (item==1) { light_stop_time+=e_dir;  wrap_around(light_stop_time, 24);  }
    1a70:	98 e1       	ldi	r25, 0x18	; 24
    1a72:	4a cf       	rjmp	.-364    	; 0x1908 <update_menu+0x806>

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
			case 3: time.seconds+=e_dir;	wrap_around(time.seconds, 60); 	break;//set on seconds
    1a74:	9c e3       	ldi	r25, 0x3C	; 60
    1a76:	25 ce       	rjmp	.-950    	; 0x16c2 <update_menu+0x5c0>
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
    1a78:	9c e3       	ldi	r25, 0x3C	; 60
    1a7a:	ca cf       	rjmp	.-108    	; 0x1a10 <update_menu+0x90e>
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
    1a7c:	98 e1       	ldi	r25, 0x18	; 24
    1a7e:	d4 cf       	rjmp	.-88     	; 0x1a28 <update_menu+0x926>
		if(menu.level==2){
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
    1a80:	97 e0       	ldi	r25, 0x07	; 7
    1a82:	6d cf       	rjmp	.-294    	; 0x195e <update_menu+0x85c>

00001a84 <main>:
int main(void) {
	uint16_t millis1=0;
	uint16_t millis2=0;


	MOTOR_PORT |= _BV(MOTOR_PIN); //set port to 0, ready to pull-down if needed
    1a84:	28 9a       	sbi	0x05, 0	; 5
	LIGHT_PORT |= _BV(LIGHT_PIN); //ditto above
    1a86:	2a 9a       	sbi	0x05, 2	; 5
	BACKLIGHT_PORT |= _BV(BACKLIGHT_BIT); //ditto above
    1a88:	2f 9a       	sbi	0x05, 7	; 5
	BACKLIGHT_HIGH;
    1a8a:	2f 9a       	sbi	0x05, 7	; 5
	//LIGHT_ON;
	MOTOR_OFF;
    1a8c:	28 98       	cbi	0x05, 0	; 5

	LIGHT_OFF;
    1a8e:	2a 98       	cbi	0x05, 2	; 5
	//motor_startup();

	//set timer 2 for timekeeping and non-blocking delays
	//set CTC mode (compare on match)
	TCCR2A = (1<<WGM20) | (1<<WGM21);
    1a90:	23 e0       	ldi	r18, 0x03	; 3
    1a92:	20 93 b0 00 	sts	0x00B0, r18
	//at 8Mhz, a prescaler of 128 with compare of 125 gives an exact 4ms interrupt (internally divides 8Mhz by 2)
	TCCR2B = (1<<CS22) | (0<<CS21) | (1<<CS20); //perscaler 128 for 4ms interrupt timer
    1a96:	85 e0       	ldi	r24, 0x05	; 5
    1a98:	80 93 b1 00 	sts	0x00B1, r24
	//TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20); //perscaler 32 for 1ms interrupt timer
	//set the compare value
	OCR2A = 125;
    1a9c:	8d e7       	ldi	r24, 0x7D	; 125
    1a9e:	80 93 b3 00 	sts	0x00B3, r24
	//enable and setup interrupt on match with OCR2A
	TIMSK2 = (1<<OCIE2A);
    1aa2:	92 e0       	ldi	r25, 0x02	; 2
    1aa4:	90 93 70 00 	sts	0x0070, r25


	//setup encoder pins interrupts
	//set pins as inputs
	DDRB &= ~(1<<ENC_BUTTON) ;
    1aa8:	21 98       	cbi	0x04, 1	; 4
	DDRC &= ~(1<<ENC_B_PIN) & ~(1<<ENC_A_PIN);
    1aaa:	87 b1       	in	r24, 0x07	; 7
    1aac:	8c 7f       	andi	r24, 0xFC	; 252
    1aae:	87 b9       	out	0x07, r24	; 7
	//enable internal pullups
	PORTB |= (1<<ENC_BUTTON) ;
    1ab0:	29 9a       	sbi	0x05, 1	; 5
	PORTC |=  (1<<ENC_B_PIN) | (1<<ENC_A_PIN);
    1ab2:	88 b1       	in	r24, 0x08	; 8
    1ab4:	83 60       	ori	r24, 0x03	; 3
    1ab6:	88 b9       	out	0x08, r24	; 8
	//enable INT on pins with INT[0:7] and INT[8:14]
	PCICR = (1<<PCIE0) | (1<<PCIE1);
    1ab8:	20 93 68 00 	sts	0x0068, r18
	//set which pins are to be checked for events
	PCMSK1 = (1<<ENC_A_PIN) ;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	80 93 6c 00 	sts	0x006C, r24
	PCMSK0 = (1<<ENC_BUTTON);
    1ac2:	90 93 6b 00 	sts	0x006B, r25

	restore_vars_from_EEPROM();
    1ac6:	0e 94 32 08 	call	0x1064	; 0x1064 <restore_vars_from_EEPROM>


	lcd_init();
    1aca:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_init>
	lcd_puts_P(L("{ Plant  Saver }"));
    1ace:	8a ef       	ldi	r24, 0xFA	; 250
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_puts_P>
    1ad6:	2f ef       	ldi	r18, 0xFF	; 255
    1ad8:	89 e6       	ldi	r24, 0x69	; 105
    1ada:	98 e1       	ldi	r25, 0x18	; 24
    1adc:	21 50       	subi	r18, 0x01	; 1
    1ade:	80 40       	sbci	r24, 0x00	; 0
    1ae0:	90 40       	sbci	r25, 0x00	; 0
    1ae2:	e1 f7       	brne	.-8      	; 0x1adc <main+0x58>
    1ae4:	00 c0       	rjmp	.+0      	; 0x1ae6 <main+0x62>
    1ae6:	00 00       	nop
	_delay_ms(1000);
	lcd_clear_top();
    1ae8:	0e 94 8c 02 	call	0x518	; 0x518 <lcd_clear_top>

	//enable all interrupts
	sei();
    1aec:	78 94       	sei

	time.has_changed = 0;
    1aee:	10 92 eb 01 	sts	0x01EB, r1
	time.millis = 0;
    1af2:	10 92 e6 01 	sts	0x01E6, r1
    1af6:	10 92 e5 01 	sts	0x01E5, r1
	/*

	 //

	*/
	rtc_init();
    1afa:	0e 94 ca 04 	call	0x994	; 0x994 <rtc_init>

	time.seconds = atoi(&TIME__[6]) + 4;
    1afe:	80 e1       	ldi	r24, 0x10	; 16
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <atoi>
    1b06:	d4 e0       	ldi	r29, 0x04	; 4
    1b08:	d8 0f       	add	r29, r24
    1b0a:	d0 93 e7 01 	sts	0x01E7, r29
	time.minutes = atoi(&TIME__[3]);
    1b0e:	8d e0       	ldi	r24, 0x0D	; 13
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <atoi>
    1b16:	c8 2f       	mov	r28, r24
    1b18:	80 93 e8 01 	sts	0x01E8, r24
	time.hours = atoi(&TIME__[0]);
    1b1c:	8a e0       	ldi	r24, 0x0A	; 10
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <atoi>
    1b24:	80 93 e9 01 	sts	0x01E9, r24
	time.days = 6;
    1b28:	96 e0       	ldi	r25, 0x06	; 6
    1b2a:	90 93 ea 01 	sts	0x01EA, r25
	//if the cause of the reset was due to programming, update the date
	//if  (!((MCUSR >> PORF) & 0x01)) { // todo: check if this works
	if (1) {
		_tm.sec=time.seconds;
    1b2e:	4d 2f       	mov	r20, r29
    1b30:	55 27       	eor	r21, r21
    1b32:	47 fd       	sbrc	r20, 7
    1b34:	50 95       	com	r21
    1b36:	50 93 17 02 	sts	0x0217, r21
    1b3a:	40 93 16 02 	sts	0x0216, r20
		_tm.min=time.minutes;
    1b3e:	2c 2f       	mov	r18, r28
    1b40:	33 27       	eor	r19, r19
    1b42:	27 fd       	sbrc	r18, 7
    1b44:	30 95       	com	r19
    1b46:	30 93 19 02 	sts	0x0219, r19
    1b4a:	20 93 18 02 	sts	0x0218, r18
		_tm.hour=time.hours;
    1b4e:	99 27       	eor	r25, r25
    1b50:	87 fd       	sbrc	r24, 7
    1b52:	90 95       	com	r25
    1b54:	90 93 1b 02 	sts	0x021B, r25
    1b58:	80 93 1a 02 	sts	0x021A, r24
		_tm.wday=time.days;
    1b5c:	86 e0       	ldi	r24, 0x06	; 6
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	90 93 23 02 	sts	0x0223, r25
    1b64:	80 93 22 02 	sts	0x0222, r24
		rtc_set_time(&_tm);
    1b68:	86 e1       	ldi	r24, 0x16	; 22
    1b6a:	92 e0       	ldi	r25, 0x02	; 2
    1b6c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <rtc_set_time>
	}
	else rtc_get_time();
	time.seconds = (int8_t) _tm.sec;
    1b70:	80 91 16 02 	lds	r24, 0x0216
    1b74:	80 93 e7 01 	sts	0x01E7, r24
	time.minutes = (int8_t) _tm.min;
    1b78:	80 91 18 02 	lds	r24, 0x0218
    1b7c:	80 93 e8 01 	sts	0x01E8, r24
	time.hours = (int8_t) _tm.hour;
    1b80:	80 91 1a 02 	lds	r24, 0x021A
    1b84:	80 93 e9 01 	sts	0x01E9, r24
	time.days = (int8_t) _tm.wday;
    1b88:	80 91 22 02 	lds	r24, 0x0222
    1b8c:	80 93 ea 01 	sts	0x01EA, r24


	format_2_string(&time);
    1b90:	85 ee       	ldi	r24, 0xE5	; 229
    1b92:	91 e0       	ldi	r25, 0x01	; 1
    1b94:	0e 94 57 06 	call	0xcae	; 0xcae <format_2_string>
const char TIME__[] = __TIME__;
//const char DATE__[] = __DATE__;

int main(void) {
	uint16_t millis1=0;
	uint16_t millis2=0;
    1b98:	c0 e0       	ldi	r28, 0x00	; 0
    1b9a:	d0 e0       	ldi	r29, 0x00	; 0

	format_2_string(&time);

	while (1) {

		if (tick_tock){
    1b9c:	80 91 3a 01 	lds	r24, 0x013A
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <main+0x148>
			update_the_stuff(tick_tock);
			tick_tock=0;
		}


		if (millis2 < LCD_REFRESH_RATE){
    1ba4:	c8 37       	cpi	r28, 0x78	; 120
    1ba6:	d1 05       	cpc	r29, r1
    1ba8:	c8 f7       	brcc	.-14     	; 0x1b9c <main+0x118>
			millis2 -= LCD_REFRESH_RATE;
    1baa:	c8 57       	subi	r28, 0x78	; 120
    1bac:	d1 09       	sbc	r29, r1

			//if (enc_button_pressed) MOTOR_TOGGLE;

			update_menu(enc_dir, enc_button_pressed, 0);
    1bae:	60 91 3c 01 	lds	r22, 0x013C
    1bb2:	80 91 3b 01 	lds	r24, 0x013B
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	0e 94 81 08 	call	0x1102	; 0x1102 <update_menu>

			enc_dir=0;
    1bbc:	10 92 3b 01 	sts	0x013B, r1
			enc_button_pressed=0;
    1bc0:	10 92 3c 01 	sts	0x013C, r1

	format_2_string(&time);

	while (1) {

		if (tick_tock){
    1bc4:	80 91 3a 01 	lds	r24, 0x013A
    1bc8:	88 23       	and	r24, r24
    1bca:	61 f3       	breq	.-40     	; 0x1ba4 <main+0x120>
			millis1 += tick_tock;
    1bcc:	80 91 3a 01 	lds	r24, 0x013A
			millis2 += tick_tock;
    1bd0:	80 91 3a 01 	lds	r24, 0x013A
    1bd4:	c8 0f       	add	r28, r24
    1bd6:	d1 1d       	adc	r29, r1
			update_clock(tick_tock);
    1bd8:	80 91 3a 01 	lds	r24, 0x013A
    1bdc:	0e 94 b2 06 	call	0xd64	; 0xd64 <update_clock>
			update_the_stuff(tick_tock);
    1be0:	80 91 3a 01 	lds	r24, 0x013A
    1be4:	0e 94 7e 07 	call	0xefc	; 0xefc <update_the_stuff>
			tick_tock=0;
    1be8:	10 92 3a 01 	sts	0x013A, r1
    1bec:	db cf       	rjmp	.-74     	; 0x1ba4 <main+0x120>

00001bee <__divmodhi4>:
    1bee:	97 fb       	bst	r25, 7
    1bf0:	07 2e       	mov	r0, r23
    1bf2:	16 f4       	brtc	.+4      	; 0x1bf8 <__divmodhi4+0xa>
    1bf4:	00 94       	com	r0
    1bf6:	07 d0       	rcall	.+14     	; 0x1c06 <__divmodhi4_neg1>
    1bf8:	77 fd       	sbrc	r23, 7
    1bfa:	09 d0       	rcall	.+18     	; 0x1c0e <__divmodhi4_neg2>
    1bfc:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__udivmodhi4>
    1c00:	07 fc       	sbrc	r0, 7
    1c02:	05 d0       	rcall	.+10     	; 0x1c0e <__divmodhi4_neg2>
    1c04:	3e f4       	brtc	.+14     	; 0x1c14 <__divmodhi4_exit>

00001c06 <__divmodhi4_neg1>:
    1c06:	90 95       	com	r25
    1c08:	81 95       	neg	r24
    1c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0c:	08 95       	ret

00001c0e <__divmodhi4_neg2>:
    1c0e:	70 95       	com	r23
    1c10:	61 95       	neg	r22
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255

00001c14 <__divmodhi4_exit>:
    1c14:	08 95       	ret

00001c16 <__tablejump2__>:
    1c16:	ee 0f       	add	r30, r30
    1c18:	ff 1f       	adc	r31, r31

00001c1a <__tablejump__>:
    1c1a:	05 90       	lpm	r0, Z+
    1c1c:	f4 91       	lpm	r31, Z
    1c1e:	e0 2d       	mov	r30, r0
    1c20:	09 94       	ijmp

00001c22 <__usmulhisi3>:
    1c22:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__umulhisi3>

00001c26 <__usmulhisi3_tail>:
    1c26:	b7 ff       	sbrs	r27, 7
    1c28:	08 95       	ret
    1c2a:	82 1b       	sub	r24, r18
    1c2c:	93 0b       	sbc	r25, r19
    1c2e:	08 95       	ret

00001c30 <__udivmodhi4>:
    1c30:	aa 1b       	sub	r26, r26
    1c32:	bb 1b       	sub	r27, r27
    1c34:	51 e1       	ldi	r21, 0x11	; 17
    1c36:	07 c0       	rjmp	.+14     	; 0x1c46 <__udivmodhi4_ep>

00001c38 <__udivmodhi4_loop>:
    1c38:	aa 1f       	adc	r26, r26
    1c3a:	bb 1f       	adc	r27, r27
    1c3c:	a6 17       	cp	r26, r22
    1c3e:	b7 07       	cpc	r27, r23
    1c40:	10 f0       	brcs	.+4      	; 0x1c46 <__udivmodhi4_ep>
    1c42:	a6 1b       	sub	r26, r22
    1c44:	b7 0b       	sbc	r27, r23

00001c46 <__udivmodhi4_ep>:
    1c46:	88 1f       	adc	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	5a 95       	dec	r21
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <__udivmodhi4_loop>
    1c4e:	80 95       	com	r24
    1c50:	90 95       	com	r25
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	08 95       	ret

00001c58 <__umulhisi3>:
    1c58:	a2 9f       	mul	r26, r18
    1c5a:	b0 01       	movw	r22, r0
    1c5c:	b3 9f       	mul	r27, r19
    1c5e:	c0 01       	movw	r24, r0
    1c60:	a3 9f       	mul	r26, r19
    1c62:	70 0d       	add	r23, r0
    1c64:	81 1d       	adc	r24, r1
    1c66:	11 24       	eor	r1, r1
    1c68:	91 1d       	adc	r25, r1
    1c6a:	b2 9f       	mul	r27, r18
    1c6c:	70 0d       	add	r23, r0
    1c6e:	81 1d       	adc	r24, r1
    1c70:	11 24       	eor	r1, r1
    1c72:	91 1d       	adc	r25, r1
    1c74:	08 95       	ret

00001c76 <atoi>:
    1c76:	fc 01       	movw	r30, r24
    1c78:	88 27       	eor	r24, r24
    1c7a:	99 27       	eor	r25, r25
    1c7c:	e8 94       	clt
    1c7e:	21 91       	ld	r18, Z+
    1c80:	20 32       	cpi	r18, 0x20	; 32
    1c82:	e9 f3       	breq	.-6      	; 0x1c7e <atoi+0x8>
    1c84:	29 30       	cpi	r18, 0x09	; 9
    1c86:	10 f0       	brcs	.+4      	; 0x1c8c <atoi+0x16>
    1c88:	2e 30       	cpi	r18, 0x0E	; 14
    1c8a:	c8 f3       	brcs	.-14     	; 0x1c7e <atoi+0x8>
    1c8c:	2b 32       	cpi	r18, 0x2B	; 43
    1c8e:	41 f0       	breq	.+16     	; 0x1ca0 <atoi+0x2a>
    1c90:	2d 32       	cpi	r18, 0x2D	; 45
    1c92:	39 f4       	brne	.+14     	; 0x1ca2 <atoi+0x2c>
    1c94:	68 94       	set
    1c96:	04 c0       	rjmp	.+8      	; 0x1ca0 <atoi+0x2a>
    1c98:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__mulhi_const_10>
    1c9c:	82 0f       	add	r24, r18
    1c9e:	91 1d       	adc	r25, r1
    1ca0:	21 91       	ld	r18, Z+
    1ca2:	20 53       	subi	r18, 0x30	; 48
    1ca4:	2a 30       	cpi	r18, 0x0A	; 10
    1ca6:	c0 f3       	brcs	.-16     	; 0x1c98 <atoi+0x22>
    1ca8:	1e f4       	brtc	.+6      	; 0x1cb0 <atoi+0x3a>
    1caa:	90 95       	com	r25
    1cac:	81 95       	neg	r24
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	08 95       	ret

00001cb2 <__itoa_ncheck>:
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	4a 30       	cpi	r20, 0x0A	; 10
    1cb6:	31 f4       	brne	.+12     	; 0x1cc4 <__itoa_ncheck+0x12>
    1cb8:	99 23       	and	r25, r25
    1cba:	22 f4       	brpl	.+8      	; 0x1cc4 <__itoa_ncheck+0x12>
    1cbc:	bd e2       	ldi	r27, 0x2D	; 45
    1cbe:	90 95       	com	r25
    1cc0:	81 95       	neg	r24
    1cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc4:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__utoa_common>

00001cc8 <__ltoa_ncheck>:
    1cc8:	bb 27       	eor	r27, r27
    1cca:	2a 30       	cpi	r18, 0x0A	; 10
    1ccc:	51 f4       	brne	.+20     	; 0x1ce2 <__ltoa_ncheck+0x1a>
    1cce:	99 23       	and	r25, r25
    1cd0:	42 f4       	brpl	.+16     	; 0x1ce2 <__ltoa_ncheck+0x1a>
    1cd2:	bd e2       	ldi	r27, 0x2D	; 45
    1cd4:	90 95       	com	r25
    1cd6:	80 95       	com	r24
    1cd8:	70 95       	com	r23
    1cda:	61 95       	neg	r22
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__ultoa_common>

00001ce6 <__mulhi_const_10>:
    1ce6:	7a e0       	ldi	r23, 0x0A	; 10
    1ce8:	97 9f       	mul	r25, r23
    1cea:	90 2d       	mov	r25, r0
    1cec:	87 9f       	mul	r24, r23
    1cee:	80 2d       	mov	r24, r0
    1cf0:	91 0d       	add	r25, r1
    1cf2:	11 24       	eor	r1, r1
    1cf4:	08 95       	ret

00001cf6 <__ultoa_ncheck>:
    1cf6:	bb 27       	eor	r27, r27

00001cf8 <__ultoa_common>:
    1cf8:	fa 01       	movw	r30, r20
    1cfa:	a6 2f       	mov	r26, r22
    1cfc:	62 17       	cp	r22, r18
    1cfe:	71 05       	cpc	r23, r1
    1d00:	81 05       	cpc	r24, r1
    1d02:	91 05       	cpc	r25, r1
    1d04:	33 0b       	sbc	r19, r19
    1d06:	30 fb       	bst	r19, 0
    1d08:	66 f0       	brts	.+24     	; 0x1d22 <__ultoa_common+0x2a>
    1d0a:	aa 27       	eor	r26, r26
    1d0c:	66 0f       	add	r22, r22
    1d0e:	77 1f       	adc	r23, r23
    1d10:	88 1f       	adc	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	aa 1f       	adc	r26, r26
    1d16:	a2 17       	cp	r26, r18
    1d18:	10 f0       	brcs	.+4      	; 0x1d1e <__ultoa_common+0x26>
    1d1a:	a2 1b       	sub	r26, r18
    1d1c:	63 95       	inc	r22
    1d1e:	38 50       	subi	r19, 0x08	; 8
    1d20:	a9 f7       	brne	.-22     	; 0x1d0c <__ultoa_common+0x14>
    1d22:	a0 5d       	subi	r26, 0xD0	; 208
    1d24:	aa 33       	cpi	r26, 0x3A	; 58
    1d26:	08 f0       	brcs	.+2      	; 0x1d2a <__ultoa_common+0x32>
    1d28:	a9 5d       	subi	r26, 0xD9	; 217
    1d2a:	a1 93       	st	Z+, r26
    1d2c:	36 f7       	brtc	.-52     	; 0x1cfa <__ultoa_common+0x2>
    1d2e:	b1 11       	cpse	r27, r1
    1d30:	b1 93       	st	Z+, r27
    1d32:	10 82       	st	Z, r1
    1d34:	ca 01       	movw	r24, r20
    1d36:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <strrev>

00001d3a <__utoa_ncheck>:
    1d3a:	bb 27       	eor	r27, r27

00001d3c <__utoa_common>:
    1d3c:	fb 01       	movw	r30, r22
    1d3e:	55 27       	eor	r21, r21
    1d40:	aa 27       	eor	r26, r26
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	aa 1f       	adc	r26, r26
    1d48:	a4 17       	cp	r26, r20
    1d4a:	10 f0       	brcs	.+4      	; 0x1d50 <__utoa_common+0x14>
    1d4c:	a4 1b       	sub	r26, r20
    1d4e:	83 95       	inc	r24
    1d50:	50 51       	subi	r21, 0x10	; 16
    1d52:	b9 f7       	brne	.-18     	; 0x1d42 <__utoa_common+0x6>
    1d54:	a0 5d       	subi	r26, 0xD0	; 208
    1d56:	aa 33       	cpi	r26, 0x3A	; 58
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <__utoa_common+0x20>
    1d5a:	a9 5d       	subi	r26, 0xD9	; 217
    1d5c:	a1 93       	st	Z+, r26
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	79 f7       	brne	.-34     	; 0x1d40 <__utoa_common+0x4>
    1d62:	b1 11       	cpse	r27, r1
    1d64:	b1 93       	st	Z+, r27
    1d66:	11 92       	st	Z+, r1
    1d68:	cb 01       	movw	r24, r22
    1d6a:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <strrev>

00001d6e <strrev>:
    1d6e:	dc 01       	movw	r26, r24
    1d70:	fc 01       	movw	r30, r24
    1d72:	67 2f       	mov	r22, r23
    1d74:	71 91       	ld	r23, Z+
    1d76:	77 23       	and	r23, r23
    1d78:	e1 f7       	brne	.-8      	; 0x1d72 <strrev+0x4>
    1d7a:	32 97       	sbiw	r30, 0x02	; 2
    1d7c:	04 c0       	rjmp	.+8      	; 0x1d86 <strrev+0x18>
    1d7e:	7c 91       	ld	r23, X
    1d80:	6d 93       	st	X+, r22
    1d82:	70 83       	st	Z, r23
    1d84:	62 91       	ld	r22, -Z
    1d86:	ae 17       	cp	r26, r30
    1d88:	bf 07       	cpc	r27, r31
    1d8a:	c8 f3       	brcs	.-14     	; 0x1d7e <strrev+0x10>
    1d8c:	08 95       	ret

00001d8e <_exit>:
    1d8e:	f8 94       	cli

00001d90 <__stop_program>:
    1d90:	ff cf       	rjmp	.-2      	; 0x1d90 <__stop_program>
