
main.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__ctors_end>
       4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
       8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
       c:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__vector_3>
      10:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__vector_4>
      14:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      18:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      1c:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__vector_7>
      20:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      24:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      28:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      2c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      30:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      34:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      38:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      3c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      40:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      44:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      48:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      4c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      50:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      54:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      58:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      5c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      60:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_24>
      64:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      68:	c5 03       	fmuls	r20, r21
      6a:	73 03       	mulsu	r23, r19
      6c:	73 03       	mulsu	r23, r19
      6e:	73 03       	mulsu	r23, r19
      70:	73 03       	mulsu	r23, r19
      72:	73 03       	mulsu	r23, r19
      74:	73 03       	mulsu	r23, r19
      76:	73 03       	mulsu	r23, r19
      78:	cf 03       	fmulsu	r20, r23
      7a:	73 03       	mulsu	r23, r19
      7c:	73 03       	mulsu	r23, r19
      7e:	73 03       	mulsu	r23, r19
      80:	73 03       	mulsu	r23, r19
      82:	73 03       	mulsu	r23, r19
      84:	73 03       	mulsu	r23, r19
      86:	73 03       	mulsu	r23, r19
      88:	cf 03       	fmulsu	r20, r23
      8a:	73 03       	mulsu	r23, r19
      8c:	73 03       	mulsu	r23, r19
      8e:	73 03       	mulsu	r23, r19
      90:	73 03       	mulsu	r23, r19
      92:	73 03       	mulsu	r23, r19
      94:	73 03       	mulsu	r23, r19
      96:	73 03       	mulsu	r23, r19
      98:	d7 03       	fmuls	r21, r23
      9a:	73 03       	mulsu	r23, r19
      9c:	73 03       	mulsu	r23, r19
      9e:	73 03       	mulsu	r23, r19
      a0:	73 03       	mulsu	r23, r19
      a2:	73 03       	mulsu	r23, r19
      a4:	73 03       	mulsu	r23, r19
      a6:	73 03       	mulsu	r23, r19
      a8:	e6 03       	fmuls	r22, r22
      aa:	73 03       	mulsu	r23, r19
      ac:	73 03       	mulsu	r23, r19
      ae:	73 03       	mulsu	r23, r19
      b0:	73 03       	mulsu	r23, r19
      b2:	73 03       	mulsu	r23, r19
      b4:	73 03       	mulsu	r23, r19
      b6:	73 03       	mulsu	r23, r19
      b8:	d7 03       	fmuls	r21, r23
      ba:	73 03       	mulsu	r23, r19
      bc:	73 03       	mulsu	r23, r19
      be:	73 03       	mulsu	r23, r19
      c0:	73 03       	mulsu	r23, r19
      c2:	73 03       	mulsu	r23, r19
      c4:	73 03       	mulsu	r23, r19
      c6:	73 03       	mulsu	r23, r19
      c8:	11 04       	cpc	r1, r1
      ca:	73 03       	mulsu	r23, r19
      cc:	73 03       	mulsu	r23, r19
      ce:	73 03       	mulsu	r23, r19
      d0:	73 03       	mulsu	r23, r19
      d2:	73 03       	mulsu	r23, r19
      d4:	73 03       	mulsu	r23, r19
      d6:	73 03       	mulsu	r23, r19
      d8:	1c 04       	cpc	r1, r12
      da:	73 03       	mulsu	r23, r19
      dc:	73 03       	mulsu	r23, r19
      de:	73 03       	mulsu	r23, r19
      e0:	73 03       	mulsu	r23, r19
      e2:	73 03       	mulsu	r23, r19
      e4:	73 03       	mulsu	r23, r19
      e6:	73 03       	mulsu	r23, r19
      e8:	99 03       	fmulsu	r17, r17
      ea:	73 03       	mulsu	r23, r19
      ec:	73 03       	mulsu	r23, r19
      ee:	73 03       	mulsu	r23, r19
      f0:	73 03       	mulsu	r23, r19
      f2:	73 03       	mulsu	r23, r19
      f4:	73 03       	mulsu	r23, r19
      f6:	73 03       	mulsu	r23, r19
      f8:	ac 03       	fmulsu	r18, r20
      fa:	73 03       	mulsu	r23, r19
      fc:	73 03       	mulsu	r23, r19
      fe:	73 03       	mulsu	r23, r19
     100:	73 03       	mulsu	r23, r19
     102:	73 03       	mulsu	r23, r19
     104:	73 03       	mulsu	r23, r19
     106:	73 03       	mulsu	r23, r19
     108:	8d 03       	fmulsu	r16, r21
     10a:	73 03       	mulsu	r23, r19
     10c:	73 03       	mulsu	r23, r19
     10e:	73 03       	mulsu	r23, r19
     110:	73 03       	mulsu	r23, r19
     112:	73 03       	mulsu	r23, r19
     114:	73 03       	mulsu	r23, r19
     116:	73 03       	mulsu	r23, r19
     118:	a0 03       	fmuls	r18, r16
     11a:	73 03       	mulsu	r23, r19
     11c:	73 03       	mulsu	r23, r19
     11e:	73 03       	mulsu	r23, r19
     120:	73 03       	mulsu	r23, r19
     122:	73 03       	mulsu	r23, r19
     124:	73 03       	mulsu	r23, r19
     126:	73 03       	mulsu	r23, r19
     128:	bc 03       	fmulsu	r19, r20
     12a:	73 03       	mulsu	r23, r19
     12c:	73 03       	mulsu	r23, r19
     12e:	73 03       	mulsu	r23, r19
     130:	73 03       	mulsu	r23, r19
     132:	73 03       	mulsu	r23, r19
     134:	73 03       	mulsu	r23, r19
     136:	73 03       	mulsu	r23, r19
     138:	bc 03       	fmulsu	r19, r20
     13a:	73 03       	mulsu	r23, r19
     13c:	73 03       	mulsu	r23, r19
     13e:	73 03       	mulsu	r23, r19
     140:	73 03       	mulsu	r23, r19
     142:	73 03       	mulsu	r23, r19
     144:	73 03       	mulsu	r23, r19
     146:	73 03       	mulsu	r23, r19
     148:	bc 03       	fmulsu	r19, r20
     14a:	73 03       	mulsu	r23, r19
     14c:	73 03       	mulsu	r23, r19
     14e:	73 03       	mulsu	r23, r19
     150:	73 03       	mulsu	r23, r19
     152:	73 03       	mulsu	r23, r19
     154:	73 03       	mulsu	r23, r19
     156:	73 03       	mulsu	r23, r19
     158:	bc 03       	fmulsu	r19, r20
     15a:	73 03       	mulsu	r23, r19
     15c:	73 03       	mulsu	r23, r19
     15e:	73 03       	mulsu	r23, r19
     160:	73 03       	mulsu	r23, r19
     162:	73 03       	mulsu	r23, r19
     164:	73 03       	mulsu	r23, r19
     166:	73 03       	mulsu	r23, r19
     168:	84 03       	fmuls	r16, r20
     16a:	73 03       	mulsu	r23, r19
     16c:	73 03       	mulsu	r23, r19
     16e:	73 03       	mulsu	r23, r19
     170:	73 03       	mulsu	r23, r19
     172:	73 03       	mulsu	r23, r19
     174:	73 03       	mulsu	r23, r19
     176:	73 03       	mulsu	r23, r19
     178:	89 03       	fmulsu	r16, r17
     17a:	73 03       	mulsu	r23, r19
     17c:	73 03       	mulsu	r23, r19
     17e:	73 03       	mulsu	r23, r19
     180:	73 03       	mulsu	r23, r19
     182:	73 03       	mulsu	r23, r19
     184:	73 03       	mulsu	r23, r19
     186:	73 03       	mulsu	r23, r19
     188:	84 03       	fmuls	r16, r20
     18a:	73 03       	mulsu	r23, r19
     18c:	73 03       	mulsu	r23, r19
     18e:	73 03       	mulsu	r23, r19
     190:	73 03       	mulsu	r23, r19
     192:	73 03       	mulsu	r23, r19
     194:	73 03       	mulsu	r23, r19
     196:	73 03       	mulsu	r23, r19
     198:	89 03       	fmulsu	r16, r17
     19a:	73 03       	mulsu	r23, r19
     19c:	73 03       	mulsu	r23, r19
     19e:	73 03       	mulsu	r23, r19
     1a0:	73 03       	mulsu	r23, r19
     1a2:	73 03       	mulsu	r23, r19
     1a4:	73 03       	mulsu	r23, r19
     1a6:	73 03       	mulsu	r23, r19
     1a8:	f1 03       	fmuls	r23, r17
     1aa:	73 03       	mulsu	r23, r19
     1ac:	73 03       	mulsu	r23, r19
     1ae:	73 03       	mulsu	r23, r19
     1b0:	73 03       	mulsu	r23, r19
     1b2:	73 03       	mulsu	r23, r19
     1b4:	73 03       	mulsu	r23, r19
     1b6:	73 03       	mulsu	r23, r19
     1b8:	49 03       	fmul	r20, r17
     1ba:	73 03       	mulsu	r23, r19
     1bc:	73 03       	mulsu	r23, r19
     1be:	73 03       	mulsu	r23, r19
     1c0:	73 03       	mulsu	r23, r19
     1c2:	73 03       	mulsu	r23, r19
     1c4:	73 03       	mulsu	r23, r19
     1c6:	73 03       	mulsu	r23, r19
     1c8:	49 03       	fmul	r20, r17
     1ca:	73 03       	mulsu	r23, r19
     1cc:	73 03       	mulsu	r23, r19
     1ce:	73 03       	mulsu	r23, r19
     1d0:	73 03       	mulsu	r23, r19
     1d2:	73 03       	mulsu	r23, r19
     1d4:	73 03       	mulsu	r23, r19
     1d6:	73 03       	mulsu	r23, r19
     1d8:	5e 03       	fmul	r21, r22
     1da:	73 03       	mulsu	r23, r19
     1dc:	73 03       	mulsu	r23, r19
     1de:	73 03       	mulsu	r23, r19
     1e0:	73 03       	mulsu	r23, r19
     1e2:	73 03       	mulsu	r23, r19
     1e4:	73 03       	mulsu	r23, r19
     1e6:	73 03       	mulsu	r23, r19
     1e8:	b6 03       	fmuls	r19, r22
     1ea:	73 03       	mulsu	r23, r19
     1ec:	73 03       	mulsu	r23, r19
     1ee:	73 03       	mulsu	r23, r19
     1f0:	73 03       	mulsu	r23, r19
     1f2:	73 03       	mulsu	r23, r19
     1f4:	73 03       	mulsu	r23, r19
     1f6:	73 03       	mulsu	r23, r19
     1f8:	b6 03       	fmuls	r19, r22

000001fa <__trampolines_end>:
     1fa:	7b 20       	and	r7, r11
     1fc:	50 6c       	ori	r21, 0xC0	; 192
     1fe:	61 6e       	ori	r22, 0xE1	; 225
     200:	74 20       	and	r7, r4
     202:	20 53       	subi	r18, 0x30	; 48
     204:	61 76       	andi	r22, 0x61	; 97
     206:	65 72       	andi	r22, 0x25	; 37
     208:	20 7d       	andi	r18, 0xD0	; 208
	...

0000020b <__c.3009>:
     20b:	53 74 6f 70 3a 00                                   Stop:.

00000211 <__c.3007>:
     211:	53 74 61 72 74 3a 00                                Start:.

00000218 <__c.3005>:
     218:	42 61 63 6b 00                                      Back.

0000021d <__c.3003>:
     21d:	20 20 20 4c 69 67 68 74 20 4d 65 6e 75 20 20 20        Light Menu   
	...

0000022e <__c.2998>:
     22e:	20 6d 6c 00                                          ml.

00000232 <__c.2996>:
     232:	20 20 57 61 74 65 72 20 41 6d 6f 75 6e 74 20 20       Water Amount  
	...

00000243 <__c.2992>:
     243:	3a 20 4e 6f 20 77 61 74 65 72 00                    : No water.

0000024e <__c.2989>:
     24e:	3a 20 57 61 74 65 72 20 61 74 20 00                 : Water at .

0000025a <__c.2987>:
     25a:	42 61 63 6b 20 20 20 20 20 20 20 20 20 20 20 20     Back            
	...

0000026b <__c.2985>:
     26b:	20 57 61 74 65 72 20 53 63 68 65 64 75 6c 65 20      Water Schedule 
	...

0000027c <__c.2964>:
     27c:	20 20 20 20 20 20 20 20 20 20 20 42 61 63 6b 20                Back 
     28c:	20 00                                                .

0000028e <__c.2962>:
     28e:	2d 00                                               -.

00000290 <__c.2960>:
     290:	4c 3a 00                                            L:.

00000293 <__c.2958>:
     293:	4c 3a 20 6f 66 66 00                                L: off.

0000029a <__c.2956>:
     29a:	2f 2f 00                                            //.

0000029d <__c.2954>:
     29d:	57 3a 00                                            W:.

000002a0 <day_name>:
     2a0:	4d 6f 6e 00 00 00 00 54 75 65 00 00 00 00 57 65     Mon....Tue....We
     2b0:	64 00 00 00 00 54 68 75 00 00 00 00 46 72 69 00     d....Thu....Fri.
     2c0:	00 00 00 53 61 74 00 00 00 00 53 75 6e 00 00 00     ...Sat....Sun...
     2d0:	00 4d 6f 6e 00 00 00 00                             .Mon....

000002d8 <blank>:
     2d8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000002ea <__ctors_end>:
     2ea:	11 24       	eor	r1, r1
     2ec:	1f be       	out	0x3f, r1	; 63
     2ee:	cf ef       	ldi	r28, 0xFF	; 255
     2f0:	d8 e0       	ldi	r29, 0x08	; 8
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	cd bf       	out	0x3d, r28	; 61

000002f6 <__do_copy_data>:
     2f6:	11 e0       	ldi	r17, 0x01	; 1
     2f8:	a0 e0       	ldi	r26, 0x00	; 0
     2fa:	b1 e0       	ldi	r27, 0x01	; 1
     2fc:	e4 ec       	ldi	r30, 0xC4	; 196
     2fe:	fd e1       	ldi	r31, 0x1D	; 29
     300:	02 c0       	rjmp	.+4      	; 0x306 <__do_copy_data+0x10>
     302:	05 90       	lpm	r0, Z+
     304:	0d 92       	st	X+, r0
     306:	a4 31       	cpi	r26, 0x14	; 20
     308:	b1 07       	cpc	r27, r17
     30a:	d9 f7       	brne	.-10     	; 0x302 <__do_copy_data+0xc>

0000030c <__do_clear_bss>:
     30c:	22 e0       	ldi	r18, 0x02	; 2
     30e:	a4 e1       	ldi	r26, 0x14	; 20
     310:	b1 e0       	ldi	r27, 0x01	; 1
     312:	01 c0       	rjmp	.+2      	; 0x316 <.do_clear_bss_start>

00000314 <.do_clear_bss_loop>:
     314:	1d 92       	st	X+, r1

00000316 <.do_clear_bss_start>:
     316:	a9 32       	cpi	r26, 0x29	; 41
     318:	b2 07       	cpc	r27, r18
     31a:	e1 f7       	brne	.-8      	; 0x314 <.do_clear_bss_loop>
     31c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <main>
     320:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <_exit>

00000324 <__bad_interrupt>:
     324:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000328 <twi_readFrom.part.0>:
		uint8_t cur_hour, cur_min, cur_sec;
		rtc_get_time_s(&cur_hour, &cur_min, &cur_sec);

		if (cur_hour == hour && cur_min == min && cur_sec == sec)
			return true;
		return false;
     328:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <twi_state>
     32c:	91 11       	cpse	r25, r1
     32e:	fc cf       	rjmp	.-8      	; 0x328 <twi_readFrom.part.0>
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <twi_state>
     336:	9f ef       	ldi	r25, 0xFF	; 255
     338:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <twi_error>
     33c:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <twi_masterBufferIndex>
     340:	94 0f       	add	r25, r20
     342:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <twi_masterBufferLength>
     346:	88 0f       	add	r24, r24
     348:	81 60       	ori	r24, 0x01	; 1
     34a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <twi_slarw>
     34e:	85 ee       	ldi	r24, 0xE5	; 229
     350:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     354:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <twi_state>
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	e1 f3       	breq	.-8      	; 0x354 <twi_readFrom.part.0+0x2c>
     35c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <twi_masterBufferIndex>
     360:	84 17       	cp	r24, r20
     362:	10 f4       	brcc	.+4      	; 0x368 <twi_readFrom.part.0+0x40>
     364:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <twi_masterBufferIndex>
     368:	44 23       	and	r20, r20
     36a:	79 f0       	breq	.+30     	; 0x38a <twi_readFrom.part.0+0x62>
     36c:	ab e8       	ldi	r26, 0x8B	; 139
     36e:	b1 e0       	ldi	r27, 0x01	; 1
     370:	fb 01       	movw	r30, r22
     372:	2f ef       	ldi	r18, 0xFF	; 255
     374:	24 0f       	add	r18, r20
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	26 0f       	add	r18, r22
     37e:	37 1f       	adc	r19, r23
     380:	9d 91       	ld	r25, X+
     382:	91 93       	st	Z+, r25
     384:	e2 17       	cp	r30, r18
     386:	f3 07       	cpc	r31, r19
     388:	d9 f7       	brne	.-10     	; 0x380 <twi_readFrom.part.0+0x58>
     38a:	84 2f       	mov	r24, r20
     38c:	08 95       	ret

0000038e <lcd_write_nibble>:
     38e:	9b b1       	in	r25, 0x0b	; 11
     390:	80 ff       	sbrs	r24, 0
     392:	14 c0       	rjmp	.+40     	; 0x3bc <lcd_write_nibble+0x2e>
     394:	90 61       	ori	r25, 0x10	; 16
     396:	81 ff       	sbrs	r24, 1
     398:	14 c0       	rjmp	.+40     	; 0x3c2 <lcd_write_nibble+0x34>
     39a:	90 62       	ori	r25, 0x20	; 32
     39c:	82 ff       	sbrs	r24, 2
     39e:	14 c0       	rjmp	.+40     	; 0x3c8 <lcd_write_nibble+0x3a>
     3a0:	90 64       	ori	r25, 0x40	; 64
     3a2:	83 fd       	sbrc	r24, 3
     3a4:	14 c0       	rjmp	.+40     	; 0x3ce <lcd_write_nibble+0x40>
     3a6:	89 2f       	mov	r24, r25
     3a8:	8f 77       	andi	r24, 0x7F	; 127
     3aa:	8b b9       	out	0x0b, r24	; 11
     3ac:	5a 98       	cbi	0x0b, 2	; 11
     3ae:	5a 9a       	sbi	0x0b, 2	; 11
     3b0:	5a 98       	cbi	0x0b, 2	; 11
     3b2:	85 e8       	ldi	r24, 0x85	; 133
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_write_nibble+0x26>
     3b8:	00 00       	nop
     3ba:	08 95       	ret
     3bc:	9f 7e       	andi	r25, 0xEF	; 239
     3be:	81 fd       	sbrc	r24, 1
     3c0:	ec cf       	rjmp	.-40     	; 0x39a <lcd_write_nibble+0xc>
     3c2:	9f 7d       	andi	r25, 0xDF	; 223
     3c4:	82 fd       	sbrc	r24, 2
     3c6:	ec cf       	rjmp	.-40     	; 0x3a0 <lcd_write_nibble+0x12>
     3c8:	9f 7b       	andi	r25, 0xBF	; 191
     3ca:	83 ff       	sbrs	r24, 3
     3cc:	ec cf       	rjmp	.-40     	; 0x3a6 <lcd_write_nibble+0x18>
     3ce:	89 2f       	mov	r24, r25
     3d0:	80 68       	ori	r24, 0x80	; 128
     3d2:	eb cf       	rjmp	.-42     	; 0x3aa <lcd_write_nibble+0x1c>

000003d4 <lcd_send>:
     3d4:	cf 93       	push	r28
     3d6:	c8 2f       	mov	r28, r24
     3d8:	61 11       	cpse	r22, r1
     3da:	0b c0       	rjmp	.+22     	; 0x3f2 <lcd_send+0x1e>
     3dc:	58 98       	cbi	0x0b, 0	; 11
     3de:	59 98       	cbi	0x0b, 1	; 11
     3e0:	8c 2f       	mov	r24, r28
     3e2:	82 95       	swap	r24
     3e4:	8f 70       	andi	r24, 0x0F	; 15
     3e6:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_write_nibble>
     3ea:	8c 2f       	mov	r24, r28
     3ec:	cf 91       	pop	r28
     3ee:	0c 94 c7 01 	jmp	0x38e	; 0x38e <lcd_write_nibble>
     3f2:	58 9a       	sbi	0x0b, 0	; 11
     3f4:	f4 cf       	rjmp	.-24     	; 0x3de <lcd_send+0xa>

000003f6 <lcd_on>:
     3f6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <lcd_displayparams>
     3fa:	98 2f       	mov	r25, r24
     3fc:	94 60       	ori	r25, 0x04	; 4
     3fe:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <lcd_displayparams>
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	8c 60       	ori	r24, 0x0C	; 12
     406:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <lcd_send>

0000040a <lcd_init>:
     40a:	8a b1       	in	r24, 0x0a	; 10
     40c:	87 6f       	ori	r24, 0xF7	; 247
     40e:	8a b9       	out	0x0a, r24	; 10
     410:	8f e3       	ldi	r24, 0x3F	; 63
     412:	9c e9       	ldi	r25, 0x9C	; 156
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <lcd_init+0xa>
     418:	00 c0       	rjmp	.+0      	; 0x41a <lcd_init+0x10>
     41a:	00 00       	nop
     41c:	8b b1       	in	r24, 0x0b	; 11
     41e:	88 7f       	andi	r24, 0xF8	; 248
     420:	8b b9       	out	0x0b, r24	; 11
     422:	8f e0       	ldi	r24, 0x0F	; 15
     424:	97 e2       	ldi	r25, 0x27	; 39
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <lcd_init+0x1c>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <lcd_init+0x22>
     42c:	00 00       	nop
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_write_nibble>
     434:	8f e0       	ldi	r24, 0x0F	; 15
     436:	97 e2       	ldi	r25, 0x27	; 39
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <lcd_init+0x2e>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <lcd_init+0x34>
     43e:	00 00       	nop
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_write_nibble>
     446:	8f e0       	ldi	r24, 0x0F	; 15
     448:	97 e2       	ldi	r25, 0x27	; 39
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <lcd_init+0x40>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <lcd_init+0x46>
     450:	00 00       	nop
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_write_nibble>
     458:	8f e0       	ldi	r24, 0x0F	; 15
     45a:	97 e2       	ldi	r25, 0x27	; 39
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0x52>
     460:	00 c0       	rjmp	.+0      	; 0x462 <lcd_init+0x58>
     462:	00 00       	nop
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_write_nibble>
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	88 e2       	ldi	r24, 0x28	; 40
     46e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     472:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <lcd_displayparams>
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	88 e0       	ldi	r24, 0x08	; 8
     47a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	88 e0       	ldi	r24, 0x08	; 8
     482:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     49e:	8f e9       	ldi	r24, 0x9F	; 159
     4a0:	9f e0       	ldi	r25, 0x0F	; 15
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <lcd_init+0x98>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <lcd_init+0x9e>
     4a8:	00 00       	nop
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     4b2:	8f e9       	ldi	r24, 0x9F	; 159
     4b4:	9f e0       	ldi	r25, 0x0F	; 15
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_init+0xac>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <lcd_init+0xb2>
     4bc:	00 00       	nop
     4be:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <lcd_on>

000004c2 <lcd_off>:
     4c2:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <lcd_displayparams>
     4c6:	8b 7f       	andi	r24, 0xFB	; 251
     4c8:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <lcd_displayparams>
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	88 60       	ori	r24, 0x08	; 8
     4d0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <lcd_send>

000004d4 <lcd_enable_blinking>:
     4d4:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <lcd_displayparams>
     4d8:	98 2f       	mov	r25, r24
     4da:	91 60       	ori	r25, 0x01	; 1
     4dc:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <lcd_displayparams>
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	89 60       	ori	r24, 0x09	; 9
     4e4:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <lcd_send>

000004e8 <lcd_disable_blinking>:
     4e8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <lcd_displayparams>
     4ec:	8e 7f       	andi	r24, 0xFE	; 254
     4ee:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <lcd_displayparams>
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	88 60       	ori	r24, 0x08	; 8
     4f6:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <lcd_send>

000004fa <lcd_enable_cursor>:
     4fa:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <lcd_displayparams>
     4fe:	98 2f       	mov	r25, r24
     500:	92 60       	ori	r25, 0x02	; 2
     502:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <lcd_displayparams>
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	8a 60       	ori	r24, 0x0A	; 10
     50a:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <lcd_send>

0000050e <lcd_disable_cursor>:
     50e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <lcd_displayparams>
     512:	8d 7f       	andi	r24, 0xFD	; 253
     514:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <lcd_displayparams>
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	88 60       	ori	r24, 0x08	; 8
     51c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <lcd_send>

00000520 <lcd_puts_P>:
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
     52a:	fc 01       	movw	r30, r24
     52c:	84 91       	lpm	r24, Z
     52e:	88 23       	and	r24, r24
     530:	81 f0       	breq	.+32     	; 0x552 <lcd_puts_P+0x32>
     532:	8e 01       	movw	r16, r28
     534:	00 5f       	subi	r16, 0xF0	; 240
     536:	1f 4f       	sbci	r17, 0xFF	; 255
     538:	fe 01       	movw	r30, r28
     53a:	21 96       	adiw	r28, 0x01	; 1
     53c:	84 91       	lpm	r24, Z
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     544:	fe 01       	movw	r30, r28
     546:	84 91       	lpm	r24, Z
     548:	88 23       	and	r24, r24
     54a:	19 f0       	breq	.+6      	; 0x552 <lcd_puts_P+0x32>
     54c:	c0 17       	cp	r28, r16
     54e:	d1 07       	cpc	r29, r17
     550:	99 f7       	brne	.-26     	; 0x538 <lcd_puts_P+0x18>
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	08 95       	ret

0000055c <lcd_clear_f>:
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	80 ec       	ldi	r24, 0xC0	; 192
     560:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     564:	88 ed       	ldi	r24, 0xD8	; 216
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	80 e8       	ldi	r24, 0x80	; 128
     570:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     574:	88 ed       	ldi	r24, 0xD8	; 216
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0c 94 90 02 	jmp	0x520	; 0x520 <lcd_puts_P>

0000057c <lcd_clear_top>:
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	80 e8       	ldi	r24, 0x80	; 128
     580:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
     584:	88 ed       	ldi	r24, 0xD8	; 216
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0c 94 90 02 	jmp	0x520	; 0x520 <lcd_puts_P>

0000058c <twi_writeTo>:
     58c:	41 32       	cpi	r20, 0x21	; 33
     58e:	d8 f5       	brcc	.+118    	; 0x606 <twi_writeTo+0x7a>
     590:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <twi_state>
     594:	31 11       	cpse	r19, r1
     596:	fc cf       	rjmp	.-8      	; 0x590 <twi_writeTo+0x4>
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <twi_state>
     59e:	9f ef       	ldi	r25, 0xFF	; 255
     5a0:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <twi_error>
     5a4:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <twi_masterBufferIndex>
     5a8:	40 93 89 01 	sts	0x0189, r20	; 0x800189 <twi_masterBufferLength>
     5ac:	44 23       	and	r20, r20
     5ae:	71 f0       	breq	.+28     	; 0x5cc <twi_writeTo+0x40>
     5b0:	fb 01       	movw	r30, r22
     5b2:	ab e8       	ldi	r26, 0x8B	; 139
     5b4:	b1 e0       	ldi	r27, 0x01	; 1
     5b6:	41 50       	subi	r20, 0x01	; 1
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	4f 5f       	subi	r20, 0xFF	; 255
     5bc:	5f 4f       	sbci	r21, 0xFF	; 255
     5be:	46 0f       	add	r20, r22
     5c0:	57 1f       	adc	r21, r23
     5c2:	91 91       	ld	r25, Z+
     5c4:	9d 93       	st	X+, r25
     5c6:	e4 17       	cp	r30, r20
     5c8:	f5 07       	cpc	r31, r21
     5ca:	d9 f7       	brne	.-10     	; 0x5c2 <twi_writeTo+0x36>
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <twi_slarw>
     5d6:	85 ee       	ldi	r24, 0xE5	; 229
     5d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5dc:	22 23       	and	r18, r18
     5de:	21 f0       	breq	.+8      	; 0x5e8 <twi_writeTo+0x5c>
     5e0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <twi_state>
     5e4:	82 30       	cpi	r24, 0x02	; 2
     5e6:	e1 f3       	breq	.-8      	; 0x5e0 <twi_writeTo+0x54>
     5e8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <twi_error>
     5ec:	8f 3f       	cpi	r24, 0xFF	; 255
     5ee:	49 f0       	breq	.+18     	; 0x602 <twi_writeTo+0x76>
     5f0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <twi_error>
     5f4:	80 32       	cpi	r24, 0x20	; 32
     5f6:	51 f0       	breq	.+20     	; 0x60c <twi_writeTo+0x80>
     5f8:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <twi_error>
     5fc:	80 33       	cpi	r24, 0x30	; 48
     5fe:	49 f0       	breq	.+18     	; 0x612 <twi_writeTo+0x86>
     600:	34 e0       	ldi	r19, 0x04	; 4
     602:	83 2f       	mov	r24, r19
     604:	08 95       	ret
     606:	31 e0       	ldi	r19, 0x01	; 1
     608:	83 2f       	mov	r24, r19
     60a:	08 95       	ret
     60c:	32 e0       	ldi	r19, 0x02	; 2
     60e:	83 2f       	mov	r24, r19
     610:	08 95       	ret
     612:	33 e0       	ldi	r19, 0x03	; 3
     614:	f6 cf       	rjmp	.-20     	; 0x602 <twi_writeTo+0x76>

00000616 <twi_transmit>:
     616:	61 32       	cpi	r22, 0x21	; 33
     618:	30 f4       	brcc	.+12     	; 0x626 <twi_transmit+0x10>
     61a:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <twi_state>
     61e:	24 30       	cpi	r18, 0x04	; 4
     620:	21 f0       	breq	.+8      	; 0x62a <twi_transmit+0x14>
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	08 95       	ret
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	08 95       	ret
     62a:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <twi_txBufferLength>
     62e:	66 23       	and	r22, r22
     630:	79 f0       	breq	.+30     	; 0x650 <twi_transmit+0x3a>
     632:	fc 01       	movw	r30, r24
     634:	a9 e6       	ldi	r26, 0x69	; 105
     636:	b1 e0       	ldi	r27, 0x01	; 1
     638:	61 50       	subi	r22, 0x01	; 1
     63a:	26 2f       	mov	r18, r22
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	2f 5f       	subi	r18, 0xFF	; 255
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	28 0f       	add	r18, r24
     644:	39 1f       	adc	r19, r25
     646:	81 91       	ld	r24, Z+
     648:	8d 93       	st	X+, r24
     64a:	e2 17       	cp	r30, r18
     64c:	f3 07       	cpc	r31, r19
     64e:	d9 f7       	brne	.-10     	; 0x646 <twi_transmit+0x30>
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	08 95       	ret

00000654 <__vector_24>:
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	2f 93       	push	r18
     660:	3f 93       	push	r19
     662:	4f 93       	push	r20
     664:	5f 93       	push	r21
     666:	6f 93       	push	r22
     668:	7f 93       	push	r23
     66a:	8f 93       	push	r24
     66c:	9f 93       	push	r25
     66e:	af 93       	push	r26
     670:	bf 93       	push	r27
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
     676:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     67a:	e8 2f       	mov	r30, r24
     67c:	e8 7f       	andi	r30, 0xF8	; 248
     67e:	8e 2f       	mov	r24, r30
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	89 3c       	cpi	r24, 0xC9	; 201
     684:	91 05       	cpc	r25, r1
     686:	78 f5       	brcc	.+94     	; 0x6e6 <__vector_24+0x92>
     688:	fc 01       	movw	r30, r24
     68a:	ec 5c       	subi	r30, 0xCC	; 204
     68c:	ff 4f       	sbci	r31, 0xFF	; 255
     68e:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__tablejump2__>
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <twi_state>
     698:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <twi_txBufferIndex>
     69c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <twi_txBufferLength>
     6a0:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <twi_onSlaveTransmit>
     6a4:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <twi_onSlaveTransmit+0x1>
     6a8:	09 95       	icall
     6aa:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <twi_txBufferLength>
     6ae:	81 11       	cpse	r24, r1
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <__vector_24+0x68>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <twi_txBufferLength>
     6b8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <twi_txBuffer>
     6bc:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <twi_txBufferIndex>
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	8e 0f       	add	r24, r30
     6c4:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <twi_txBufferIndex>
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	e7 59       	subi	r30, 0x97	; 151
     6cc:	fe 4f       	sbci	r31, 0xFE	; 254
     6ce:	80 81       	ld	r24, Z
     6d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6d4:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <twi_txBufferIndex>
     6d8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <twi_txBufferLength>
     6dc:	98 17       	cp	r25, r24
     6de:	c8 f4       	brcc	.+50     	; 0x712 <__vector_24+0xbe>
     6e0:	85 ec       	ldi	r24, 0xC5	; 197
     6e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6e6:	ff 91       	pop	r31
     6e8:	ef 91       	pop	r30
     6ea:	bf 91       	pop	r27
     6ec:	af 91       	pop	r26
     6ee:	9f 91       	pop	r25
     6f0:	8f 91       	pop	r24
     6f2:	7f 91       	pop	r23
     6f4:	6f 91       	pop	r22
     6f6:	5f 91       	pop	r21
     6f8:	4f 91       	pop	r20
     6fa:	3f 91       	pop	r19
     6fc:	2f 91       	pop	r18
     6fe:	0f 90       	pop	r0
     700:	0f be       	out	0x3f, r0	; 63
     702:	0f 90       	pop	r0
     704:	1f 90       	pop	r1
     706:	18 95       	reti
     708:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <twi_rxBufferIndex>
     70c:	80 32       	cpi	r24, 0x20	; 32
     70e:	08 f4       	brcc	.+2      	; 0x712 <__vector_24+0xbe>
     710:	9c c0       	rjmp	.+312    	; 0x84a <__vector_24+0x1f6>
     712:	85 e8       	ldi	r24, 0x85	; 133
     714:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     718:	e6 cf       	rjmp	.-52     	; 0x6e6 <__vector_24+0x92>
     71a:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <twi_masterBufferIndex>
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	8e 0f       	add	r24, r30
     722:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <twi_masterBufferIndex>
     726:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	e5 57       	subi	r30, 0x75	; 117
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	80 83       	st	Z, r24
     732:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <twi_masterBufferIndex>
     736:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <twi_masterBufferLength>
     73a:	98 17       	cp	r25, r24
     73c:	50 f7       	brcc	.-44     	; 0x712 <__vector_24+0xbe>
     73e:	d0 cf       	rjmp	.-96     	; 0x6e0 <__vector_24+0x8c>
     740:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <twi_masterBufferIndex>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	8e 0f       	add	r24, r30
     748:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <twi_masterBufferIndex>
     74c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	e5 57       	subi	r30, 0x75	; 117
     754:	fe 4f       	sbci	r31, 0xFE	; 254
     756:	80 83       	st	Z, r24
     758:	85 ed       	ldi	r24, 0xD5	; 213
     75a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     75e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     762:	84 fd       	sbrc	r24, 4
     764:	fc cf       	rjmp	.-8      	; 0x75e <__vector_24+0x10a>
     766:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <twi_state>
     76a:	bd cf       	rjmp	.-134    	; 0x6e6 <__vector_24+0x92>
     76c:	85 ec       	ldi	r24, 0xC5	; 197
     76e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     772:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <twi_state>
     776:	b7 cf       	rjmp	.-146    	; 0x6e6 <__vector_24+0x92>
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <twi_state>
     77e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <twi_rxBufferIndex>
     782:	85 ec       	ldi	r24, 0xC5	; 197
     784:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     788:	ae cf       	rjmp	.-164    	; 0x6e6 <__vector_24+0x92>
     78a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <twi_error>
     78e:	85 ed       	ldi	r24, 0xD5	; 213
     790:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     794:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     798:	84 fd       	sbrc	r24, 4
     79a:	fc cf       	rjmp	.-8      	; 0x794 <__vector_24+0x140>
     79c:	e4 cf       	rjmp	.-56     	; 0x766 <__vector_24+0x112>
     79e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <twi_slarw>
     7a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     7a6:	85 ec       	ldi	r24, 0xC5	; 197
     7a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7ac:	9c cf       	rjmp	.-200    	; 0x6e6 <__vector_24+0x92>
     7ae:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <twi_masterBufferIndex>
     7b2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <twi_masterBufferLength>
     7b6:	98 17       	cp	r25, r24
     7b8:	08 f4       	brcc	.+2      	; 0x7bc <__vector_24+0x168>
     7ba:	5e c0       	rjmp	.+188    	; 0x878 <__vector_24+0x224>
     7bc:	85 ed       	ldi	r24, 0xD5	; 213
     7be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7c6:	84 fd       	sbrc	r24, 4
     7c8:	fc cf       	rjmp	.-8      	; 0x7c2 <__vector_24+0x16e>
     7ca:	cd cf       	rjmp	.-102    	; 0x766 <__vector_24+0x112>
     7cc:	80 e2       	ldi	r24, 0x20	; 32
     7ce:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <twi_error>
     7d2:	85 ed       	ldi	r24, 0xD5	; 213
     7d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7dc:	84 fd       	sbrc	r24, 4
     7de:	fc cf       	rjmp	.-8      	; 0x7d8 <__vector_24+0x184>
     7e0:	c2 cf       	rjmp	.-124    	; 0x766 <__vector_24+0x112>
     7e2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <twi_rxBufferIndex>
     7e6:	80 32       	cpi	r24, 0x20	; 32
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <__vector_24+0x198>
     7ea:	3f c0       	rjmp	.+126    	; 0x86a <__vector_24+0x216>
     7ec:	85 ed       	ldi	r24, 0xD5	; 213
     7ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7f6:	84 fd       	sbrc	r24, 4
     7f8:	fc cf       	rjmp	.-8      	; 0x7f2 <__vector_24+0x19e>
     7fa:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <twi_state>
     7fe:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <twi_rxBufferIndex>
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <twi_onSlaveReceive>
     808:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <twi_onSlaveReceive+0x1>
     80c:	87 e4       	ldi	r24, 0x47	; 71
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	09 95       	icall
     812:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <twi_rxBufferIndex>
     816:	85 ec       	ldi	r24, 0xC5	; 197
     818:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     81c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <twi_state>
     820:	62 cf       	rjmp	.-316    	; 0x6e6 <__vector_24+0x92>
     822:	80 e3       	ldi	r24, 0x30	; 48
     824:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <twi_error>
     828:	85 ed       	ldi	r24, 0xD5	; 213
     82a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     82e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     832:	84 fd       	sbrc	r24, 4
     834:	fc cf       	rjmp	.-8      	; 0x82e <__vector_24+0x1da>
     836:	97 cf       	rjmp	.-210    	; 0x766 <__vector_24+0x112>
     838:	88 e3       	ldi	r24, 0x38	; 56
     83a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <twi_error>
     83e:	85 ec       	ldi	r24, 0xC5	; 197
     840:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     844:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <twi_state>
     848:	4e cf       	rjmp	.-356    	; 0x6e6 <__vector_24+0x92>
     84a:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <twi_rxBufferIndex>
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	8e 0f       	add	r24, r30
     852:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <twi_rxBufferIndex>
     856:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	e9 5b       	subi	r30, 0xB9	; 185
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	80 83       	st	Z, r24
     862:	85 ec       	ldi	r24, 0xC5	; 197
     864:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     868:	3e cf       	rjmp	.-388    	; 0x6e6 <__vector_24+0x92>
     86a:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <twi_rxBufferIndex>
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	e9 5b       	subi	r30, 0xB9	; 185
     872:	fe 4f       	sbci	r31, 0xFE	; 254
     874:	10 82       	st	Z, r1
     876:	ba cf       	rjmp	.-140    	; 0x7ec <__vector_24+0x198>
     878:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <twi_masterBufferIndex>
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	8e 0f       	add	r24, r30
     880:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <twi_masterBufferIndex>
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	e5 57       	subi	r30, 0x75	; 117
     888:	fe 4f       	sbci	r31, 0xFE	; 254
     88a:	80 81       	ld	r24, Z
     88c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     890:	85 ec       	ldi	r24, 0xC5	; 197
     892:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     896:	27 cf       	rjmp	.-434    	; 0x6e6 <__vector_24+0x92>

00000898 <twi_request_from>:
     898:	46 2f       	mov	r20, r22
     89a:	61 32       	cpi	r22, 0x21	; 33
     89c:	08 f0       	brcs	.+2      	; 0x8a0 <twi_request_from+0x8>
     89e:	40 e2       	ldi	r20, 0x20	; 32
     8a0:	65 ec       	ldi	r22, 0xC5	; 197
     8a2:	71 e0       	ldi	r23, 0x01	; 1
     8a4:	0e 94 94 01 	call	0x328	; 0x328 <twi_readFrom.part.0>
     8a8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <rxBufferIndex>
     8ac:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rxBufferLength>
     8b0:	08 95       	ret

000008b2 <twi_end_transmission>:
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <txBufferLength>
     8b8:	66 ef       	ldi	r22, 0xF6	; 246
     8ba:	71 e0       	ldi	r23, 0x01	; 1
     8bc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <txAddress>
     8c0:	0e 94 c6 02 	call	0x58c	; 0x58c <twi_writeTo>
     8c4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <txBufferIndex>
     8c8:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <txBufferLength>
     8cc:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <transmitting>
     8d0:	08 95       	ret

000008d2 <twi_send_byte>:
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	1f 92       	push	r1
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <transmitting>
     8e2:	88 23       	and	r24, r24
     8e4:	c9 f0       	breq	.+50     	; 0x918 <__stack+0x19>
     8e6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <txBufferLength>
     8ea:	80 32       	cpi	r24, 0x20	; 32
     8ec:	20 f0       	brcs	.+8      	; 0x8f6 <twi_send_byte+0x24>
     8ee:	0f 90       	pop	r0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret
     8f6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <txBufferIndex>
     8fa:	e8 2f       	mov	r30, r24
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	ea 50       	subi	r30, 0x0A	; 10
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	99 81       	ldd	r25, Y+1	; 0x01
     904:	90 83       	st	Z, r25
     906:	8f 5f       	subi	r24, 0xFF	; 255
     908:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <txBufferIndex>
     90c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <txBufferLength>
     910:	0f 90       	pop	r0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	0e 94 0b 03 	call	0x616	; 0x616 <twi_transmit>
     922:	0f 90       	pop	r0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <rtc_read_byte>:
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <transmitting>
     930:	98 e6       	ldi	r25, 0x68	; 104
     932:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <txAddress>
     936:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <txBufferIndex>
     93a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <txBufferLength>
     93e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     942:	0e 94 59 04 	call	0x8b2	; 0x8b2 <twi_end_transmission>
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	88 e6       	ldi	r24, 0x68	; 104
     94a:	0e 94 4c 04 	call	0x898	; 0x898 <twi_request_from>
     94e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <rxBufferIndex>
     952:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rxBufferLength>
     956:	98 17       	cp	r25, r24
     958:	48 f4       	brcc	.+18     	; 0x96c <rtc_read_byte+0x42>
     95a:	e9 2f       	mov	r30, r25
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	eb 53       	subi	r30, 0x3B	; 59
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	80 81       	ld	r24, Z
     964:	9f 5f       	subi	r25, 0xFF	; 255
     966:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <rxBufferIndex>
     96a:	08 95       	ret
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	08 95       	ret

00000970 <rtc_write_byte>:
     970:	cf 93       	push	r28
     972:	c8 2f       	mov	r28, r24
     974:	86 2f       	mov	r24, r22
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <transmitting>
     97c:	98 e6       	ldi	r25, 0x68	; 104
     97e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <txAddress>
     982:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <txBufferIndex>
     986:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <txBufferLength>
     98a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     98e:	8c 2f       	mov	r24, r28
     990:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     994:	cf 91       	pop	r28
     996:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <twi_end_transmission>

0000099a <rtc_init>:
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	81 e1       	ldi	r24, 0x11	; 17
     9a0:	0e 94 95 04 	call	0x92a	; 0x92a <rtc_read_byte>
     9a4:	d8 2f       	mov	r29, r24
     9a6:	82 e1       	ldi	r24, 0x12	; 18
     9a8:	0e 94 95 04 	call	0x92a	; 0x92a <rtc_read_byte>
     9ac:	c8 2f       	mov	r28, r24
     9ae:	61 e1       	ldi	r22, 0x11	; 17
     9b0:	8e ee       	ldi	r24, 0xEE	; 238
     9b2:	0e 94 b8 04 	call	0x970	; 0x970 <rtc_write_byte>
     9b6:	62 e1       	ldi	r22, 0x12	; 18
     9b8:	8d ed       	ldi	r24, 0xDD	; 221
     9ba:	0e 94 b8 04 	call	0x970	; 0x970 <rtc_write_byte>
     9be:	81 e1       	ldi	r24, 0x11	; 17
     9c0:	0e 94 95 04 	call	0x92a	; 0x92a <rtc_read_byte>
     9c4:	8e 3e       	cpi	r24, 0xEE	; 238
     9c6:	31 f0       	breq	.+12     	; 0x9d4 <rtc_init+0x3a>
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <s_is_ds3231>
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret
     9d4:	82 e1       	ldi	r24, 0x12	; 18
     9d6:	0e 94 95 04 	call	0x92a	; 0x92a <rtc_read_byte>
     9da:	8d 3d       	cpi	r24, 0xDD	; 221
     9dc:	a9 f7       	brne	.-22     	; 0x9c8 <rtc_init+0x2e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <s_is_ds1307>
     9e4:	61 e1       	ldi	r22, 0x11	; 17
     9e6:	8d 2f       	mov	r24, r29
     9e8:	0e 94 b8 04 	call	0x970	; 0x970 <rtc_write_byte>
     9ec:	62 e1       	ldi	r22, 0x12	; 18
     9ee:	8c 2f       	mov	r24, r28
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	0c 94 b8 04 	jmp	0x970	; 0x970 <rtc_write_byte>

000009f8 <rtc_get_time>:
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	29 97       	sbiw	r28, 0x09	; 9
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <transmitting>
     a12:	88 e6       	ldi	r24, 0x68	; 104
     a14:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <txAddress>
     a18:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <txBufferIndex>
     a1c:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <txBufferLength>
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     a26:	0e 94 59 04 	call	0x8b2	; 0x8b2 <twi_end_transmission>
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	88 e6       	ldi	r24, 0x68	; 104
     a2e:	0e 94 4c 04 	call	0x898	; 0x898 <twi_request_from>
     a32:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <rxBufferLength>
     a36:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <rxBufferIndex>
     a3a:	fe 01       	movw	r30, r28
     a3c:	31 96       	adiw	r30, 0x01	; 1
     a3e:	9e 01       	movw	r18, r28
     a40:	28 5f       	subi	r18, 0xF8	; 248
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	0a c0       	rjmp	.+20     	; 0xa5a <rtc_get_time+0x62>
     a46:	a8 2f       	mov	r26, r24
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	ab 53       	subi	r26, 0x3B	; 59
     a4c:	be 4f       	sbci	r27, 0xFE	; 254
     a4e:	9c 91       	ld	r25, X
     a50:	8f 5f       	subi	r24, 0xFF	; 255
     a52:	91 93       	st	Z+, r25
     a54:	e2 17       	cp	r30, r18
     a56:	f3 07       	cpc	r31, r19
     a58:	39 f0       	breq	.+14     	; 0xa68 <rtc_get_time+0x70>
     a5a:	84 17       	cp	r24, r20
     a5c:	a0 f3       	brcs	.-24     	; 0xa46 <rtc_get_time+0x4e>
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	91 93       	st	Z+, r25
     a62:	e2 17       	cp	r30, r18
     a64:	f3 07       	cpc	r31, r19
     a66:	c9 f7       	brne	.-14     	; 0xa5a <rtc_get_time+0x62>
     a68:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <rxBufferIndex>
     a6c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <twi_end_transmission>
     a70:	99 81       	ldd	r25, Y+1	; 0x01
     a72:	89 2f       	mov	r24, r25
     a74:	86 95       	lsr	r24
     a76:	86 95       	lsr	r24
     a78:	86 95       	lsr	r24
     a7a:	8e 70       	andi	r24, 0x0E	; 14
     a7c:	28 2f       	mov	r18, r24
     a7e:	22 0f       	add	r18, r18
     a80:	22 0f       	add	r18, r18
     a82:	82 0f       	add	r24, r18
     a84:	9f 70       	andi	r25, 0x0F	; 15
     a86:	98 0f       	add	r25, r24
     a88:	89 2f       	mov	r24, r25
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_tm+0x1>
     a90:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_tm>
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	98 2f       	mov	r25, r24
     a98:	92 95       	swap	r25
     a9a:	9f 70       	andi	r25, 0x0F	; 15
     a9c:	8f 70       	andi	r24, 0x0F	; 15
     a9e:	2a e0       	ldi	r18, 0x0A	; 10
     aa0:	92 9f       	mul	r25, r18
     aa2:	80 0d       	add	r24, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <_tm+0x3>
     aac:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <_tm+0x2>
     ab0:	4b 81       	ldd	r20, Y+3	; 0x03
     ab2:	84 2f       	mov	r24, r20
     ab4:	82 95       	swap	r24
     ab6:	8f 70       	andi	r24, 0x0F	; 15
     ab8:	4f 70       	andi	r20, 0x0F	; 15
     aba:	5a e0       	ldi	r21, 0x0A	; 10
     abc:	85 9f       	mul	r24, r21
     abe:	40 0d       	add	r20, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	24 2f       	mov	r18, r20
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	30 93 1b 02 	sts	0x021B, r19	; 0x80021b <_tm+0x5>
     aca:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <_tm+0x4>
     ace:	8d 81       	ldd	r24, Y+5	; 0x05
     ad0:	98 2f       	mov	r25, r24
     ad2:	92 95       	swap	r25
     ad4:	9f 70       	andi	r25, 0x0F	; 15
     ad6:	8f 70       	andi	r24, 0x0F	; 15
     ad8:	5a e0       	ldi	r21, 0x0A	; 10
     ada:	95 9f       	mul	r25, r21
     adc:	80 0d       	add	r24, r0
     ade:	11 24       	eor	r1, r1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_tm+0x7>
     ae6:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_tm+0x6>
     aea:	5e 81       	ldd	r21, Y+6	; 0x06
     aec:	54 fb       	bst	r21, 4
     aee:	88 27       	eor	r24, r24
     af0:	80 f9       	bld	r24, 0
     af2:	88 0f       	add	r24, r24
     af4:	98 2f       	mov	r25, r24
     af6:	99 0f       	add	r25, r25
     af8:	99 0f       	add	r25, r25
     afa:	89 0f       	add	r24, r25
     afc:	95 2f       	mov	r25, r21
     afe:	9f 70       	andi	r25, 0x0F	; 15
     b00:	89 0f       	add	r24, r25
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_tm+0x9>
     b08:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_tm+0x8>
     b0c:	8f 81       	ldd	r24, Y+7	; 0x07
     b0e:	98 2f       	mov	r25, r24
     b10:	92 95       	swap	r25
     b12:	9f 70       	andi	r25, 0x0F	; 15
     b14:	8f 70       	andi	r24, 0x0F	; 15
     b16:	57 fd       	sbrc	r21, 7
     b18:	40 c0       	rjmp	.+128    	; 0xb9a <rtc_get_time+0x1a2>
     b1a:	5a e0       	ldi	r21, 0x0A	; 10
     b1c:	95 9f       	mul	r25, r21
     b1e:	80 0d       	add	r24, r0
     b20:	11 24       	eor	r1, r1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	84 59       	subi	r24, 0x94	; 148
     b26:	98 4f       	sbci	r25, 0xF8	; 248
     b28:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <_tm+0xb>
     b2c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_tm+0xa>
     b30:	8c 81       	ldd	r24, Y+4	; 0x04
     b32:	98 2f       	mov	r25, r24
     b34:	92 95       	swap	r25
     b36:	9f 70       	andi	r25, 0x0F	; 15
     b38:	8f 70       	andi	r24, 0x0F	; 15
     b3a:	5a e0       	ldi	r21, 0x0A	; 10
     b3c:	95 9f       	mul	r25, r21
     b3e:	80 0d       	add	r24, r0
     b40:	11 24       	eor	r1, r1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <_tm+0xd>
     b48:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_tm+0xc>
     b4c:	44 23       	and	r20, r20
     b4e:	e9 f0       	breq	.+58     	; 0xb8a <rtc_get_time+0x192>
     b50:	4c 30       	cpi	r20, 0x0C	; 12
     b52:	98 f0       	brcs	.+38     	; 0xb7a <rtc_get_time+0x182>
     b54:	2c 50       	subi	r18, 0x0C	; 12
     b56:	31 09       	sbc	r19, r1
     b58:	30 93 26 02 	sts	0x0226, r19	; 0x800226 <_tm+0x10>
     b5c:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <_tm+0xf>
     b60:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <_tm+0xe>
     b64:	86 e1       	ldi	r24, 0x16	; 22
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	29 96       	adiw	r28, 0x09	; 9
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret
     b7a:	30 93 26 02 	sts	0x0226, r19	; 0x800226 <_tm+0x10>
     b7e:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <_tm+0xf>
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_tm+0xe>
     b88:	ed cf       	rjmp	.-38     	; 0xb64 <rtc_get_time+0x16c>
     b8a:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <_tm+0x10>
     b8e:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <_tm+0xf>
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <_tm+0xe>
     b98:	e5 cf       	rjmp	.-54     	; 0xb64 <rtc_get_time+0x16c>
     b9a:	5a e0       	ldi	r21, 0x0A	; 10
     b9c:	95 9f       	mul	r25, r21
     b9e:	80 0d       	add	r24, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	80 53       	subi	r24, 0x30	; 48
     ba6:	98 4f       	sbci	r25, 0xF8	; 248
     ba8:	bf cf       	rjmp	.-130    	; 0xb28 <rtc_get_time+0x130>

00000baa <rtc_set_time>:
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	8c 01       	movw	r16, r24
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <transmitting>
     bba:	88 e6       	ldi	r24, 0x68	; 104
     bbc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <txAddress>
     bc0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <txBufferIndex>
     bc4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <txBufferLength>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     bce:	f8 01       	movw	r30, r16
     bd0:	82 85       	ldd	r24, Z+10	; 0x0a
     bd2:	93 85       	ldd	r25, Z+11	; 0x0b
     bd4:	81 3d       	cpi	r24, 0xD1	; 209
     bd6:	f7 e0       	ldi	r31, 0x07	; 7
     bd8:	9f 07       	cpc	r25, r31
     bda:	0c f0       	brlt	.+2      	; 0xbde <rtc_set_time+0x34>
     bdc:	71 c0       	rjmp	.+226    	; 0xcc0 <rtc_set_time+0x116>
     bde:	8c 56       	subi	r24, 0x6C	; 108
     be0:	97 40       	sbci	r25, 0x07	; 7
     be2:	f8 01       	movw	r30, r16
     be4:	93 87       	std	Z+11, r25	; 0x0b
     be6:	82 87       	std	Z+10, r24	; 0x0a
     be8:	d0 e0       	ldi	r29, 0x00	; 0
     bea:	f8 01       	movw	r30, r16
     bec:	80 81       	ld	r24, Z
     bee:	cd ec       	ldi	r28, 0xCD	; 205
     bf0:	8c 9f       	mul	r24, r28
     bf2:	91 2d       	mov	r25, r1
     bf4:	11 24       	eor	r1, r1
     bf6:	96 95       	lsr	r25
     bf8:	96 95       	lsr	r25
     bfa:	96 95       	lsr	r25
     bfc:	f6 e0       	ldi	r31, 0x06	; 6
     bfe:	9f 9f       	mul	r25, r31
     c00:	80 0d       	add	r24, r0
     c02:	11 24       	eor	r1, r1
     c04:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     c08:	f8 01       	movw	r30, r16
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	8c 9f       	mul	r24, r28
     c0e:	91 2d       	mov	r25, r1
     c10:	11 24       	eor	r1, r1
     c12:	96 95       	lsr	r25
     c14:	96 95       	lsr	r25
     c16:	96 95       	lsr	r25
     c18:	f6 e0       	ldi	r31, 0x06	; 6
     c1a:	9f 9f       	mul	r25, r31
     c1c:	80 0d       	add	r24, r0
     c1e:	11 24       	eor	r1, r1
     c20:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     c24:	f8 01       	movw	r30, r16
     c26:	84 81       	ldd	r24, Z+4	; 0x04
     c28:	8c 9f       	mul	r24, r28
     c2a:	91 2d       	mov	r25, r1
     c2c:	11 24       	eor	r1, r1
     c2e:	96 95       	lsr	r25
     c30:	96 95       	lsr	r25
     c32:	96 95       	lsr	r25
     c34:	f6 e0       	ldi	r31, 0x06	; 6
     c36:	9f 9f       	mul	r25, r31
     c38:	80 0d       	add	r24, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     c40:	f8 01       	movw	r30, r16
     c42:	84 85       	ldd	r24, Z+12	; 0x0c
     c44:	8c 9f       	mul	r24, r28
     c46:	91 2d       	mov	r25, r1
     c48:	11 24       	eor	r1, r1
     c4a:	96 95       	lsr	r25
     c4c:	96 95       	lsr	r25
     c4e:	96 95       	lsr	r25
     c50:	f6 e0       	ldi	r31, 0x06	; 6
     c52:	9f 9f       	mul	r25, r31
     c54:	80 0d       	add	r24, r0
     c56:	11 24       	eor	r1, r1
     c58:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     c5c:	f8 01       	movw	r30, r16
     c5e:	86 81       	ldd	r24, Z+6	; 0x06
     c60:	8c 9f       	mul	r24, r28
     c62:	91 2d       	mov	r25, r1
     c64:	11 24       	eor	r1, r1
     c66:	96 95       	lsr	r25
     c68:	96 95       	lsr	r25
     c6a:	96 95       	lsr	r25
     c6c:	f6 e0       	ldi	r31, 0x06	; 6
     c6e:	9f 9f       	mul	r25, r31
     c70:	80 0d       	add	r24, r0
     c72:	11 24       	eor	r1, r1
     c74:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     c78:	f8 01       	movw	r30, r16
     c7a:	90 85       	ldd	r25, Z+8	; 0x08
     c7c:	9c 9f       	mul	r25, r28
     c7e:	21 2d       	mov	r18, r1
     c80:	11 24       	eor	r1, r1
     c82:	26 95       	lsr	r18
     c84:	26 95       	lsr	r18
     c86:	26 95       	lsr	r18
     c88:	89 2f       	mov	r24, r25
     c8a:	f6 e0       	ldi	r31, 0x06	; 6
     c8c:	2f 9f       	mul	r18, r31
     c8e:	80 0d       	add	r24, r0
     c90:	11 24       	eor	r1, r1
     c92:	8d 0f       	add	r24, r29
     c94:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     c98:	f8 01       	movw	r30, r16
     c9a:	82 85       	ldd	r24, Z+10	; 0x0a
     c9c:	8c 9f       	mul	r24, r28
     c9e:	c1 2d       	mov	r28, r1
     ca0:	11 24       	eor	r1, r1
     ca2:	c6 95       	lsr	r28
     ca4:	c6 95       	lsr	r28
     ca6:	c6 95       	lsr	r28
     ca8:	f6 e0       	ldi	r31, 0x06	; 6
     caa:	cf 9f       	mul	r28, r31
     cac:	80 0d       	add	r24, r0
     cae:	11 24       	eor	r1, r1
     cb0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <twi_send_byte>
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <twi_end_transmission>
     cc0:	80 5d       	subi	r24, 0xD0	; 208
     cc2:	97 40       	sbci	r25, 0x07	; 7
     cc4:	f8 01       	movw	r30, r16
     cc6:	93 87       	std	Z+11, r25	; 0x0b
     cc8:	82 87       	std	Z+10, r24	; 0x0a
     cca:	d0 e8       	ldi	r29, 0x80	; 128
     ccc:	8e cf       	rjmp	.-228    	; 0xbea <rtc_set_time+0x40>

00000cce <format_2_string>:
void restore_vars_from_EEPROM();
void EEPROM_compare(unsigned int address, unsigned char data);

void update_the_stuff(uint8_t tick_tock);

void format_2_string(time_t* time){
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
	if (time->seconds<10){
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     cd6:	4a e0       	ldi	r20, 0x0A	; 10
     cd8:	be 01       	movw	r22, r28
     cda:	8a 30       	cpi	r24, 0x0A	; 10
     cdc:	5c f5       	brge	.+86     	; 0xd34 <format_2_string+0x66>
     cde:	61 5f       	subi	r22, 0xF1	; 241
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	08 2e       	mov	r0, r24
     ce4:	00 0c       	add	r0, r0
     ce6:	99 0b       	sbc	r25, r25
     ce8:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__itoa_ncheck>
		itoa(time->seconds, &time->whole_time[7],10);
		time->whole_time[6]='0';
     cec:	80 e3       	ldi	r24, 0x30	; 48
     cee:	8e 87       	std	Y+14, r24	; 0x0e
	}
	else itoa(time->seconds, &time->whole_time[6],10);

	if (time->minutes<10){
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	4a e0       	ldi	r20, 0x0A	; 10
     cf4:	be 01       	movw	r22, r28
     cf6:	8a 30       	cpi	r24, 0x0A	; 10
     cf8:	4c f5       	brge	.+82     	; 0xd4c <format_2_string+0x7e>
     cfa:	64 5f       	subi	r22, 0xF4	; 244
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	08 2e       	mov	r0, r24
     d00:	00 0c       	add	r0, r0
     d02:	99 0b       	sbc	r25, r25
     d04:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__itoa_ncheck>
		itoa(time->minutes, &time->whole_time[4],10);
		time->whole_time[3]='0';
     d08:	80 e3       	ldi	r24, 0x30	; 48
     d0a:	8b 87       	std	Y+11, r24	; 0x0b
	}
	else itoa(time->minutes, &time->whole_time[3],10);

	if (time->hours<10){
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	8a 30       	cpi	r24, 0x0A	; 10
     d10:	3c f1       	brlt	.+78     	; 0xd60 <format_2_string+0x92>
		itoa(time->hours, &time->whole_time[1],10);
		time->whole_time[0]='0';
	}
	else ltoa(time->hours, &time->whole_time[0],10);
     d12:	68 2f       	mov	r22, r24
     d14:	88 0f       	add	r24, r24
     d16:	77 0b       	sbc	r23, r23
     d18:	88 0b       	sbc	r24, r24
     d1a:	99 0b       	sbc	r25, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     d1c:	2a e0       	ldi	r18, 0x0A	; 10
     d1e:	ae 01       	movw	r20, r28
     d20:	48 5f       	subi	r20, 0xF8	; 248
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__ltoa_ncheck>

	time->whole_time[2]=':';
     d28:	8a e3       	ldi	r24, 0x3A	; 58
     d2a:	8a 87       	std	Y+10, r24	; 0x0a
	time->whole_time[5]=':';
     d2c:	8d 87       	std	Y+13, r24	; 0x0d
}
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d34:	62 5f       	subi	r22, 0xF2	; 242
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	08 2e       	mov	r0, r24
     d3a:	00 0c       	add	r0, r0
     d3c:	99 0b       	sbc	r25, r25
     d3e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__itoa_ncheck>
		itoa(time->seconds, &time->whole_time[7],10);
		time->whole_time[6]='0';
	}
	else itoa(time->seconds, &time->whole_time[6],10);

	if (time->minutes<10){
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	4a e0       	ldi	r20, 0x0A	; 10
     d46:	be 01       	movw	r22, r28
     d48:	8a 30       	cpi	r24, 0x0A	; 10
     d4a:	bc f2       	brlt	.-82     	; 0xcfa <format_2_string+0x2c>
     d4c:	65 5f       	subi	r22, 0xF5	; 245
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	08 2e       	mov	r0, r24
     d52:	00 0c       	add	r0, r0
     d54:	99 0b       	sbc	r25, r25
     d56:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__itoa_ncheck>
		itoa(time->minutes, &time->whole_time[4],10);
		time->whole_time[3]='0';
	}
	else itoa(time->minutes, &time->whole_time[3],10);

	if (time->hours<10){
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	8a 30       	cpi	r24, 0x0A	; 10
     d5e:	cc f6       	brge	.-78     	; 0xd12 <format_2_string+0x44>
     d60:	4a e0       	ldi	r20, 0x0A	; 10
     d62:	be 01       	movw	r22, r28
     d64:	67 5f       	subi	r22, 0xF7	; 247
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	08 2e       	mov	r0, r24
     d6a:	00 0c       	add	r0, r0
     d6c:	99 0b       	sbc	r25, r25
     d6e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__itoa_ncheck>
		itoa(time->hours, &time->whole_time[1],10);
		time->whole_time[0]='0';
     d72:	80 e3       	ldi	r24, 0x30	; 48
     d74:	88 87       	std	Y+8, r24	; 0x08
	}
	else ltoa(time->hours, &time->whole_time[0],10);

	time->whole_time[2]=':';
     d76:	8a e3       	ldi	r24, 0x3A	; 58
     d78:	8a 87       	std	Y+10, r24	; 0x0a
	time->whole_time[5]=':';
     d7a:	8d 87       	std	Y+13, r24	; 0x0d
}
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <update_clock>:

void update_clock(uint8_t elapsed_millis){
     d82:	cf 93       	push	r28
	if (time.is_being_changed) return;
     d84:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <time+0x7>
     d88:	91 11       	cpse	r25, r1
     d8a:	10 c0       	rjmp	.+32     	; 0xdac <update_clock+0x2a>

	time.millis += elapsed_millis;
     d8c:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <time>
     d90:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <time+0x1>
     d94:	a9 01       	movw	r20, r18
     d96:	48 0f       	add	r20, r24
     d98:	51 1d       	adc	r21, r1
     d9a:	ca 01       	movw	r24, r20
	if (time.millis<(1000)) return;
     d9c:	88 3e       	cpi	r24, 0xE8	; 232
     d9e:	53 e0       	ldi	r21, 0x03	; 3
     da0:	95 07       	cpc	r25, r21
     da2:	34 f4       	brge	.+12     	; 0xdb0 <update_clock+0x2e>
}

void update_clock(uint8_t elapsed_millis){
	if (time.is_being_changed) return;

	time.millis += elapsed_millis;
     da4:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <time+0x1>
     da8:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <time>

	format_2_string(&time);
	time.has_changed=1;


}
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret
void update_clock(uint8_t elapsed_millis){
	if (time.is_being_changed) return;

	time.millis += elapsed_millis;
	if (time.millis<(1000)) return;
	time.millis -= 1000;
     db0:	88 5e       	subi	r24, 0xE8	; 232
     db2:	93 40       	sbci	r25, 0x03	; 3
     db4:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <time+0x1>
     db8:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <time>

	int8_t old_hour = time.hours;
     dbc:	c0 91 e9 01 	lds	r28, 0x01E9	; 0x8001e9 <time+0x4>

	rtc_get_time();
     dc0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <rtc_get_time>
	time.seconds = (int8_t) _tm.sec;
     dc4:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_tm>
     dc8:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <time+0x2>
	time.minutes = (int8_t) _tm.min;
     dcc:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_tm+0x2>
     dd0:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <time+0x3>
	time.hours = (int8_t) _tm.hour;
     dd4:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <_tm+0x4>
     dd8:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <time+0x4>
	time.days = (int8_t) _tm.wday;
     ddc:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <_tm+0xc>
	if (time.days==7) time.days=0; //wrap over for when the rtc automatically goes from sunday (6) to monday (7), which I instead count as 0
     de0:	97 30       	cpi	r25, 0x07	; 7
     de2:	79 f0       	breq	.+30     	; 0xe02 <update_clock+0x80>

	rtc_get_time();
	time.seconds = (int8_t) _tm.sec;
	time.minutes = (int8_t) _tm.min;
	time.hours = (int8_t) _tm.hour;
	time.days = (int8_t) _tm.wday;
     de4:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <time+0x5>
	if (time.days==7) time.days=0; //wrap over for when the rtc automatically goes from sunday (6) to monday (7), which I instead count as 0

	if (time.hours==0 && old_hour==23)
     de8:	81 11       	cpse	r24, r1
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <update_clock+0x6e>
     dec:	c7 31       	cpi	r28, 0x17	; 23
     dee:	61 f0       	breq	.+24     	; 0xe08 <update_clock+0x86>
		water_schedule[time.days].done_today=0; //as the old day sets, clear the "done_today" flag, so that it can fly another day

	format_2_string(&time);
     df0:	85 ee       	ldi	r24, 0xE5	; 229
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	0e 94 67 06 	call	0xcce	; 0xcce <format_2_string>
	time.has_changed=1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <time+0x6>


}
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret
	rtc_get_time();
	time.seconds = (int8_t) _tm.sec;
	time.minutes = (int8_t) _tm.min;
	time.hours = (int8_t) _tm.hour;
	time.days = (int8_t) _tm.wday;
	if (time.days==7) time.days=0; //wrap over for when the rtc automatically goes from sunday (6) to monday (7), which I instead count as 0
     e02:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <time+0x5>
     e06:	f0 cf       	rjmp	.-32     	; 0xde8 <update_clock+0x66>

	if (time.hours==0 && old_hour==23)
		water_schedule[time.days].done_today=0; //as the old day sets, clear the "done_today" flag, so that it can fly another day
     e08:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <time+0x5>
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	e8 02       	muls	r30, r24
     e10:	f0 01       	movw	r30, r0
     e12:	11 24       	eor	r1, r1
     e14:	e4 5e       	subi	r30, 0xE4	; 228
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	13 82       	std	Z+3, r1	; 0x03
     e1a:	ea cf       	rjmp	.-44     	; 0xdf0 <update_clock+0x6e>

00000e1c <__vector_7>:
	}
	return 0;
}


ISR(TIMER2_COMPA_vect){
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	8f 93       	push	r24
	debounced_b=0;
     e28:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <debounced_b>
	debounced_a=0;
     e2c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <debounced_a>
	tick_tock+=4;
     e30:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tick_tock>
     e34:	8c 5f       	subi	r24, 0xFC	; 252
     e36:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <tick_tock>
}
     e3a:	8f 91       	pop	r24
     e3c:	0f 90       	pop	r0
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	0f 90       	pop	r0
     e42:	1f 90       	pop	r1
     e44:	18 95       	reti

00000e46 <__vector_3>:

ISR(PCINT0_vect){ //todo: simplify this stuff
     e46:	1f 92       	push	r1
     e48:	0f 92       	push	r0
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
	//immediately get PINB
	uint8_t pin_b = PINB;
     e54:	83 b1       	in	r24, 0x03	; 3

	if (debounced_a==0){
     e56:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <debounced_a>
     e5a:	91 11       	cpse	r25, r1
     e5c:	12 c0       	rjmp	.+36     	; 0xe82 <__vector_3+0x3c>
		debounced_a++;
     e5e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <debounced_a>
     e62:	9f 5f       	subi	r25, 0xFF	; 255
     e64:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <debounced_a>

		static uint8_t  old_button=1;
		uint8_t  enc_button=1;

		enc_button 	= (pin_b>>ENC_BUTTON) & 0x01;
     e68:	86 95       	lsr	r24
     e6a:	81 70       	andi	r24, 0x01	; 1

		if (enc_button!=old_button){
     e6c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <old_button.3031>
     e70:	89 17       	cp	r24, r25
     e72:	39 f0       	breq	.+14     	; 0xe82 <__vector_3+0x3c>
			old_button=enc_button;
     e74:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <old_button.3031>
			enc_button_pressed=!enc_button;
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	81 11       	cpse	r24, r1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <enc_button_pressed>
		}
	}
}
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <__vector_4>:

ISR(PCINT1_vect){
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	2f 93       	push	r18
     e9c:	3f 93       	push	r19
     e9e:	4f 93       	push	r20
     ea0:	5f 93       	push	r21
     ea2:	8f 93       	push	r24
     ea4:	9f 93       	push	r25
	//immediately get PINC
	uint8_t pin_c = PINC;
     ea6:	96 b1       	in	r25, 0x06	; 6

	if (debounced_b==0){
     ea8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <debounced_b>
     eac:	81 11       	cpse	r24, r1
     eae:	1c c0       	rjmp	.+56     	; 0xee8 <__vector_4+0x58>
		debounced_b++;
     eb0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <debounced_b>
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <debounced_b>

		static uint8_t old_a=0;
		uint8_t enc_a=0, enc_b=0;

		enc_a 		= (pin_c>>ENC_A_PIN) & 0x01;
     eba:	89 2f       	mov	r24, r25
     ebc:	81 70       	andi	r24, 0x01	; 1
		enc_b 		= (pin_c>>ENC_B_PIN) & 0x01;

		if((enc_a != old_a) & enc_a){
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     ec6:	82 17       	cp	r24, r18
     ec8:	d1 f0       	breq	.+52     	; 0xefe <__vector_4+0x6e>
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	24 23       	and	r18, r20
     ed0:	35 23       	and	r19, r21
     ed2:	23 2b       	or	r18, r19
     ed4:	39 f0       	breq	.+14     	; 0xee4 <__vector_4+0x54>

		static uint8_t old_a=0;
		uint8_t enc_a=0, enc_b=0;

		enc_a 		= (pin_c>>ENC_A_PIN) & 0x01;
		enc_b 		= (pin_c>>ENC_B_PIN) & 0x01;
     ed6:	96 95       	lsr	r25
     ed8:	91 70       	andi	r25, 0x01	; 1

		if((enc_a != old_a) & enc_a){
			if ((enc_a != enc_b)) enc_dir=1;
     eda:	89 17       	cp	r24, r25
     edc:	c9 f0       	breq	.+50     	; 0xf10 <__vector_4+0x80>
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <enc_dir>
			else enc_dir=-1;
		}
		old_a = enc_a;
     ee4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	}
}
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti
		uint8_t enc_a=0, enc_b=0;

		enc_a 		= (pin_c>>ENC_A_PIN) & 0x01;
		enc_b 		= (pin_c>>ENC_B_PIN) & 0x01;

		if((enc_a != old_a) & enc_a){
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	24 23       	and	r18, r20
     f08:	35 23       	and	r19, r21
     f0a:	23 2b       	or	r18, r19
     f0c:	59 f3       	breq	.-42     	; 0xee4 <__vector_4+0x54>
     f0e:	e3 cf       	rjmp	.-58     	; 0xed6 <__vector_4+0x46>
			if ((enc_a != enc_b)) enc_dir=1;
			else enc_dir=-1;
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <enc_dir>
     f16:	e6 cf       	rjmp	.-52     	; 0xee4 <__vector_4+0x54>

00000f18 <update_the_stuff>:
	}
}

#define _NOP() do { __asm__ __volatile__ ("nop"); } while (0)

void update_the_stuff(uint8_t tick_tock){
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
	uint8_t today=time.days;
     f20:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <time+0x5>
	static int32_t water_timer=-1; //-1:disabled   positive or zero: activated



	//if the time is right, and the light is not on yet, switch it on
	if (light_start_time<light_stop_time){ //case 1
     f24:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <light_start_time>
     f28:	42 2f       	mov	r20, r18
     f2a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <light_stop_time>
     f2e:	59 2f       	mov	r21, r25
		if ( (light_start_time<=time.hours) && (time.hours<light_stop_time) && !light_is_on && light_start_time!=light_stop_time){
     f30:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <time+0x4>
	static int32_t water_timer=-1; //-1:disabled   positive or zero: activated



	//if the time is right, and the light is not on yet, switch it on
	if (light_start_time<light_stop_time){ //case 1
     f34:	29 17       	cp	r18, r25
     f36:	ec f4       	brge	.+58     	; 0xf72 <update_the_stuff+0x5a>
		if ( (light_start_time<=time.hours) && (time.hours<light_stop_time) && !light_is_on && light_start_time!=light_stop_time){
     f38:	32 17       	cp	r19, r18
     f3a:	0c f4       	brge	.+2      	; 0xf3e <update_the_stuff+0x26>
     f3c:	83 c0       	rjmp	.+262    	; 0x1044 <update_the_stuff+0x12c>
     f3e:	39 17       	cp	r19, r25
     f40:	0c f0       	brlt	.+2      	; 0xf44 <update_the_stuff+0x2c>
     f42:	80 c0       	rjmp	.+256    	; 0x1044 <update_the_stuff+0x12c>
     f44:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <light_is_on>
     f48:	41 11       	cpse	r20, r1
     f4a:	0c c0       	rjmp	.+24     	; 0xf64 <update_the_stuff+0x4c>
			 LIGHT_ON;
     f4c:	2a 9a       	sbi	0x05, 2	; 5
			light_is_on=1;
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <light_is_on>
		}
		//if it's outside the "on" hours, and the light is on, switch it off
		if ( ((time.hours<light_start_time) || (time.hours>=light_stop_time)) && light_is_on){
     f54:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <light_start_time>
     f58:	32 17       	cp	r19, r18
     f5a:	1c f1       	brlt	.+70     	; 0xfa2 <update_the_stuff+0x8a>
     f5c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <light_stop_time>
     f60:	39 17       	cp	r19, r25
     f62:	fc f4       	brge	.+62     	; 0xfa2 <update_the_stuff+0x8a>
     f64:	42 2f       	mov	r20, r18
			LIGHT_OFF;
			light_is_on=0;
		}
	}

	if (light_start_time==light_stop_time){
     f66:	49 13       	cpse	r20, r25
     f68:	25 c0       	rjmp	.+74     	; 0xfb4 <update_the_stuff+0x9c>
		LIGHT_OFF;
     f6a:	2a 98       	cbi	0x05, 2	; 5
		light_is_on=0;
     f6c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <light_is_on>
     f70:	21 c0       	rjmp	.+66     	; 0xfb4 <update_the_stuff+0x9c>
			LIGHT_OFF;
			light_is_on=0;
		}
	}
	else { //case 2 when it starts the first day and goes on till the next day
		if ( (light_start_time<=time.hours) && !light_is_on && light_start_time!=light_stop_time){
     f72:	32 17       	cp	r19, r18
     f74:	0c f4       	brge	.+2      	; 0xf78 <update_the_stuff+0x60>
     f76:	6d c0       	rjmp	.+218    	; 0x1052 <update_the_stuff+0x13a>
     f78:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <light_is_on>
     f7c:	21 11       	cpse	r18, r1
     f7e:	18 c0       	rjmp	.+48     	; 0xfb0 <update_the_stuff+0x98>
     f80:	49 17       	cp	r20, r25
     f82:	09 f4       	brne	.+2      	; 0xf86 <update_the_stuff+0x6e>
     f84:	7d c0       	rjmp	.+250    	; 0x1080 <update_the_stuff+0x168>
			LIGHT_ON;
     f86:	2a 9a       	sbi	0x05, 2	; 5
			light_is_on=1;
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <light_is_on>
		}
		if ( (light_stop_time<=time.hours) && (time.hours<light_start_time) && light_is_on){
     f8e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <light_stop_time>
     f92:	59 2f       	mov	r21, r25
     f94:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <light_start_time>
     f98:	39 17       	cp	r19, r25
     f9a:	54 f0       	brlt	.+20     	; 0xfb0 <update_the_stuff+0x98>
     f9c:	34 17       	cp	r19, r20
     f9e:	0c f0       	brlt	.+2      	; 0xfa2 <update_the_stuff+0x8a>
     fa0:	6f c0       	rjmp	.+222    	; 0x1080 <update_the_stuff+0x168>
			LIGHT_OFF;
     fa2:	2a 98       	cbi	0x05, 2	; 5
			light_is_on=0;
     fa4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <light_is_on>
     fa8:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <light_start_time>
     fac:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <light_stop_time>
		}
	}

	if (light_start_time==light_stop_time){
     fb0:	49 17       	cp	r20, r25
     fb2:	d9 f2       	breq	.-74     	; 0xf6a <update_the_stuff+0x52>




	//if the time is right, if today it should water, and has not watered previously today...water
	if (!water_schedule[today].is_being_changed){ //only water once things have been set
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	e4 5e       	subi	r30, 0xE4	; 228
     fc0:	fe 4f       	sbci	r31, 0xFE	; 254
     fc2:	92 81       	ldd	r25, Z+2	; 0x02
     fc4:	91 11       	cpse	r25, r1
     fc6:	39 c0       	rjmp	.+114    	; 0x103a <update_the_stuff+0x122>
		if ((water_schedule[today].hour == time.hours) && !(water_schedule[today].done_today) && water_schedule[today].on){
     fc8:	90 81       	ld	r25, Z
     fca:	93 17       	cp	r25, r19
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <update_the_stuff+0xb8>
     fce:	4a c0       	rjmp	.+148    	; 0x1064 <update_the_stuff+0x14c>
			water_schedule[today].done_today=1;
			//enable the water timer
			water_timer=0;
		}

		if (water_timer != -1){
     fd0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
     fd4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
     fd8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
     fdc:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
     fe0:	4f 3f       	cpi	r20, 0xFF	; 255
     fe2:	9f ef       	ldi	r25, 0xFF	; 255
     fe4:	59 07       	cpc	r21, r25
     fe6:	69 07       	cpc	r22, r25
     fe8:	79 07       	cpc	r23, r25
     fea:	39 f1       	breq	.+78     	; 0x103a <update_the_stuff+0x122>
			water_timer+= tick_tock;
     fec:	6a 01       	movw	r12, r20
     fee:	7b 01       	movw	r14, r22
     ff0:	c8 0e       	add	r12, r24
     ff2:	d1 1c       	adc	r13, r1
     ff4:	e1 1c       	adc	r14, r1
     ff6:	f1 1c       	adc	r15, r1
     ff8:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
     ffc:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    1000:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    1004:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>

			if (water_timer >= ((long)water_ml*ML_2_MS)) {
    1008:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <water_ml>
    100c:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <water_ml+0x1>
    1010:	2a eb       	ldi	r18, 0xBA	; 186
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__usmulhisi3>
    1018:	c6 16       	cp	r12, r22
    101a:	d7 06       	cpc	r13, r23
    101c:	e8 06       	cpc	r14, r24
    101e:	f9 06       	cpc	r15, r25
    1020:	64 f0       	brlt	.+24     	; 0x103a <update_the_stuff+0x122>
				MOTOR_OFF;
    1022:	28 98       	cbi	0x05, 0	; 5
				SECOND_MOTOR_OFF;
				water_timer=-1; //disable timer
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f ef       	ldi	r25, 0xFF	; 255
    1028:	dc 01       	movw	r26, r24
    102a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    102e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1032:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1036:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
			}
		}
	}


}
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	08 95       	ret
		if ( (light_start_time<=time.hours) && (time.hours<light_stop_time) && !light_is_on && light_start_time!=light_stop_time){
			 LIGHT_ON;
			light_is_on=1;
		}
		//if it's outside the "on" hours, and the light is on, switch it off
		if ( ((time.hours<light_start_time) || (time.hours>=light_stop_time)) && light_is_on){
    1044:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <light_is_on>
    1048:	91 11       	cpse	r25, r1
    104a:	ab cf       	rjmp	.-170    	; 0xfa2 <update_the_stuff+0x8a>
    104c:	42 2f       	mov	r20, r18
    104e:	95 2f       	mov	r25, r21
    1050:	af cf       	rjmp	.-162    	; 0xfb0 <update_the_stuff+0x98>
	else { //case 2 when it starts the first day and goes on till the next day
		if ( (light_start_time<=time.hours) && !light_is_on && light_start_time!=light_stop_time){
			LIGHT_ON;
			light_is_on=1;
		}
		if ( (light_stop_time<=time.hours) && (time.hours<light_start_time) && light_is_on){
    1052:	39 17       	cp	r19, r25
    1054:	0c f4       	brge	.+2      	; 0x1058 <update_the_stuff+0x140>
    1056:	ac cf       	rjmp	.-168    	; 0xfb0 <update_the_stuff+0x98>
    1058:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <light_is_on>
    105c:	22 23       	and	r18, r18
    105e:	09 f4       	brne	.+2      	; 0x1062 <update_the_stuff+0x14a>
    1060:	a7 cf       	rjmp	.-178    	; 0xfb0 <update_the_stuff+0x98>
    1062:	9f cf       	rjmp	.-194    	; 0xfa2 <update_the_stuff+0x8a>



	//if the time is right, if today it should water, and has not watered previously today...water
	if (!water_schedule[today].is_being_changed){ //only water once things have been set
		if ((water_schedule[today].hour == time.hours) && !(water_schedule[today].done_today) && water_schedule[today].on){
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	91 11       	cpse	r25, r1
    1068:	b3 cf       	rjmp	.-154    	; 0xfd0 <update_the_stuff+0xb8>
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	99 23       	and	r25, r25
    106e:	09 f4       	brne	.+2      	; 0x1072 <update_the_stuff+0x15a>
    1070:	af cf       	rjmp	.-162    	; 0xfd0 <update_the_stuff+0xb8>
			MOTOR_ON;
    1072:	28 9a       	sbi	0x05, 0	; 5
			SECOND_MOTOR_ON;
			water_schedule[today].done_today=1;
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	93 83       	std	Z+3, r25	; 0x03
			//enable the water timer
			water_timer=0;
		}

		if (water_timer != -1){
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	ba 01       	movw	r22, r20
    107e:	b6 cf       	rjmp	.-148    	; 0xfec <update_the_stuff+0xd4>
    1080:	95 2f       	mov	r25, r21
    1082:	96 cf       	rjmp	.-212    	; 0xfb0 <update_the_stuff+0x98>

00001084 <restore_vars_from_EEPROM>:
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    1084:	f9 99       	sbic	0x1f, 1	; 31
    1086:	fe cf       	rjmp	.-4      	; 0x1084 <restore_vars_from_EEPROM>
	/* Set up address register */
	EEAR = uiAddress;
    1088:	8a e0       	ldi	r24, 0x0A	; 10
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	92 bd       	out	0x22, r25	; 34
    108e:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1090:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    1092:	80 b5       	in	r24, 0x20	; 32

}


void restore_vars_from_EEPROM(){
	light_start_time=EEPROM_read(LIGHT_START_ADDRESS);
    1094:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <light_start_time>
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    1098:	f9 99       	sbic	0x1f, 1	; 31
    109a:	fe cf       	rjmp	.-4      	; 0x1098 <restore_vars_from_EEPROM+0x14>
	/* Set up address register */
	EEAR = uiAddress;
    109c:	8c e0       	ldi	r24, 0x0C	; 12
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	92 bd       	out	0x22, r25	; 34
    10a2:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    10a4:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    10a6:	80 b5       	in	r24, 0x20	; 32
}


void restore_vars_from_EEPROM(){
	light_start_time=EEPROM_read(LIGHT_START_ADDRESS);
	light_stop_time=EEPROM_read(LIGHT_STOP_ADDRESS);
    10a8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <light_stop_time>
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    10ac:	f9 99       	sbic	0x1f, 1	; 31
    10ae:	fe cf       	rjmp	.-4      	; 0x10ac <restore_vars_from_EEPROM+0x28>
	/* Set up address register */
	EEAR = uiAddress;
    10b0:	8e e0       	ldi	r24, 0x0E	; 14
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	92 bd       	out	0x22, r25	; 34
    10b6:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    10b8:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    10ba:	80 b5       	in	r24, 0x20	; 32
void restore_vars_from_EEPROM(){
	light_start_time=EEPROM_read(LIGHT_START_ADDRESS);
	light_stop_time=EEPROM_read(LIGHT_STOP_ADDRESS);


	water_ml = EEPROM_read(WATER_AMOUNT_ADDRESS) * 10;
    10bc:	2a e0       	ldi	r18, 0x0A	; 10
    10be:	82 9f       	mul	r24, r18
    10c0:	c0 01       	movw	r24, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <water_ml+0x1>
    10c8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <water_ml>
    10cc:	ed e1       	ldi	r30, 0x1D	; 29
    10ce:	f1 e0       	ldi	r31, 0x01	; 1
    10d0:	82 e1       	ldi	r24, 0x12	; 18
    10d2:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i=0; i<7; i++){
		water_schedule[i].hour=EEPROM_read(WATER_SCHEDULE_HOUR_BASE_ADDRESS+i);
		//water_schedule[i].hour=24;
		//check if water should be on or off that day
		if (water_schedule[i].hour==24) water_schedule[i].on=0;
		else water_schedule[i].on=1;
    10d4:	31 e0       	ldi	r19, 0x01	; 1
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    10d6:	f9 99       	sbic	0x1f, 1	; 31
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <restore_vars_from_EEPROM+0x52>
	/* Set up address register */
	EEAR = uiAddress;
    10da:	92 bd       	out	0x22, r25	; 34
    10dc:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    10de:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    10e0:	20 b5       	in	r18, 0x20	; 32
    10e2:	df 01       	movw	r26, r30
    10e4:	11 97       	sbiw	r26, 0x01	; 1


	water_ml = EEPROM_read(WATER_AMOUNT_ADDRESS) * 10;

	for (uint8_t i=0; i<7; i++){
		water_schedule[i].hour=EEPROM_read(WATER_SCHEDULE_HOUR_BASE_ADDRESS+i);
    10e6:	2c 93       	st	X, r18
		//water_schedule[i].hour=24;
		//check if water should be on or off that day
		if (water_schedule[i].hour==24) water_schedule[i].on=0;
    10e8:	28 31       	cpi	r18, 0x18	; 24
    10ea:	41 f0       	breq	.+16     	; 0x10fc <restore_vars_from_EEPROM+0x78>
		else water_schedule[i].on=1;
    10ec:	30 83       	st	Z, r19
    10ee:	34 96       	adiw	r30, 0x04	; 4
    10f0:	01 96       	adiw	r24, 0x01	; 1
	light_stop_time=EEPROM_read(LIGHT_STOP_ADDRESS);


	water_ml = EEPROM_read(WATER_AMOUNT_ADDRESS) * 10;

	for (uint8_t i=0; i<7; i++){
    10f2:	21 e0       	ldi	r18, 0x01	; 1
    10f4:	e9 33       	cpi	r30, 0x39	; 57
    10f6:	f2 07       	cpc	r31, r18
    10f8:	71 f7       	brne	.-36     	; 0x10d6 <restore_vars_from_EEPROM+0x52>
	EEPROM_compare(LIGHT_START_ADDRESS, 7);
	EEPROM_compare(LIGHT_STOP_ADDRESS, 10);
	for (uint8_t i=0; i<7; i++) EEPROM_compare(WATER_SCHEDULE_HOUR_BASE_ADDRESS+i, 24);
	*/

}
    10fa:	08 95       	ret

	for (uint8_t i=0; i<7; i++){
		water_schedule[i].hour=EEPROM_read(WATER_SCHEDULE_HOUR_BASE_ADDRESS+i);
		//water_schedule[i].hour=24;
		//check if water should be on or off that day
		if (water_schedule[i].hour==24) water_schedule[i].on=0;
    10fc:	10 82       	st	Z, r1
    10fe:	f7 cf       	rjmp	.-18     	; 0x10ee <restore_vars_from_EEPROM+0x6a>

00001100 <EEPROM_compare>:
	sei();
}

unsigned char EEPROM_read(unsigned int uiAddress){ //should not tecnically need to be atomic
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    1100:	f9 99       	sbic	0x1f, 1	; 31
    1102:	fe cf       	rjmp	.-4      	; 0x1100 <EEPROM_compare>
	/* Set up address register */
	EEAR = uiAddress;
    1104:	92 bd       	out	0x22, r25	; 34
    1106:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1108:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
    110a:	20 b5       	in	r18, 0x20	; 32

}
void EEPROM_compare(unsigned int address, unsigned char data){

	uint8_t temp=EEPROM_read(address);
	if (temp!=data) EEPROM_write(address, data);
    110c:	62 17       	cp	r22, r18
    110e:	49 f0       	breq	.+18     	; 0x1122 <EEPROM_compare+0x22>
}

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
    1110:	f9 99       	sbic	0x1f, 1	; 31
    1112:	fe cf       	rjmp	.-4      	; 0x1110 <EEPROM_compare+0x10>
	/* Set up address and Data Registers */
	EEAR = uiAddress;
    1114:	92 bd       	out	0x22, r25	; 34
    1116:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    1118:	60 bd       	out	0x20, r22	; 32

	cli(); //the next two intrsuctions need to happen immediately one after the other, or else the write won't work
    111a:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
    111c:	fa 9a       	sbi	0x1f, 2	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
    111e:	f9 9a       	sbi	0x1f, 1	; 31
	sei();
    1120:	78 94       	sei
    1122:	08 95       	ret

00001124 <update_menu>:





void update_menu(int8_t e_dir, uint8_t b_pressed, uint8_t reset_to_main_menu){
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	29 97       	sbiw	r28, 0x09	; 9
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	f8 2e       	mov	r15, r24
    1146:	e6 2e       	mov	r14, r22
    1148:	14 2f       	mov	r17, r20
	}menu = {.current=0, .level=0, .cursor_on=0, .clear_is_due=1};
	static int8_t item=0; //goes 0 to 15 for first row, 16 to 31 second row
	static int8_t cursor_pos=0; //goes 0 to 15 for first row, 16 to 31 second row


	lcd_off(); //switch off the lcd, and switch it on at the end
    114a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <lcd_off>

	//enable cursor for menu levels above 0
	if ((menu.level > 0) && !menu.cursor_on) {lcd_enable_cursor();	menu.cursor_on=1;}
    114e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    1152:	88 23       	and	r24, r24
    1154:	09 f4       	brne	.+2      	; 0x1158 <update_menu+0x34>
    1156:	6b c0       	rjmp	.+214    	; 0x122e <update_menu+0x10a>
    1158:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <menu.2949+0x2>
    115c:	88 23       	and	r24, r24
    115e:	09 f4       	brne	.+2      	; 0x1162 <update_menu+0x3e>
    1160:	53 c1       	rjmp	.+678    	; 0x1408 <update_menu+0x2e4>
    1162:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <menu.2949+0x3>
		}
		//clear b_pressed to avoid further button interactions this time around
		b_pressed=0;
	}

	if (menu.clear_is_due) { lcd_clear_f(); menu.clear_is_due=0; menu.was_cleared=1;}
    1166:	81 11       	cpse	r24, r1
    1168:	82 c0       	rjmp	.+260    	; 0x126e <update_menu+0x14a>

	if (reset_to_main_menu) menu.current=0;
    116a:	11 23       	and	r17, r17
    116c:	09 f4       	brne	.+2      	; 0x1170 <update_menu+0x4c>
    116e:	88 c0       	rjmp	.+272    	; 0x1280 <update_menu+0x15c>
    1170:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <menu.2949>
	//now for all the menus
	switch (menu.current){
	case 0: //just display the time...evventualy pressing the button should make it possible to change the time
		//_ddd__hh:mm:ss__
		//_W:hh__L:hh-hh__
		if (time.has_changed || time.is_being_changed || menu.was_cleared){
    1174:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <time+0x6>
    1178:	81 11       	cpse	r24, r1
    117a:	09 c0       	rjmp	.+18     	; 0x118e <update_menu+0x6a>
    117c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <time+0x7>
    1180:	81 11       	cpse	r24, r1
    1182:	05 c0       	rjmp	.+10     	; 0x118e <update_menu+0x6a>
    1184:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <menu.2949+0x4>
    1188:	88 23       	and	r24, r24
    118a:	09 f4       	brne	.+2      	; 0x118e <update_menu+0x6a>
    118c:	bc c2       	rjmp	.+1400   	; 0x1706 <update_menu+0x5e2>
			char temp[3]={0};
    118e:	19 82       	std	Y+1, r1	; 0x01
    1190:	1a 82       	std	Y+2, r1	; 0x02
    1192:	1b 82       	std	Y+3, r1	; 0x03

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	81 e8       	ldi	r24, 0x81	; 129
    1198:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

			//lcd_set_cursor(0,0);  //debug help
			//lcd_puts(itoa(time.days, temp, 10));
			lcd_set_cursor(1,0);
			lcd_puts_P(day_name[time.days]);
    119c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <time+0x5>
    11a0:	27 e0       	ldi	r18, 0x07	; 7
    11a2:	82 02       	muls	r24, r18
    11a4:	c0 01       	movw	r24, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	80 56       	subi	r24, 0x60	; 96
    11aa:	9d 4f       	sbci	r25, 0xFD	; 253
    11ac:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	86 e8       	ldi	r24, 0x86	; 134
    11b4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    11b8:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <time+0x8>
    11bc:	88 23       	and	r24, r24
    11be:	51 f0       	breq	.+20     	; 0x11d4 <update_menu+0xb0>
    11c0:	0e ee       	ldi	r16, 0xEE	; 238
    11c2:	11 e0       	ldi	r17, 0x01	; 1
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    11ca:	f8 01       	movw	r30, r16
    11cc:	81 91       	ld	r24, Z+
    11ce:	8f 01       	movw	r16, r30
    11d0:	81 11       	cpse	r24, r1
    11d2:	f8 cf       	rjmp	.-16     	; 0x11c4 <update_menu+0xa0>
			lcd_set_cursor(6,0);
			lcd_puts(time.whole_time);

			if (menu.level==0){
    11d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    11d8:	88 23       	and	r24, r24
    11da:	09 f4       	brne	.+2      	; 0x11de <update_menu+0xba>
    11dc:	ea c2       	rjmp	.+1492   	; 0x17b2 <update_menu+0x68e>
					temp[0]='0' + (light_stop_time / 10);
					temp[1]='0' + (light_stop_time % 10);
					lcd_puts(temp);
				}
			}
			else if (menu.level==1){
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <update_menu+0xc0>
    11e2:	8d c3       	rjmp	.+1818   	; 0x18fe <update_menu+0x7da>

				lcd_set_cursor(0,1);
				lcd_puts_P(L("           Back  "));
			}
			time.has_changed=0;
    11e4:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <time+0x6>
		}

		//change the time
		if (menu.level==1){
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <update_menu+0xca>
    11ec:	45 c2       	rjmp	.+1162   	; 0x1678 <update_menu+0x554>
			case 4: menu.level=0; menu.clear_is_due=1; break;//exit to level 0
			}
			b_pressed=0;
		}

		if(menu.level==2){
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <update_menu+0xd0>
    11f2:	a1 c2       	rjmp	.+1346   	; 0x1736 <update_menu+0x612>
    11f4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cursor_pos.2951>

		break;

	}

	if (cursor_pos<16) lcd_set_cursor(cursor_pos,0);
    11f8:	80 31       	cpi	r24, 0x10	; 16
    11fa:	0c f4       	brge	.+2      	; 0x11fe <update_menu+0xda>
    11fc:	00 c1       	rjmp	.+512    	; 0x13fe <update_menu+0x2da>
    11fe:	80 5d       	subi	r24, 0xD0	; 208
    1200:	80 68       	ori	r24, 0x80	; 128

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
	else lcd_set_cursor(cursor_pos-16,1);

	lcd_on();
    1208:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lcd_on>
	menu.was_cleared=0;
    120c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <menu.2949+0x4>
}
    1210:	29 96       	adiw	r28, 0x09	; 9
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	08 95       	ret

	lcd_off(); //switch off the lcd, and switch it on at the end

	//enable cursor for menu levels above 0
	if ((menu.level > 0) && !menu.cursor_on) {lcd_enable_cursor();	menu.cursor_on=1;}
	if ((menu.level == 0) && menu.cursor_on) {lcd_disable_cursor();	menu.cursor_on=0;}
    122e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <menu.2949+0x2>
    1232:	81 11       	cpse	r24, r1
    1234:	f2 c0       	rjmp	.+484    	; 0x141a <update_menu+0x2f6>

	//default level 0 actions
	if (menu.level == 0) {
		//e_dir: 1=left -1=right 0=nothing
		menu.current += e_dir;
    1236:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <menu.2949>
    123a:	9f 0d       	add	r25, r15
		wrap_around(menu.current, NUM_MENUS);
    123c:	94 30       	cpi	r25, 0x04	; 4
    123e:	0c f4       	brge	.+2      	; 0x1242 <update_menu+0x11e>
    1240:	60 c0       	rjmp	.+192    	; 0x1302 <update_menu+0x1de>
    1242:	8c ef       	ldi	r24, 0xFC	; 252
    1244:	98 0f       	add	r25, r24
    1246:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <menu.2949>
		//clear e_dir and the screen to avoid further interactions

		if (e_dir) menu.clear_is_due=1;
    124a:	ff 20       	and	r15, r15
    124c:	09 f4       	brne	.+2      	; 0x1250 <update_menu+0x12c>
    124e:	64 c0       	rjmp	.+200    	; 0x1318 <update_menu+0x1f4>
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <menu.2949+0x3>
		e_dir=0;
		//if button is pressed, move to level 1 and clear cursor_pos
		if (b_pressed) {
    1256:	ee 20       	and	r14, r14
    1258:	09 f4       	brne	.+2      	; 0x125c <update_menu+0x138>
    125a:	ee c0       	rjmp	.+476    	; 0x1438 <update_menu+0x314>
			menu.level=1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menu.2949+0x1>
			menu.clear_is_due=1;
    1262:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <menu.2949+0x3>
			item=0;
    1266:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <item.2950>
		}
		//clear b_pressed to avoid further button interactions this time around
		b_pressed=0;
    126a:	e1 2c       	mov	r14, r1
		menu.current += e_dir;
		wrap_around(menu.current, NUM_MENUS);
		//clear e_dir and the screen to avoid further interactions

		if (e_dir) menu.clear_is_due=1;
		e_dir=0;
    126c:	f1 2c       	mov	r15, r1
		}
		//clear b_pressed to avoid further button interactions this time around
		b_pressed=0;
	}

	if (menu.clear_is_due) { lcd_clear_f(); menu.clear_is_due=0; menu.was_cleared=1;}
    126e:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_clear_f>
    1272:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <menu.2949+0x3>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <menu.2949+0x4>

	if (reset_to_main_menu) menu.current=0;
    127c:	11 11       	cpse	r17, r1
    127e:	78 cf       	rjmp	.-272    	; 0x1170 <update_menu+0x4c>

	//now for all the menus
	switch (menu.current){
    1280:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <menu.2949>
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	09 f4       	brne	.+2      	; 0x128a <update_menu+0x166>
    1288:	4a c0       	rjmp	.+148    	; 0x131e <update_menu+0x1fa>
    128a:	0c f4       	brge	.+2      	; 0x128e <update_menu+0x16a>
    128c:	5e c1       	rjmp	.+700    	; 0x154a <update_menu+0x426>
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	09 f4       	brne	.+2      	; 0x1294 <update_menu+0x170>
    1292:	7e c0       	rjmp	.+252    	; 0x1390 <update_menu+0x26c>
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	09 f0       	breq	.+2      	; 0x129a <update_menu+0x176>
    1298:	ad cf       	rjmp	.-166    	; 0x11f4 <update_menu+0xd0>
		break;

	case 3: //light settings, should probably be the same as above...could merge...
		//___light_menu___
		//start:dd_stop:dd
		if(menu.was_cleared){
    129a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <menu.2949+0x4>
    129e:	81 11       	cpse	r24, r1
    12a0:	57 c1       	rjmp	.+686    	; 0x1550 <update_menu+0x42c>
				lcd_puts_P(L("Stop:"));
				lcd_puts(temp2);
			}
		}

		if(menu.level==1){
    12a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	09 f4       	brne	.+2      	; 0x12ac <update_menu+0x188>
    12aa:	a3 c1       	rjmp	.+838    	; 0x15f2 <update_menu+0x4ce>
			cursor_pos= (item==2) ? 16 :( (item==1) ? 14+16 : 6+16);
			e_dir=0;
			b_pressed=0;
		}

		if(menu.level==2){
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <update_menu+0x18e>
    12b0:	a1 cf       	rjmp	.-190    	; 0x11f4 <update_menu+0xd0>
			//lcd_enable_blinking();
			if(e_dir){
    12b2:	ff 20       	and	r15, r15
    12b4:	a1 f0       	breq	.+40     	; 0x12de <update_menu+0x1ba>
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
    12b6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <item.2950>
    12ba:	81 11       	cpse	r24, r1
    12bc:	46 c3       	rjmp	.+1676   	; 0x194a <update_menu+0x826>
    12be:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <light_start_time>
    12c2:	8f 0d       	add	r24, r15
    12c4:	88 31       	cpi	r24, 0x18	; 24
    12c6:	0c f0       	brlt	.+2      	; 0x12ca <update_menu+0x1a6>
    12c8:	be c3       	rjmp	.+1916   	; 0x1a46 <update_menu+0x922>
    12ca:	87 fd       	sbrc	r24, 7
    12cc:	09 c4       	rjmp	.+2066   	; 0x1ae0 <update_menu+0x9bc>
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	f9 2e       	mov	r15, r25
    12d2:	f8 0e       	add	r15, r24
    12d4:	f0 92 19 01 	sts	0x0119, r15	; 0x800119 <light_start_time>
				if (item==1) { light_stop_time+=e_dir;  wrap_around(light_stop_time, 24);  }
				menu.clear_is_due=1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <menu.2949+0x3>
			}

			if(b_pressed){
    12de:	ee 20       	and	r14, r14
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <update_menu+0x1c0>
    12e2:	88 cf       	rjmp	.-240    	; 0x11f4 <update_menu+0xd0>
				menu.level=1;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menu.2949+0x1>
				//lcd_disable_blinking();
				if (item==0) EEPROM_compare(LIGHT_START_ADDRESS, light_start_time); ////////////////////////////////////////////////////////////////
    12ea:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <item.2950>
    12ee:	88 23       	and	r24, r24
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <update_menu+0x1d0>
    12f2:	68 c3       	rjmp	.+1744   	; 0x19c4 <update_menu+0x8a0>
				if (item==1) EEPROM_compare(LIGHT_STOP_ADDRESS , light_stop_time ); ////////////////////////////////////////////////////////////////
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <update_menu+0x1d6>
    12f8:	d7 c3       	rjmp	.+1966   	; 0x1aa8 <update_menu+0x984>
				menu.clear_is_due=1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <menu.2949+0x3>
    1300:	79 cf       	rjmp	.-270    	; 0x11f4 <update_menu+0xd0>

	//default level 0 actions
	if (menu.level == 0) {
		//e_dir: 1=left -1=right 0=nothing
		menu.current += e_dir;
		wrap_around(menu.current, NUM_MENUS);
    1302:	89 2f       	mov	r24, r25
    1304:	88 1f       	adc	r24, r24
    1306:	88 27       	eor	r24, r24
    1308:	88 1f       	adc	r24, r24
    130a:	88 0f       	add	r24, r24
    130c:	88 0f       	add	r24, r24
    130e:	98 0f       	add	r25, r24
    1310:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <menu.2949>
		//clear e_dir and the screen to avoid further interactions

		if (e_dir) menu.clear_is_due=1;
    1314:	f1 10       	cpse	r15, r1
    1316:	9c cf       	rjmp	.-200    	; 0x1250 <update_menu+0x12c>
		e_dir=0;
		//if button is pressed, move to level 1 and clear cursor_pos
		if (b_pressed) {
    1318:	e1 10       	cpse	r14, r1
    131a:	a0 cf       	rjmp	.-192    	; 0x125c <update_menu+0x138>
    131c:	22 cf       	rjmp	.-444    	; 0x1162 <update_menu+0x3e>
		//format:
		//_water_schedule_
		//DAY:_water_at_HH

		//print all of the neccessary info
		if (menu.was_cleared){
    131e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <menu.2949+0x4>
    1322:	81 11       	cpse	r24, r1
    1324:	b8 c0       	rjmp	.+368    	; 0x1496 <update_menu+0x372>
					else lcd_puts_P(L(": No water"));
				}
			}
		}

		if (menu.level==1){
    1326:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	09 f4       	brne	.+2      	; 0x1330 <update_menu+0x20c>
    132e:	83 c1       	rjmp	.+774    	; 0x1636 <update_menu+0x512>
			b_pressed=0;
			e_dir=0;

		}

		if (menu.level==2){
    1330:	82 30       	cpi	r24, 0x02	; 2
    1332:	09 f0       	breq	.+2      	; 0x1336 <update_menu+0x212>
    1334:	5f cf       	rjmp	.-322    	; 0x11f4 <update_menu+0xd0>
			water_schedule[item].is_being_changed=1;
    1336:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <item.2950>
    133a:	02 2e       	mov	r0, r18
    133c:	00 0c       	add	r0, r0
    133e:	33 0b       	sbc	r19, r19
    1340:	a9 01       	movw	r20, r18
    1342:	44 0f       	add	r20, r20
    1344:	55 1f       	adc	r21, r21
    1346:	44 0f       	add	r20, r20
    1348:	55 1f       	adc	r21, r21
    134a:	fa 01       	movw	r30, r20
    134c:	e4 5e       	subi	r30, 0xE4	; 228
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	82 83       	std	Z+2, r24	; 0x02
			water_schedule[item].hour+=e_dir;
    1354:	90 81       	ld	r25, Z
    1356:	9f 0d       	add	r25, r15
			wrap_around(water_schedule[item].hour, 25);
    1358:	99 31       	cpi	r25, 0x19	; 25
    135a:	0c f0       	brlt	.+2      	; 0x135e <update_menu+0x23a>
    135c:	d7 c1       	rjmp	.+942    	; 0x170c <update_menu+0x5e8>
    135e:	97 fd       	sbrc	r25, 7
    1360:	6e c3       	rjmp	.+1756   	; 0x1a3e <update_menu+0x91a>
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	69 0f       	add	r22, r25
    1366:	fa 01       	movw	r30, r20
    1368:	e4 5e       	subi	r30, 0xE4	; 228
    136a:	fe 4f       	sbci	r31, 0xFE	; 254
    136c:	60 83       	st	Z, r22

			//use hour==24 as an off condition
			if(water_schedule[item].hour==24) water_schedule[item].on=0;
    136e:	68 31       	cpi	r22, 0x18	; 24
    1370:	09 f4       	brne	.+2      	; 0x1374 <update_menu+0x250>
    1372:	ce c2       	rjmp	.+1436   	; 0x1910 <update_menu+0x7ec>
			else water_schedule[item].on=1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	81 83       	std	Z+1, r24	; 0x01

			if(b_pressed) {
    1378:	e1 10       	cpse	r14, r1
    137a:	b1 c2       	rjmp	.+1378   	; 0x18de <update_menu+0x7ba>
				EEPROM_compare(WATER_SCHEDULE_HOUR_BASE_ADDRESS + item , water_schedule[item].hour); ///////////////////////////////////////////////////////
				lcd_disable_blinking();
				menu.clear_is_due=1;
			}

			if (e_dir!=0) menu.clear_is_due=1;
    137c:	ff 20       	and	r15, r15
    137e:	19 f0       	breq	.+6      	; 0x1386 <update_menu+0x262>
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <menu.2949+0x3>
			b_pressed=0;
			e_dir=0;
			cursor_pos=16+4;
    1386:	84 e1       	ldi	r24, 0x14	; 20
    1388:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cursor_pos.2951>
    138c:	84 ec       	ldi	r24, 0xC4	; 196
    138e:	39 cf       	rjmp	.-398    	; 0x1202 <update_menu+0xde>

		break;

	case 2: //water amount setting
		//draw
		if(menu.was_cleared){
    1390:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <menu.2949+0x4>
    1394:	81 11       	cpse	r24, r1
    1396:	52 c0       	rjmp	.+164    	; 0x143c <update_menu+0x318>
			lcd_set_cursor(0,1);
			lcd_puts(temp);
			lcd_puts_P(L(" ml"));
		}

		if (menu.level==1){
    1398:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	09 f0       	breq	.+2      	; 0x13a2 <update_menu+0x27e>
    13a0:	29 cf       	rjmp	.-430    	; 0x11f4 <update_menu+0xd0>
			if(e_dir){
    13a2:	ff 20       	and	r15, r15
    13a4:	29 f1       	breq	.+74     	; 0x13f0 <update_menu+0x2cc>
				//fine control...increase water amount by 50 above 100ml, and by 10 under 100ml
				if (water_ml==100) water_ml+= (e_dir==1) ? 50 : -10;
    13a6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <water_ml>
    13aa:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <water_ml+0x1>
    13ae:	84 36       	cpi	r24, 0x64	; 100
    13b0:	91 05       	cpc	r25, r1
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <update_menu+0x292>
    13b4:	bf c2       	rjmp	.+1406   	; 0x1934 <update_menu+0x810>
				else if((0<water_ml) && (water_ml<100)) water_ml+=e_dir*10; //todo check this
    13b6:	9c 01       	movw	r18, r24
    13b8:	21 50       	subi	r18, 0x01	; 1
    13ba:	31 09       	sbc	r19, r1
    13bc:	23 36       	cpi	r18, 0x63	; 99
    13be:	31 05       	cpc	r19, r1
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <update_menu+0x2a0>
    13c2:	dd c2       	rjmp	.+1466   	; 0x197e <update_menu+0x85a>
    13c4:	2f 2d       	mov	r18, r15
    13c6:	3a e0       	ldi	r19, 0x0A	; 10
    13c8:	23 02       	muls	r18, r19
    13ca:	80 0d       	add	r24, r0
    13cc:	91 1d       	adc	r25, r1
    13ce:	11 24       	eor	r1, r1
				else water_ml+=e_dir*50;
				wrap_around(water_ml, 1000);
    13d0:	88 3e       	cpi	r24, 0xE8	; 232
    13d2:	23 e0       	ldi	r18, 0x03	; 3
    13d4:	92 07       	cpc	r25, r18
    13d6:	0c f4       	brge	.+2      	; 0x13da <update_menu+0x2b6>
    13d8:	b3 c2       	rjmp	.+1382   	; 0x1940 <update_menu+0x81c>
    13da:	28 e1       	ldi	r18, 0x18	; 24
    13dc:	3c ef       	ldi	r19, 0xFC	; 252
    13de:	82 0f       	add	r24, r18
    13e0:	93 1f       	adc	r25, r19
    13e2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <water_ml+0x1>
    13e6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <water_ml>
				menu.clear_is_due=1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <menu.2949+0x3>
			}
			if(b_pressed) {
    13f0:	e1 10       	cpse	r14, r1
    13f2:	bc c1       	rjmp	.+888    	; 0x176c <update_menu+0x648>
				menu.level=0;
				menu.clear_is_due=1;
				EEPROM_compare(WATER_AMOUNT_ADDRESS , water_ml / 10); ////////////////////////////////////////////////////////////////
			}

			cursor_pos=16;
    13f4:	80 e1       	ldi	r24, 0x10	; 16
    13f6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cursor_pos.2951>
    13fa:	80 ec       	ldi	r24, 0xC0	; 192
    13fc:	02 cf       	rjmp	.-508    	; 0x1202 <update_menu+0xde>
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	80 68       	ori	r24, 0x80	; 128
    1402:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
    1406:	00 cf       	rjmp	.-512    	; 0x1208 <update_menu+0xe4>


	lcd_off(); //switch off the lcd, and switch it on at the end

	//enable cursor for menu levels above 0
	if ((menu.level > 0) && !menu.cursor_on) {lcd_enable_cursor();	menu.cursor_on=1;}
    1408:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_enable_cursor>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <menu.2949+0x2>
	if ((menu.level == 0) && menu.cursor_on) {lcd_disable_cursor();	menu.cursor_on=0;}
    1412:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    1416:	81 11       	cpse	r24, r1
    1418:	a4 ce       	rjmp	.-696    	; 0x1162 <update_menu+0x3e>
    141a:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_disable_cursor>
    141e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <menu.2949+0x2>

	//default level 0 actions
	if (menu.level == 0) {
    1422:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    1426:	81 11       	cpse	r24, r1
    1428:	9c ce       	rjmp	.-712    	; 0x1162 <update_menu+0x3e>
		//e_dir: 1=left -1=right 0=nothing
		menu.current += e_dir;
    142a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <menu.2949>
    142e:	9f 0d       	add	r25, r15
		wrap_around(menu.current, NUM_MENUS);
    1430:	94 30       	cpi	r25, 0x04	; 4
    1432:	0c f0       	brlt	.+2      	; 0x1436 <update_menu+0x312>
    1434:	06 cf       	rjmp	.-500    	; 0x1242 <update_menu+0x11e>
    1436:	65 cf       	rjmp	.-310    	; 0x1302 <update_menu+0x1de>
		//clear e_dir and the screen to avoid further interactions

		if (e_dir) menu.clear_is_due=1;
		e_dir=0;
    1438:	f1 2c       	mov	r15, r1
    143a:	19 cf       	rjmp	.-462    	; 0x126e <update_menu+0x14a>

	case 2: //water amount setting
		//draw
		if(menu.was_cleared){
			char temp[6];
			ltoa(water_ml, temp, 10);
    143c:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <water_ml>
    1440:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <water_ml+0x1>
    1444:	07 2e       	mov	r0, r23
    1446:	00 0c       	add	r0, r0
    1448:	88 0b       	sbc	r24, r24
    144a:	99 0b       	sbc	r25, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    144c:	2a e0       	ldi	r18, 0x0A	; 10
    144e:	ae 01       	movw	r20, r28
    1450:	4f 5f       	subi	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__ltoa_ncheck>
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	80 e8       	ldi	r24, 0x80	; 128
    145c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

			lcd_set_cursor(0,0);
			lcd_puts_P(L("  Water Amount  "));
    1460:	82 e3       	ldi	r24, 0x32	; 50
    1462:	92 e0       	ldi	r25, 0x02	; 2
    1464:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	80 ec       	ldi	r24, 0xC0	; 192
    146c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	88 23       	and	r24, r24
    1474:	59 f0       	breq	.+22     	; 0x148c <update_menu+0x368>
    1476:	8e 01       	movw	r16, r28
    1478:	0e 5f       	subi	r16, 0xFE	; 254
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    147c:	61 e0       	ldi	r22, 0x01	; 1
    147e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1482:	f8 01       	movw	r30, r16
    1484:	81 91       	ld	r24, Z+
    1486:	8f 01       	movw	r16, r30
    1488:	81 11       	cpse	r24, r1
    148a:	f8 cf       	rjmp	.-16     	; 0x147c <update_menu+0x358>

			lcd_set_cursor(0,1);
			lcd_puts(temp);
			lcd_puts_P(L(" ml"));
    148c:	8e e2       	ldi	r24, 0x2E	; 46
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
    1494:	81 cf       	rjmp	.-254    	; 0x1398 <update_menu+0x274>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	80 e8       	ldi	r24, 0x80	; 128
    149a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
		//DAY:_water_at_HH

		//print all of the neccessary info
		if (menu.was_cleared){
			lcd_set_cursor(0,0);
			lcd_puts_P(L(" Water Schedule "));
    149e:	8b e6       	ldi	r24, 0x6B	; 107
    14a0:	92 e0       	ldi	r25, 0x02	; 2
    14a2:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>

			//display level 1 or 2 settings if on that level
			if (menu.level>=1){
    14a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    14aa:	88 23       	and	r24, r24
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <update_menu+0x38c>
    14ae:	a2 ce       	rjmp	.-700    	; 0x11f4 <update_menu+0xd0>
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	80 ec       	ldi	r24, 0xC0	; 192
    14b4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
				lcd_set_cursor(0,1);
				//8th item: back option
				if (item==7) lcd_puts_P(L("Back            "));
    14b8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <item.2950>
    14bc:	87 30       	cpi	r24, 0x07	; 7
    14be:	09 f4       	brne	.+2      	; 0x14c2 <update_menu+0x39e>
    14c0:	ec c2       	rjmp	.+1496   	; 0x1a9a <update_menu+0x976>
				//1-7th items: day with corresponding schedule
				else {
					//display the day
					lcd_puts_P(day_name[item]);
    14c2:	f7 e0       	ldi	r31, 0x07	; 7
    14c4:	8f 02       	muls	r24, r31
    14c6:	c0 01       	movw	r24, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	80 56       	subi	r24, 0x60	; 96
    14cc:	9d 4f       	sbci	r25, 0xFD	; 253
    14ce:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
					//if water is scheduled, write ": Water at " and the hour
					if (water_schedule[item].on){
    14d2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <item.2950>
    14d6:	24 e0       	ldi	r18, 0x04	; 4
    14d8:	e2 02       	muls	r30, r18
    14da:	f0 01       	movw	r30, r0
    14dc:	11 24       	eor	r1, r1
    14de:	e4 5e       	subi	r30, 0xE4	; 228
    14e0:	fe 4f       	sbci	r31, 0xFE	; 254
    14e2:	81 81       	ldd	r24, Z+1	; 0x01
    14e4:	88 23       	and	r24, r24
    14e6:	09 f4       	brne	.+2      	; 0x14ea <update_menu+0x3c6>
    14e8:	b5 c2       	rjmp	.+1386   	; 0x1a54 <update_menu+0x930>
						lcd_puts_P(L(": Water at "));
    14ea:	8e e4       	ldi	r24, 0x4E	; 78
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
						//get hour in string format
						char temp[3]={0};
    14f2:	19 82       	std	Y+1, r1	; 0x01
    14f4:	1a 82       	std	Y+2, r1	; 0x02
    14f6:	1b 82       	std	Y+3, r1	; 0x03
						temp[0]='0' + (water_schedule[item].hour / 10);
    14f8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <item.2950>
    14fc:	34 e0       	ldi	r19, 0x04	; 4
    14fe:	e3 02       	muls	r30, r19
    1500:	f0 01       	movw	r30, r0
    1502:	11 24       	eor	r1, r1
    1504:	e4 5e       	subi	r30, 0xE4	; 228
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	10 81       	ld	r17, Z
    150a:	97 e6       	ldi	r25, 0x67	; 103
    150c:	19 02       	muls	r17, r25
    150e:	91 2d       	mov	r25, r1
    1510:	11 24       	eor	r1, r1
    1512:	95 95       	asr	r25
    1514:	95 95       	asr	r25
    1516:	17 fd       	sbrc	r17, 7
    1518:	93 95       	inc	r25
    151a:	80 e3       	ldi	r24, 0x30	; 48
    151c:	89 0f       	add	r24, r25
    151e:	89 83       	std	Y+1, r24	; 0x01
						temp[1]='0' + (water_schedule[item].hour % 10);
    1520:	ea e0       	ldi	r30, 0x0A	; 10
    1522:	9e 9f       	mul	r25, r30
    1524:	10 19       	sub	r17, r0
    1526:	11 24       	eor	r1, r1
    1528:	10 5d       	subi	r17, 0xD0	; 208
    152a:	1a 83       	std	Y+2, r17	; 0x02
    152c:	6e 01       	movw	r12, r28
    152e:	f3 e0       	ldi	r31, 0x03	; 3
    1530:	cf 0e       	add	r12, r31
    1532:	d1 1c       	adc	r13, r1
    1534:	04 c0       	rjmp	.+8      	; 0x153e <update_menu+0x41a>
    1536:	81 2f       	mov	r24, r17

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1538:	f6 01       	movw	r30, r12
    153a:	11 91       	ld	r17, Z+
    153c:	6f 01       	movw	r12, r30
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1544:	11 11       	cpse	r17, r1
    1546:	f7 cf       	rjmp	.-18     	; 0x1536 <update_menu+0x412>
    1548:	ee ce       	rjmp	.-548    	; 0x1326 <update_menu+0x202>
	if (menu.clear_is_due) { lcd_clear_f(); menu.clear_is_due=0; menu.was_cleared=1;}

	if (reset_to_main_menu) menu.current=0;

	//now for all the menus
	switch (menu.current){
    154a:	81 11       	cpse	r24, r1
    154c:	53 ce       	rjmp	.-858    	; 0x11f4 <update_menu+0xd0>
    154e:	12 ce       	rjmp	.-988    	; 0x1174 <update_menu+0x50>
	case 3: //light settings, should probably be the same as above...could merge...
		//___light_menu___
		//start:dd_stop:dd
		if(menu.was_cleared){
			char temp1[3], temp2[3];
			itoa(light_start_time, temp1, 10);
    1550:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <light_start_time>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1554:	4a e0       	ldi	r20, 0x0A	; 10
    1556:	be 01       	movw	r22, r28
    1558:	69 5f       	subi	r22, 0xF9	; 249
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	08 2e       	mov	r0, r24
    155e:	00 0c       	add	r0, r0
    1560:	99 0b       	sbc	r25, r25
    1562:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__itoa_ncheck>
			itoa(light_stop_time, temp2, 10);
    1566:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <light_stop_time>
    156a:	4a e0       	ldi	r20, 0x0A	; 10
    156c:	be 01       	movw	r22, r28
    156e:	6f 5f       	subi	r22, 0xFF	; 255
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	08 2e       	mov	r0, r24
    1574:	00 0c       	add	r0, r0
    1576:	99 0b       	sbc	r25, r25
    1578:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__itoa_ncheck>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	80 e8       	ldi	r24, 0x80	; 128
    1580:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

			lcd_set_cursor(0,0);
			lcd_puts_P(L("   Light Menu   "));
    1584:	8d e1       	ldi	r24, 0x1D	; 29
    1586:	92 e0       	ldi	r25, 0x02	; 2
    1588:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>

			if(item==2){ lcd_set_cursor(0,1); lcd_puts_P(L("Back")); }
    158c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <item.2950>
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	09 f4       	brne	.+2      	; 0x1598 <update_menu+0x474>
    1596:	e2 c0       	rjmp	.+452    	; 0x175c <update_menu+0x638>
    1598:	80 ec       	ldi	r24, 0xC0	; 192
    159a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
			else{
				lcd_set_cursor(0,1);
				lcd_puts_P(L("Start:"));
    159e:	81 e1       	ldi	r24, 0x11	; 17
    15a0:	92 e0       	ldi	r25, 0x02	; 2
    15a2:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    15a6:	8f 81       	ldd	r24, Y+7	; 0x07
    15a8:	88 23       	and	r24, r24
    15aa:	59 f0       	breq	.+22     	; 0x15c2 <update_menu+0x49e>
    15ac:	8e 01       	movw	r16, r28
    15ae:	08 5f       	subi	r16, 0xF8	; 248
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    15b8:	f8 01       	movw	r30, r16
    15ba:	81 91       	ld	r24, Z+
    15bc:	8f 01       	movw	r16, r30
    15be:	81 11       	cpse	r24, r1
    15c0:	f8 cf       	rjmp	.-16     	; 0x15b2 <update_menu+0x48e>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	89 ec       	ldi	r24, 0xC9	; 201
    15c6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
				lcd_puts(temp1);

				lcd_set_cursor(9,1);
				lcd_puts_P(L("Stop:"));
    15ca:	8b e0       	ldi	r24, 0x0B	; 11
    15cc:	92 e0       	ldi	r25, 0x02	; 2
    15ce:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	88 23       	and	r24, r24
    15d6:	09 f4       	brne	.+2      	; 0x15da <update_menu+0x4b6>
    15d8:	64 ce       	rjmp	.-824    	; 0x12a2 <update_menu+0x17e>
    15da:	8e 01       	movw	r16, r28
    15dc:	0e 5f       	subi	r16, 0xFE	; 254
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    15e6:	f8 01       	movw	r30, r16
    15e8:	81 91       	ld	r24, Z+
    15ea:	8f 01       	movw	r16, r30
    15ec:	81 11       	cpse	r24, r1
    15ee:	f8 cf       	rjmp	.-16     	; 0x15e0 <update_menu+0x4bc>
    15f0:	58 ce       	rjmp	.-848    	; 0x12a2 <update_menu+0x17e>
			}
		}

		if(menu.level==1){
			if(e_dir){
				item+=e_dir;
    15f2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <item.2950>
				lcd_puts(temp2);
			}
		}

		if(menu.level==1){
			if(e_dir){
    15f6:	ff 20       	and	r15, r15
    15f8:	69 f0       	breq	.+26     	; 0x1614 <update_menu+0x4f0>
				item+=e_dir;
    15fa:	8f 0d       	add	r24, r15
				wrap_around(item, 3);
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	0c f0       	brlt	.+2      	; 0x1602 <update_menu+0x4de>
    1600:	97 c1       	rjmp	.+814    	; 0x1930 <update_menu+0x80c>
    1602:	87 fd       	sbrc	r24, 7
    1604:	5b c2       	rjmp	.+1206   	; 0x1abc <update_menu+0x998>
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	89 0f       	add	r24, r25
    160a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <item.2950>
				menu.clear_is_due=1;
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <menu.2949+0x3>
			}
			if(b_pressed){
    1614:	ee 20       	and	r14, r14
    1616:	09 f4       	brne	.+2      	; 0x161a <update_menu+0x4f6>
    1618:	87 c0       	rjmp	.+270    	; 0x1728 <update_menu+0x604>
				if (item==2) {menu.level=0; item=0;}
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	09 f4       	brne	.+2      	; 0x1620 <update_menu+0x4fc>
    161e:	09 c2       	rjmp	.+1042   	; 0x1a32 <update_menu+0x90e>
				else menu.level=2;
    1620:	92 e0       	ldi	r25, 0x02	; 2
    1622:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <menu.2949+0x1>
				menu.clear_is_due=1;
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <menu.2949+0x3>

			}

			cursor_pos= (item==2) ? 16 :( (item==1) ? 14+16 : 6+16);
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	09 f4       	brne	.+2      	; 0x1632 <update_menu+0x50e>
    1630:	a4 c1       	rjmp	.+840    	; 0x197a <update_menu+0x856>
    1632:	86 e1       	ldi	r24, 0x16	; 22
    1634:	7d c0       	rjmp	.+250    	; 0x1730 <update_menu+0x60c>
				}
			}
		}

		if (menu.level==1){
			item+=e_dir;
    1636:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <item.2950>
    163a:	9f 0d       	add	r25, r15
			wrap_around(item, 8);
    163c:	98 30       	cpi	r25, 0x08	; 8
    163e:	0c f4       	brge	.+2      	; 0x1642 <update_menu+0x51e>
    1640:	6b c0       	rjmp	.+214    	; 0x1718 <update_menu+0x5f4>
    1642:	28 ef       	ldi	r18, 0xF8	; 248
    1644:	92 0f       	add	r25, r18
    1646:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <item.2950>

			if (b_pressed){
    164a:	ee 20       	and	r14, r14
    164c:	49 f0       	breq	.+18     	; 0x1660 <update_menu+0x53c>
				if (item==7) {menu.level=0; menu.clear_is_due=1;}
    164e:	97 30       	cpi	r25, 0x07	; 7
    1650:	09 f0       	breq	.+2      	; 0x1654 <update_menu+0x530>
    1652:	60 c1       	rjmp	.+704    	; 0x1914 <update_menu+0x7f0>
    1654:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <menu.2949+0x1>
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <menu.2949+0x3>
    165e:	80 e0       	ldi	r24, 0x00	; 0
					menu.level=2;
					lcd_enable_blinking();
				}
			}

			cursor_pos=16+0;
    1660:	90 e1       	ldi	r25, 0x10	; 16
    1662:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cursor_pos.2951>
			if (e_dir!=0) menu.clear_is_due=1;
    1666:	ff 20       	and	r15, r15
    1668:	09 f4       	brne	.+2      	; 0x166c <update_menu+0x548>
    166a:	c4 cd       	rjmp	.-1144   	; 0x11f4 <update_menu+0xd0>
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <menu.2949+0x3>
			b_pressed=0;
    1672:	e1 2c       	mov	r14, r1
			e_dir=0;
    1674:	f1 2c       	mov	r15, r1
    1676:	5c ce       	rjmp	.-840    	; 0x1330 <update_menu+0x20c>
			time.has_changed=0;
		}

		//change the time
		if (menu.level==1){
			item+=e_dir;
    1678:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <item.2950>
    167c:	8f 0d       	add	r24, r15
			e_dir=0;
			wrap_around(item, 5);
    167e:	85 30       	cpi	r24, 0x05	; 5
    1680:	0c f4       	brge	.+2      	; 0x1684 <update_menu+0x560>
    1682:	46 c0       	rjmp	.+140    	; 0x1710 <update_menu+0x5ec>
    1684:	9b ef       	ldi	r25, 0xFB	; 251
    1686:	89 0f       	add	r24, r25
    1688:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <item.2950>
			//choose what to show based on cursor pos
			switch(item){
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	09 f4       	brne	.+2      	; 0x1692 <update_menu+0x56e>
    1690:	7d c1       	rjmp	.+762    	; 0x198c <update_menu+0x868>
    1692:	0c f0       	brlt	.+2      	; 0x1696 <update_menu+0x572>
    1694:	18 c1       	rjmp	.+560    	; 0x18c6 <update_menu+0x7a2>
    1696:	88 23       	and	r24, r24
    1698:	09 f4       	brne	.+2      	; 0x169c <update_menu+0x578>
    169a:	7c c1       	rjmp	.+760    	; 0x1994 <update_menu+0x870>
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	09 f0       	breq	.+2      	; 0x16a2 <update_menu+0x57e>
    16a0:	77 c0       	rjmp	.+238    	; 0x1790 <update_menu+0x66c>
			case 0: cursor_pos=1; break; //set on hour
			case 1: cursor_pos=6; break; //set on hour
    16a2:	86 e0       	ldi	r24, 0x06	; 6
    16a4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cursor_pos.2951>
			case 2: cursor_pos=9; break;//set on minutes
			case 3: cursor_pos=12; break;//set on seconds
			case 4: cursor_pos=16 + 11; break;//exit to level 0
			}
			//choose what to do for button press based on cursor pos
			if (b_pressed) switch(item){
    16a8:	ee 20       	and	r14, r14
    16aa:	09 f4       	brne	.+2      	; 0x16ae <update_menu+0x58a>
    16ac:	a3 cd       	rjmp	.-1210   	; 0x11f4 <update_menu+0xd0>
			case 0:
			case 1:
			case 2:
			case 3: menu.level=2; break;
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menu.2949+0x1>
			}
			b_pressed=0;
		}

		if(menu.level==2){
			time.is_being_changed=1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <time+0x7>
			lcd_enable_blinking();
    16ba:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_enable_blinking>

			switch(item){
    16be:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <item.2950>
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <update_menu+0x5a4>
    16c6:	cb c1       	rjmp	.+918    	; 0x1a5e <update_menu+0x93a>
    16c8:	0c f4       	brge	.+2      	; 0x16cc <update_menu+0x5a8>
    16ca:	02 c2       	rjmp	.+1028   	; 0x1ad0 <update_menu+0x9ac>
    16cc:	82 30       	cpi	r24, 0x02	; 2
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <update_menu+0x5ae>
    16d0:	d5 c1       	rjmp	.+938    	; 0x1a7c <update_menu+0x958>
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	89 f4       	brne	.+34     	; 0x16f8 <update_menu+0x5d4>
		}

		//change the time
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
    16d6:	f1 2c       	mov	r15, r1
			case 1:
			case 2:
			case 3: menu.level=2; break;
			case 4: menu.level=0; menu.clear_is_due=1; break;//exit to level 0
			}
			b_pressed=0;
    16d8:	e1 2c       	mov	r14, r1

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
			case 3: time.seconds+=e_dir;	wrap_around(time.seconds, 60); 	break;//set on seconds
    16da:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <time+0x2>
    16de:	8f 0d       	add	r24, r15
    16e0:	8c 33       	cpi	r24, 0x3C	; 60
    16e2:	0c f0       	brlt	.+2      	; 0x16e6 <update_menu+0x5c2>
    16e4:	f3 c1       	rjmp	.+998    	; 0x1acc <update_menu+0x9a8>
    16e6:	87 fd       	sbrc	r24, 7
    16e8:	01 c2       	rjmp	.+1026   	; 0x1aec <update_menu+0x9c8>
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	f9 2e       	mov	r15, r25
    16ee:	f8 0e       	add	r15, r24
    16f0:	f0 92 e7 01 	sts	0x01E7, r15	; 0x8001e7 <time+0x2>
			}
			if (b_pressed) {
    16f4:	e1 10       	cpse	r14, r1
    16f6:	6d c1       	rjmp	.+730    	; 0x19d2 <update_menu+0x8ae>
				rtc_set_time(&_tm);
				time.is_being_changed=0;
			}
			b_pressed=0;
			e_dir=0;
			format_2_string(&time);
    16f8:	85 ee       	ldi	r24, 0xE5	; 229
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	0e 94 67 06 	call	0xcce	; 0xcce <format_2_string>
    1700:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <cursor_pos.2951>
    1704:	79 cd       	rjmp	.-1294   	; 0x11f8 <update_menu+0xd4>
    1706:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    170a:	6e cd       	rjmp	.-1316   	; 0x11e8 <update_menu+0xc4>
		}

		if (menu.level==2){
			water_schedule[item].is_being_changed=1;
			water_schedule[item].hour+=e_dir;
			wrap_around(water_schedule[item].hour, 25);
    170c:	67 ee       	ldi	r22, 0xE7	; 231
    170e:	2a ce       	rjmp	.-940    	; 0x1364 <update_menu+0x240>

		//change the time
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
			wrap_around(item, 5);
    1710:	87 fd       	sbrc	r24, 7
    1712:	97 c1       	rjmp	.+814    	; 0x1a42 <update_menu+0x91e>
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	b7 cf       	rjmp	.-146    	; 0x1686 <update_menu+0x562>
			}
		}

		if (menu.level==1){
			item+=e_dir;
			wrap_around(item, 8);
    1718:	29 2f       	mov	r18, r25
    171a:	22 1f       	adc	r18, r18
    171c:	22 27       	eor	r18, r18
    171e:	22 1f       	adc	r18, r18
    1720:	22 0f       	add	r18, r18
    1722:	22 0f       	add	r18, r18
    1724:	22 0f       	add	r18, r18
    1726:	8e cf       	rjmp	.-228    	; 0x1644 <update_menu+0x520>
				else menu.level=2;
				menu.clear_is_due=1;

			}

			cursor_pos= (item==2) ? 16 :( (item==1) ? 14+16 : 6+16);
    1728:	82 30       	cpi	r24, 0x02	; 2
    172a:	09 f0       	breq	.+2      	; 0x172e <update_menu+0x60a>
    172c:	7f cf       	rjmp	.-258    	; 0x162c <update_menu+0x508>
    172e:	80 e1       	ldi	r24, 0x10	; 16
    1730:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cursor_pos.2951>
    1734:	64 cd       	rjmp	.-1336   	; 0x11fe <update_menu+0xda>
			}
			b_pressed=0;
		}

		if(menu.level==2){
			time.is_being_changed=1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <time+0x7>
			lcd_enable_blinking();
    173c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_enable_blinking>

			switch(item){
    1740:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <item.2950>
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	09 f4       	brne	.+2      	; 0x174a <update_menu+0x626>
    1748:	8c c1       	rjmp	.+792    	; 0x1a62 <update_menu+0x93e>
    174a:	0c f4       	brge	.+2      	; 0x174e <update_menu+0x62a>
    174c:	2b c1       	rjmp	.+598    	; 0x19a4 <update_menu+0x880>
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	09 f4       	brne	.+2      	; 0x1754 <update_menu+0x630>
    1752:	96 c1       	rjmp	.+812    	; 0x1a80 <update_menu+0x95c>
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	09 f4       	brne	.+2      	; 0x175a <update_menu+0x636>
    1758:	c0 cf       	rjmp	.-128    	; 0x16da <update_menu+0x5b6>
    175a:	cc cf       	rjmp	.-104    	; 0x16f4 <update_menu+0x5d0>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    175c:	80 ec       	ldi	r24, 0xC0	; 192
    175e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
			itoa(light_stop_time, temp2, 10);

			lcd_set_cursor(0,0);
			lcd_puts_P(L("   Light Menu   "));

			if(item==2){ lcd_set_cursor(0,1); lcd_puts_P(L("Back")); }
    1762:	88 e1       	ldi	r24, 0x18	; 24
    1764:	92 e0       	ldi	r25, 0x02	; 2
    1766:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
    176a:	9b cd       	rjmp	.-1226   	; 0x12a2 <update_menu+0x17e>
				else water_ml+=e_dir*50;
				wrap_around(water_ml, 1000);
				menu.clear_is_due=1;
			}
			if(b_pressed) {
				menu.level=0;
    176c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <menu.2949+0x1>
				menu.clear_is_due=1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <menu.2949+0x3>
				EEPROM_compare(WATER_AMOUNT_ADDRESS , water_ml / 10); ////////////////////////////////////////////////////////////////
    1776:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <water_ml>
    177a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <water_ml+0x1>
    177e:	6a e0       	ldi	r22, 0x0A	; 10
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__divmodhi4>
    1786:	8e e0       	ldi	r24, 0x0E	; 14
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 80 08 	call	0x1100	; 0x1100 <EEPROM_compare>
    178e:	32 ce       	rjmp	.-924    	; 0x13f4 <update_menu+0x2d0>
			case 2: cursor_pos=9; break;//set on minutes
			case 3: cursor_pos=12; break;//set on seconds
			case 4: cursor_pos=16 + 11; break;//exit to level 0
			}
			//choose what to do for button press based on cursor pos
			if (b_pressed) switch(item){
    1790:	ee 20       	and	r14, r14
    1792:	09 f4       	brne	.+2      	; 0x1796 <update_menu+0x672>
    1794:	2f cd       	rjmp	.-1442   	; 0x11f4 <update_menu+0xd0>
    1796:	87 fd       	sbrc	r24, 7
    1798:	2d cd       	rjmp	.-1446   	; 0x11f4 <update_menu+0xd0>
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	0c f4       	brge	.+2      	; 0x17a0 <update_menu+0x67c>
    179e:	87 cf       	rjmp	.-242    	; 0x16ae <update_menu+0x58a>
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <update_menu+0x682>
    17a4:	27 cd       	rjmp	.-1458   	; 0x11f4 <update_menu+0xd0>
			case 0:
			case 1:
			case 2:
			case 3: menu.level=2; break;
			case 4: menu.level=0; menu.clear_is_due=1; break;//exit to level 0
    17a6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <menu.2949+0x1>
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <menu.2949+0x3>
    17b0:	21 cd       	rjmp	.-1470   	; 0x11f4 <update_menu+0xd0>
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	80 ec       	ldi	r24, 0xC0	; 192
    17b6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
			lcd_set_cursor(6,0);
			lcd_puts(time.whole_time);

			if (menu.level==0){
				lcd_set_cursor(0,1);
				lcd_puts_P(L("W:"));
    17ba:	8d e9       	ldi	r24, 0x9D	; 157
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
				if (water_schedule[time.days].hour==24) lcd_puts_P(L("//"));
    17c2:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <time+0x5>
    17c6:	24 e0       	ldi	r18, 0x04	; 4
    17c8:	e2 02       	muls	r30, r18
    17ca:	f0 01       	movw	r30, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	e4 5e       	subi	r30, 0xE4	; 228
    17d0:	fe 4f       	sbci	r31, 0xFE	; 254
    17d2:	10 81       	ld	r17, Z
    17d4:	18 31       	cpi	r17, 0x18	; 24
    17d6:	09 f4       	brne	.+2      	; 0x17da <update_menu+0x6b6>
    17d8:	38 c1       	rjmp	.+624    	; 0x1a4a <update_menu+0x926>
				else{
					temp[0]='0' + (water_schedule[time.days].hour / 10); //todo check if this works
    17da:	97 e6       	ldi	r25, 0x67	; 103
    17dc:	19 02       	muls	r17, r25
    17de:	91 2d       	mov	r25, r1
    17e0:	11 24       	eor	r1, r1
    17e2:	95 95       	asr	r25
    17e4:	95 95       	asr	r25
    17e6:	17 fd       	sbrc	r17, 7
    17e8:	93 95       	inc	r25
    17ea:	80 e3       	ldi	r24, 0x30	; 48
    17ec:	89 0f       	add	r24, r25
    17ee:	89 83       	std	Y+1, r24	; 0x01
					temp[1]='0' + (water_schedule[time.days].hour % 10);
    17f0:	3a e0       	ldi	r19, 0x0A	; 10
    17f2:	93 9f       	mul	r25, r19
    17f4:	10 19       	sub	r17, r0
    17f6:	11 24       	eor	r1, r1
    17f8:	10 5d       	subi	r17, 0xD0	; 208
    17fa:	1a 83       	std	Y+2, r17	; 0x02
    17fc:	6e 01       	movw	r12, r28
    17fe:	93 e0       	ldi	r25, 0x03	; 3
    1800:	c9 0e       	add	r12, r25
    1802:	d1 1c       	adc	r13, r1
    1804:	04 c0       	rjmp	.+8      	; 0x180e <update_menu+0x6ea>
    1806:	81 2f       	mov	r24, r17

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1808:	f6 01       	movw	r30, r12
    180a:	11 91       	ld	r17, Z+
    180c:	6f 01       	movw	r12, r30
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1814:	11 11       	cpse	r17, r1
    1816:	f7 cf       	rjmp	.-18     	; 0x1806 <update_menu+0x6e2>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	88 ec       	ldi	r24, 0xC8	; 200
    181c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
					lcd_puts(temp);
				}

				lcd_set_cursor(8,1);
				if (light_stop_time==light_start_time) lcd_puts_P(L("L: off"));
    1820:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <light_stop_time>
    1824:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <light_start_time>
    1828:	98 17       	cp	r25, r24
    182a:	09 f4       	brne	.+2      	; 0x182e <update_menu+0x70a>
    182c:	9f c0       	rjmp	.+318    	; 0x196c <update_menu+0x848>
				else{

					lcd_puts_P(L("L:"));
    182e:	80 e9       	ldi	r24, 0x90	; 144
    1830:	92 e0       	ldi	r25, 0x02	; 2
    1832:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
					temp[0]='0' + (light_start_time / 10);
    1836:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <light_start_time>
    183a:	97 e6       	ldi	r25, 0x67	; 103
    183c:	19 02       	muls	r17, r25
    183e:	91 2d       	mov	r25, r1
    1840:	11 24       	eor	r1, r1
    1842:	95 95       	asr	r25
    1844:	95 95       	asr	r25
    1846:	17 fd       	sbrc	r17, 7
    1848:	93 95       	inc	r25
    184a:	80 e3       	ldi	r24, 0x30	; 48
    184c:	89 0f       	add	r24, r25
    184e:	89 83       	std	Y+1, r24	; 0x01
					temp[1]='0' + (light_start_time % 10);
    1850:	fa e0       	ldi	r31, 0x0A	; 10
    1852:	9f 9f       	mul	r25, r31
    1854:	10 19       	sub	r17, r0
    1856:	11 24       	eor	r1, r1
    1858:	10 5d       	subi	r17, 0xD0	; 208
    185a:	1a 83       	std	Y+2, r17	; 0x02
    185c:	9e 01       	movw	r18, r28
    185e:	2d 5f       	subi	r18, 0xFD	; 253
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	69 01       	movw	r12, r18
    1864:	04 c0       	rjmp	.+8      	; 0x186e <update_menu+0x74a>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1866:	81 2f       	mov	r24, r17
    1868:	f6 01       	movw	r30, r12
    186a:	11 91       	ld	r17, Z+
    186c:	6f 01       	movw	r12, r30
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    1874:	11 11       	cpse	r17, r1
    1876:	f7 cf       	rjmp	.-18     	; 0x1866 <update_menu+0x742>
					lcd_puts(temp);
					lcd_puts_P(L("-"));
    1878:	8e e8       	ldi	r24, 0x8E	; 142
    187a:	92 e0       	ldi	r25, 0x02	; 2
    187c:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
					temp[0]='0' + (light_stop_time / 10);
    1880:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <light_stop_time>
    1884:	97 e6       	ldi	r25, 0x67	; 103
    1886:	19 02       	muls	r17, r25
    1888:	91 2d       	mov	r25, r1
    188a:	11 24       	eor	r1, r1
    188c:	95 95       	asr	r25
    188e:	95 95       	asr	r25
    1890:	17 fd       	sbrc	r17, 7
    1892:	93 95       	inc	r25
    1894:	80 e3       	ldi	r24, 0x30	; 48
    1896:	89 0f       	add	r24, r25
    1898:	89 83       	std	Y+1, r24	; 0x01
					temp[1]='0' + (light_stop_time % 10);
    189a:	3a e0       	ldi	r19, 0x0A	; 10
    189c:	93 9f       	mul	r25, r19
    189e:	10 19       	sub	r17, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	10 5d       	subi	r17, 0xD0	; 208
    18a4:	1a 83       	std	Y+2, r17	; 0x02
    18a6:	fe 01       	movw	r30, r28
    18a8:	33 96       	adiw	r30, 0x03	; 3
    18aa:	6f 01       	movw	r12, r30
    18ac:	04 c0       	rjmp	.+8      	; 0x18b6 <update_menu+0x792>
    18ae:	81 2f       	mov	r24, r17
    18b0:	f6 01       	movw	r30, r12
    18b2:	11 91       	ld	r17, Z+
    18b4:	6f 01       	movw	r12, r30
void lcd_command(uint8_t command) {
  lcd_send(command, 0);
}

void lcd_write(uint8_t value) {
  lcd_send(value, 1);
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>

  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
    18bc:	11 11       	cpse	r17, r1
    18be:	f7 cf       	rjmp	.-18     	; 0x18ae <update_menu+0x78a>
    18c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    18c4:	8f cc       	rjmp	.-1762   	; 0x11e4 <update_menu+0xc0>
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
			wrap_around(item, 5);
			//choose what to show based on cursor pos
			switch(item){
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	09 f4       	brne	.+2      	; 0x18cc <update_menu+0x7a8>
    18ca:	68 c0       	rjmp	.+208    	; 0x199c <update_menu+0x878>
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <update_menu+0x7ae>
    18d0:	5f cf       	rjmp	.-322    	; 0x1790 <update_menu+0x66c>
			case 0: cursor_pos=1; break; //set on hour
			case 1: cursor_pos=6; break; //set on hour
			case 2: cursor_pos=9; break;//set on minutes
			case 3: cursor_pos=12; break;//set on seconds
			case 4: cursor_pos=16 + 11; break;//exit to level 0
    18d2:	8b e1       	ldi	r24, 0x1B	; 27
    18d4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cursor_pos.2951>
			}
			//choose what to do for button press based on cursor pos
			if (b_pressed) switch(item){
    18d8:	e1 10       	cpse	r14, r1
    18da:	65 cf       	rjmp	.-310    	; 0x17a6 <update_menu+0x682>
    18dc:	8b cc       	rjmp	.-1770   	; 0x11f4 <update_menu+0xd0>
			//use hour==24 as an off condition
			if(water_schedule[item].hour==24) water_schedule[item].on=0;
			else water_schedule[item].on=1;

			if(b_pressed) {
				menu.level=1;
    18de:	11 e0       	ldi	r17, 0x01	; 1
    18e0:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <menu.2949+0x1>
				water_schedule[item].is_being_changed=0;
    18e4:	fa 01       	movw	r30, r20
    18e6:	e4 5e       	subi	r30, 0xE4	; 228
    18e8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ea:	12 82       	std	Z+2, r1	; 0x02
				EEPROM_compare(WATER_SCHEDULE_HOUR_BASE_ADDRESS + item , water_schedule[item].hour); ///////////////////////////////////////////////////////
    18ec:	c9 01       	movw	r24, r18
    18ee:	42 96       	adiw	r24, 0x12	; 18
    18f0:	0e 94 80 08 	call	0x1100	; 0x1100 <EEPROM_compare>
				lcd_disable_blinking();
    18f4:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_disable_blinking>
				menu.clear_is_due=1;
    18f8:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <menu.2949+0x3>
    18fc:	3f cd       	rjmp	.-1410   	; 0x137c <update_menu+0x258>

static uint8_t lcd_displayparams;
//static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command) {
  lcd_send(command, 0);
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	80 ec       	ldi	r24, 0xC0	; 192
    1902:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_send>
				}
			}
			else if (menu.level==1){

				lcd_set_cursor(0,1);
				lcd_puts_P(L("           Back  "));
    1906:	8c e7       	ldi	r24, 0x7C	; 124
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
    190e:	d8 cf       	rjmp	.-80     	; 0x18c0 <update_menu+0x79c>
			water_schedule[item].is_being_changed=1;
			water_schedule[item].hour+=e_dir;
			wrap_around(water_schedule[item].hour, 25);

			//use hour==24 as an off condition
			if(water_schedule[item].hour==24) water_schedule[item].on=0;
    1910:	11 82       	std	Z+1, r1	; 0x01
    1912:	32 cd       	rjmp	.-1436   	; 0x1378 <update_menu+0x254>
			wrap_around(item, 8);

			if (b_pressed){
				if (item==7) {menu.level=0; menu.clear_is_due=1;}
				else {
					menu.level=2;
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menu.2949+0x1>
					lcd_enable_blinking();
    191a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_enable_blinking>
    191e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
				}
			}

			cursor_pos=16+0;
    1922:	90 e1       	ldi	r25, 0x10	; 16
    1924:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cursor_pos.2951>
			if (e_dir!=0) menu.clear_is_due=1;
    1928:	f1 10       	cpse	r15, r1
    192a:	a0 ce       	rjmp	.-704    	; 0x166c <update_menu+0x548>
			b_pressed=0;
    192c:	e1 2c       	mov	r14, r1
    192e:	00 cd       	rjmp	.-1536   	; 0x1330 <update_menu+0x20c>
		}

		if(menu.level==1){
			if(e_dir){
				item+=e_dir;
				wrap_around(item, 3);
    1930:	9d ef       	ldi	r25, 0xFD	; 253
    1932:	6a ce       	rjmp	.-812    	; 0x1608 <update_menu+0x4e4>
		}

		if (menu.level==1){
			if(e_dir){
				//fine control...increase water amount by 50 above 100ml, and by 10 under 100ml
				if (water_ml==100) water_ml+= (e_dir==1) ? 50 : -10;
    1934:	f1 e0       	ldi	r31, 0x01	; 1
    1936:	ff 16       	cp	r15, r31
    1938:	09 f4       	brne	.+2      	; 0x193c <update_menu+0x818>
    193a:	cf c0       	rjmp	.+414    	; 0x1ada <update_menu+0x9b6>
    193c:	8a e5       	ldi	r24, 0x5A	; 90
    193e:	90 e0       	ldi	r25, 0x00	; 0
				else if((0<water_ml) && (water_ml<100)) water_ml+=e_dir*10; //todo check this
				else water_ml+=e_dir*50;
				wrap_around(water_ml, 1000);
    1940:	97 fd       	sbrc	r25, 7
    1942:	b9 c0       	rjmp	.+370    	; 0x1ab6 <update_menu+0x992>
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	4a cd       	rjmp	.-1388   	; 0x13de <update_menu+0x2ba>

		if(menu.level==2){
			//lcd_enable_blinking();
			if(e_dir){
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
				if (item==1) { light_stop_time+=e_dir;  wrap_around(light_stop_time, 24);  }
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	09 f0       	breq	.+2      	; 0x1950 <update_menu+0x82c>
    194e:	c4 cc       	rjmp	.-1656   	; 0x12d8 <update_menu+0x1b4>
    1950:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <light_stop_time>
    1954:	8f 0d       	add	r24, r15
    1956:	88 31       	cpi	r24, 0x18	; 24
    1958:	0c f0       	brlt	.+2      	; 0x195c <update_menu+0x838>
    195a:	a4 c0       	rjmp	.+328    	; 0x1aa4 <update_menu+0x980>
    195c:	87 fd       	sbrc	r24, 7
    195e:	c2 c0       	rjmp	.+388    	; 0x1ae4 <update_menu+0x9c0>
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	f9 2e       	mov	r15, r25
    1964:	f8 0e       	add	r15, r24
    1966:	f0 92 18 01 	sts	0x0118, r15	; 0x800118 <light_stop_time>
    196a:	b6 cc       	rjmp	.-1684   	; 0x12d8 <update_menu+0x1b4>
					temp[1]='0' + (water_schedule[time.days].hour % 10);
					lcd_puts(temp);
				}

				lcd_set_cursor(8,1);
				if (light_stop_time==light_start_time) lcd_puts_P(L("L: off"));
    196c:	83 e9       	ldi	r24, 0x93	; 147
    196e:	92 e0       	ldi	r25, 0x02	; 2
    1970:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
    1974:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menu.2949+0x1>
    1978:	35 cc       	rjmp	.-1942   	; 0x11e4 <update_menu+0xc0>
				else menu.level=2;
				menu.clear_is_due=1;

			}

			cursor_pos= (item==2) ? 16 :( (item==1) ? 14+16 : 6+16);
    197a:	8e e1       	ldi	r24, 0x1E	; 30
    197c:	d9 ce       	rjmp	.-590    	; 0x1730 <update_menu+0x60c>
		if (menu.level==1){
			if(e_dir){
				//fine control...increase water amount by 50 above 100ml, and by 10 under 100ml
				if (water_ml==100) water_ml+= (e_dir==1) ? 50 : -10;
				else if((0<water_ml) && (water_ml<100)) water_ml+=e_dir*10; //todo check this
				else water_ml+=e_dir*50;
    197e:	ef 2d       	mov	r30, r15
    1980:	f2 e3       	ldi	r31, 0x32	; 50
    1982:	ef 02       	muls	r30, r31
    1984:	80 0d       	add	r24, r0
    1986:	91 1d       	adc	r25, r1
    1988:	11 24       	eor	r1, r1
    198a:	22 cd       	rjmp	.-1468   	; 0x13d0 <update_menu+0x2ac>
			wrap_around(item, 5);
			//choose what to show based on cursor pos
			switch(item){
			case 0: cursor_pos=1; break; //set on hour
			case 1: cursor_pos=6; break; //set on hour
			case 2: cursor_pos=9; break;//set on minutes
    198c:	89 e0       	ldi	r24, 0x09	; 9
    198e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cursor_pos.2951>
    1992:	8a ce       	rjmp	.-748    	; 0x16a8 <update_menu+0x584>
			item+=e_dir;
			e_dir=0;
			wrap_around(item, 5);
			//choose what to show based on cursor pos
			switch(item){
			case 0: cursor_pos=1; break; //set on hour
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cursor_pos.2951>
    199a:	86 ce       	rjmp	.-756    	; 0x16a8 <update_menu+0x584>
			case 1: cursor_pos=6; break; //set on hour
			case 2: cursor_pos=9; break;//set on minutes
			case 3: cursor_pos=12; break;//set on seconds
    199c:	8c e0       	ldi	r24, 0x0C	; 12
    199e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cursor_pos.2951>
    19a2:	82 ce       	rjmp	.-764    	; 0x16a8 <update_menu+0x584>

		if(menu.level==2){
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
    19a4:	81 11       	cpse	r24, r1
    19a6:	a6 ce       	rjmp	.-692    	; 0x16f4 <update_menu+0x5d0>
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
    19a8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <time+0x5>
    19ac:	8f 0d       	add	r24, r15
    19ae:	87 30       	cpi	r24, 0x07	; 7
    19b0:	0c f0       	brlt	.+2      	; 0x19b4 <update_menu+0x890>
    19b2:	8a c0       	rjmp	.+276    	; 0x1ac8 <update_menu+0x9a4>
    19b4:	87 fd       	sbrc	r24, 7
    19b6:	98 c0       	rjmp	.+304    	; 0x1ae8 <update_menu+0x9c4>
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	f9 2e       	mov	r15, r25
    19bc:	f8 0e       	add	r15, r24
    19be:	f0 92 ea 01 	sts	0x01EA, r15	; 0x8001ea <time+0x5>
    19c2:	98 ce       	rjmp	.-720    	; 0x16f4 <update_menu+0x5d0>
			}

			if(b_pressed){
				menu.level=1;
				//lcd_disable_blinking();
				if (item==0) EEPROM_compare(LIGHT_START_ADDRESS, light_start_time); ////////////////////////////////////////////////////////////////
    19c4:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <light_start_time>
    19c8:	8a e0       	ldi	r24, 0x0A	; 10
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 80 08 	call	0x1100	; 0x1100 <EEPROM_compare>
    19d0:	94 cc       	rjmp	.-1752   	; 0x12fa <update_menu+0x1d6>
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
			case 3: time.seconds+=e_dir;	wrap_around(time.seconds, 60); 	break;//set on seconds
			}
			if (b_pressed) {
				menu.level=1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menu.2949+0x1>
				lcd_disable_blinking();
    19d8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_disable_blinking>
				_tm.sec=time.seconds;
    19dc:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <time+0x2>
    19e0:	08 2e       	mov	r0, r24
    19e2:	00 0c       	add	r0, r0
    19e4:	99 0b       	sbc	r25, r25
    19e6:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_tm+0x1>
    19ea:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_tm>
				_tm.min=time.minutes;
    19ee:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <time+0x3>
    19f2:	08 2e       	mov	r0, r24
    19f4:	00 0c       	add	r0, r0
    19f6:	99 0b       	sbc	r25, r25
    19f8:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <_tm+0x3>
    19fc:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <_tm+0x2>
				_tm.hour=time.hours;
    1a00:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <time+0x4>
    1a04:	08 2e       	mov	r0, r24
    1a06:	00 0c       	add	r0, r0
    1a08:	99 0b       	sbc	r25, r25
    1a0a:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <_tm+0x5>
    1a0e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <_tm+0x4>
				_tm.wday=time.days;
    1a12:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <time+0x5>
    1a16:	08 2e       	mov	r0, r24
    1a18:	00 0c       	add	r0, r0
    1a1a:	99 0b       	sbc	r25, r25
    1a1c:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <_tm+0xd>
    1a20:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_tm+0xc>
				rtc_set_time(&_tm);
    1a24:	86 e1       	ldi	r24, 0x16	; 22
    1a26:	92 e0       	ldi	r25, 0x02	; 2
    1a28:	0e 94 d5 05 	call	0xbaa	; 0xbaa <rtc_set_time>
				time.is_being_changed=0;
    1a2c:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <time+0x7>
    1a30:	63 ce       	rjmp	.-826    	; 0x16f8 <update_menu+0x5d4>
				item+=e_dir;
				wrap_around(item, 3);
				menu.clear_is_due=1;
			}
			if(b_pressed){
				if (item==2) {menu.level=0; item=0;}
    1a32:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <menu.2949+0x1>
    1a36:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <item.2950>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	f4 cd       	rjmp	.-1048   	; 0x1626 <update_menu+0x502>
		}

		if (menu.level==2){
			water_schedule[item].is_being_changed=1;
			water_schedule[item].hour+=e_dir;
			wrap_around(water_schedule[item].hour, 25);
    1a3e:	69 e1       	ldi	r22, 0x19	; 25
    1a40:	91 cc       	rjmp	.-1758   	; 0x1364 <update_menu+0x240>

		//change the time
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
			wrap_around(item, 5);
    1a42:	95 e0       	ldi	r25, 0x05	; 5
    1a44:	20 ce       	rjmp	.-960    	; 0x1686 <update_menu+0x562>
		}

		if(menu.level==2){
			//lcd_enable_blinking();
			if(e_dir){
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
    1a46:	98 ee       	ldi	r25, 0xE8	; 232
    1a48:	43 cc       	rjmp	.-1914   	; 0x12d0 <update_menu+0x1ac>
			lcd_puts(time.whole_time);

			if (menu.level==0){
				lcd_set_cursor(0,1);
				lcd_puts_P(L("W:"));
				if (water_schedule[time.days].hour==24) lcd_puts_P(L("//"));
    1a4a:	8a e9       	ldi	r24, 0x9A	; 154
    1a4c:	92 e0       	ldi	r25, 0x02	; 2
    1a4e:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
    1a52:	e2 ce       	rjmp	.-572    	; 0x1818 <update_menu+0x6f4>
						char temp[3]={0};
						temp[0]='0' + (water_schedule[item].hour / 10);
						temp[1]='0' + (water_schedule[item].hour % 10);
						lcd_puts(temp);
					}
					else lcd_puts_P(L(": No water"));
    1a54:	83 e4       	ldi	r24, 0x43	; 67
    1a56:	92 e0       	ldi	r25, 0x02	; 2
    1a58:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
    1a5c:	64 cc       	rjmp	.-1848   	; 0x1326 <update_menu+0x202>
		}

		//change the time
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
    1a5e:	f1 2c       	mov	r15, r1
			case 1:
			case 2:
			case 3: menu.level=2; break;
			case 4: menu.level=0; menu.clear_is_due=1; break;//exit to level 0
			}
			b_pressed=0;
    1a60:	e1 2c       	mov	r14, r1
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
    1a62:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <time+0x4>
    1a66:	8f 0d       	add	r24, r15
    1a68:	88 31       	cpi	r24, 0x18	; 24
    1a6a:	54 f5       	brge	.+84     	; 0x1ac0 <update_menu+0x99c>
    1a6c:	87 fd       	sbrc	r24, 7
    1a6e:	40 c0       	rjmp	.+128    	; 0x1af0 <update_menu+0x9cc>
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	f9 2e       	mov	r15, r25
    1a74:	f8 0e       	add	r15, r24
    1a76:	f0 92 e9 01 	sts	0x01E9, r15	; 0x8001e9 <time+0x4>
    1a7a:	3c ce       	rjmp	.-904    	; 0x16f4 <update_menu+0x5d0>
		}

		//change the time
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
    1a7c:	f1 2c       	mov	r15, r1
			case 1:
			case 2:
			case 3: menu.level=2; break;
			case 4: menu.level=0; menu.clear_is_due=1; break;//exit to level 0
			}
			b_pressed=0;
    1a7e:	e1 2c       	mov	r14, r1
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
    1a80:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <time+0x3>
    1a84:	8f 0d       	add	r24, r15
    1a86:	8c 33       	cpi	r24, 0x3C	; 60
    1a88:	ec f4       	brge	.+58     	; 0x1ac4 <update_menu+0x9a0>
    1a8a:	87 fd       	sbrc	r24, 7
    1a8c:	33 c0       	rjmp	.+102    	; 0x1af4 <update_menu+0x9d0>
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	f9 2e       	mov	r15, r25
    1a92:	f8 0e       	add	r15, r24
    1a94:	f0 92 e8 01 	sts	0x01E8, r15	; 0x8001e8 <time+0x3>
    1a98:	2d ce       	rjmp	.-934    	; 0x16f4 <update_menu+0x5d0>

			//display level 1 or 2 settings if on that level
			if (menu.level>=1){
				lcd_set_cursor(0,1);
				//8th item: back option
				if (item==7) lcd_puts_P(L("Back            "));
    1a9a:	8a e5       	ldi	r24, 0x5A	; 90
    1a9c:	92 e0       	ldi	r25, 0x02	; 2
    1a9e:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
    1aa2:	41 cc       	rjmp	.-1918   	; 0x1326 <update_menu+0x202>

		if(menu.level==2){
			//lcd_enable_blinking();
			if(e_dir){
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
				if (item==1) { light_stop_time+=e_dir;  wrap_around(light_stop_time, 24);  }
    1aa4:	98 ee       	ldi	r25, 0xE8	; 232
    1aa6:	5d cf       	rjmp	.-326    	; 0x1962 <update_menu+0x83e>

			if(b_pressed){
				menu.level=1;
				//lcd_disable_blinking();
				if (item==0) EEPROM_compare(LIGHT_START_ADDRESS, light_start_time); ////////////////////////////////////////////////////////////////
				if (item==1) EEPROM_compare(LIGHT_STOP_ADDRESS , light_stop_time ); ////////////////////////////////////////////////////////////////
    1aa8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <light_stop_time>
    1aac:	8c e0       	ldi	r24, 0x0C	; 12
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 80 08 	call	0x1100	; 0x1100 <EEPROM_compare>
    1ab4:	22 cc       	rjmp	.-1980   	; 0x12fa <update_menu+0x1d6>
			if(e_dir){
				//fine control...increase water amount by 50 above 100ml, and by 10 under 100ml
				if (water_ml==100) water_ml+= (e_dir==1) ? 50 : -10;
				else if((0<water_ml) && (water_ml<100)) water_ml+=e_dir*10; //todo check this
				else water_ml+=e_dir*50;
				wrap_around(water_ml, 1000);
    1ab6:	28 ee       	ldi	r18, 0xE8	; 232
    1ab8:	33 e0       	ldi	r19, 0x03	; 3
    1aba:	91 cc       	rjmp	.-1758   	; 0x13de <update_menu+0x2ba>
		}

		if(menu.level==1){
			if(e_dir){
				item+=e_dir;
				wrap_around(item, 3);
    1abc:	93 e0       	ldi	r25, 0x03	; 3
    1abe:	a4 cd       	rjmp	.-1208   	; 0x1608 <update_menu+0x4e4>
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
    1ac0:	98 ee       	ldi	r25, 0xE8	; 232
    1ac2:	d7 cf       	rjmp	.-82     	; 0x1a72 <update_menu+0x94e>
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
    1ac4:	94 ec       	ldi	r25, 0xC4	; 196
    1ac6:	e4 cf       	rjmp	.-56     	; 0x1a90 <update_menu+0x96c>
		if(menu.level==2){
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
    1ac8:	99 ef       	ldi	r25, 0xF9	; 249
    1aca:	77 cf       	rjmp	.-274    	; 0x19ba <update_menu+0x896>
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
			case 3: time.seconds+=e_dir;	wrap_around(time.seconds, 60); 	break;//set on seconds
    1acc:	94 ec       	ldi	r25, 0xC4	; 196
    1ace:	0e ce       	rjmp	.-996    	; 0x16ec <update_menu+0x5c8>

		if(menu.level==2){
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
    1ad0:	81 11       	cpse	r24, r1
    1ad2:	12 ce       	rjmp	.-988    	; 0x16f8 <update_menu+0x5d4>
		}

		//change the time
		if (menu.level==1){
			item+=e_dir;
			e_dir=0;
    1ad4:	f1 2c       	mov	r15, r1
			case 1:
			case 2:
			case 3: menu.level=2; break;
			case 4: menu.level=0; menu.clear_is_due=1; break;//exit to level 0
			}
			b_pressed=0;
    1ad6:	e1 2c       	mov	r14, r1
    1ad8:	67 cf       	rjmp	.-306    	; 0x19a8 <update_menu+0x884>
    1ada:	86 e9       	ldi	r24, 0x96	; 150
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	30 cf       	rjmp	.-416    	; 0x1940 <update_menu+0x81c>
		}

		if(menu.level==2){
			//lcd_enable_blinking();
			if(e_dir){
				if (item==0) { light_start_time+=e_dir; wrap_around(light_start_time, 24); }
    1ae0:	98 e1       	ldi	r25, 0x18	; 24
    1ae2:	f6 cb       	rjmp	.-2068   	; 0x12d0 <update_menu+0x1ac>
				if (item==1) { light_stop_time+=e_dir;  wrap_around(light_stop_time, 24);  }
    1ae4:	98 e1       	ldi	r25, 0x18	; 24
    1ae6:	3d cf       	rjmp	.-390    	; 0x1962 <update_menu+0x83e>
		if(menu.level==2){
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
    1ae8:	97 e0       	ldi	r25, 0x07	; 7
    1aea:	67 cf       	rjmp	.-306    	; 0x19ba <update_menu+0x896>
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
			case 3: time.seconds+=e_dir;	wrap_around(time.seconds, 60); 	break;//set on seconds
    1aec:	9c e3       	ldi	r25, 0x3C	; 60
    1aee:	fe cd       	rjmp	.-1028   	; 0x16ec <update_menu+0x5c8>
			time.is_being_changed=1;
			lcd_enable_blinking();

			switch(item){
			case 0: time.days+=  e_dir; 	wrap_around(time.days, 7); 	break; //set on hour
			case 1: time.hours+=  e_dir; 	wrap_around(time.hours, 24); 	break; //set on hour
    1af0:	98 e1       	ldi	r25, 0x18	; 24
    1af2:	bf cf       	rjmp	.-130    	; 0x1a72 <update_menu+0x94e>
			case 2: time.minutes+=e_dir;	wrap_around(time.minutes, 60); 	break;	//set on minutes
    1af4:	9c e3       	ldi	r25, 0x3C	; 60
    1af6:	cc cf       	rjmp	.-104    	; 0x1a90 <update_menu+0x96c>

00001af8 <main>:
int main(void) {
	uint16_t millis1=0;
	uint16_t millis2=0;


	MOTOR_PORT |= _BV(MOTOR_PIN); //set port to 0, ready to pull-down if needed
    1af8:	28 9a       	sbi	0x05, 0	; 5
	LIGHT_PORT |= _BV(LIGHT_PIN); //ditto above
    1afa:	2a 9a       	sbi	0x05, 2	; 5
	BACKLIGHT_PORT |= _BV(BACKLIGHT_BIT); //ditto above
    1afc:	2f 9a       	sbi	0x05, 7	; 5
	BACKLIGHT_HIGH;
    1afe:	2f 9a       	sbi	0x05, 7	; 5
	//LIGHT_ON;
	MOTOR_OFF;
    1b00:	28 98       	cbi	0x05, 0	; 5

	LIGHT_OFF;
    1b02:	2a 98       	cbi	0x05, 2	; 5
	//motor_startup();

	//set timer 2 for timekeeping and non-blocking delays
	//set CTC mode (compare on match)
	TCCR2A = (1<<WGM20) | (1<<WGM21);
    1b04:	23 e0       	ldi	r18, 0x03	; 3
    1b06:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	//at 8Mhz, a prescaler of 128 with compare of 125 gives an exact 4ms interrupt (internally divides 8Mhz by 2)
	TCCR2B = (1<<CS22) | (0<<CS21) | (1<<CS20); //perscaler 128 for 4ms interrupt timer
    1b0a:	85 e0       	ldi	r24, 0x05	; 5
    1b0c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	//TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20); //perscaler 32 for 1ms interrupt timer
	//set the compare value
	OCR2A = 125;
    1b10:	8d e7       	ldi	r24, 0x7D	; 125
    1b12:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	//enable and setup interrupt on match with OCR2A
	TIMSK2 = (1<<OCIE2A);
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>


	//setup encoder pins interrupts
	//set pins as inputs
	DDRB &= ~(1<<ENC_BUTTON) ;
    1b1c:	21 98       	cbi	0x04, 1	; 4
	DDRC &= ~(1<<ENC_B_PIN) & ~(1<<ENC_A_PIN);
    1b1e:	87 b1       	in	r24, 0x07	; 7
    1b20:	8c 7f       	andi	r24, 0xFC	; 252
    1b22:	87 b9       	out	0x07, r24	; 7
	//enable internal pullups
	PORTB |= (1<<ENC_BUTTON) ;
    1b24:	29 9a       	sbi	0x05, 1	; 5
	PORTC |=  (1<<ENC_B_PIN) | (1<<ENC_A_PIN);
    1b26:	88 b1       	in	r24, 0x08	; 8
    1b28:	83 60       	ori	r24, 0x03	; 3
    1b2a:	88 b9       	out	0x08, r24	; 8
	//enable INT on pins with INT[0:7] and INT[8:14]
	PCICR = (1<<PCIE0) | (1<<PCIE1);
    1b2c:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	//set which pins are to be checked for events
	PCMSK1 = (1<<ENC_A_PIN) ;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	PCMSK0 = (1<<ENC_BUTTON);
    1b36:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>

	restore_vars_from_EEPROM();
    1b3a:	0e 94 42 08 	call	0x1084	; 0x1084 <restore_vars_from_EEPROM>


	lcd_init();
    1b3e:	0e 94 05 02 	call	0x40a	; 0x40a <lcd_init>
	lcd_puts_P(L("{ Plant  Saver }"));
    1b42:	8a ef       	ldi	r24, 0xFA	; 250
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	0e 94 90 02 	call	0x520	; 0x520 <lcd_puts_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b4a:	2f ef       	ldi	r18, 0xFF	; 255
    1b4c:	89 e6       	ldi	r24, 0x69	; 105
    1b4e:	98 e1       	ldi	r25, 0x18	; 24
    1b50:	21 50       	subi	r18, 0x01	; 1
    1b52:	80 40       	sbci	r24, 0x00	; 0
    1b54:	90 40       	sbci	r25, 0x00	; 0
    1b56:	e1 f7       	brne	.-8      	; 0x1b50 <main+0x58>
    1b58:	00 c0       	rjmp	.+0      	; 0x1b5a <main+0x62>
    1b5a:	00 00       	nop
	_delay_ms(1000);
	lcd_clear_top();
    1b5c:	0e 94 be 02 	call	0x57c	; 0x57c <lcd_clear_top>

	//enable all interrupts
	sei();
    1b60:	78 94       	sei

	time.has_changed = 0;
    1b62:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <time+0x6>
	time.millis = 0;
    1b66:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <time+0x1>
    1b6a:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <time>
	/*

	 //

	*/
	rtc_init();
    1b6e:	0e 94 cd 04 	call	0x99a	; 0x99a <rtc_init>

	time.seconds = atoi(&TIME__[6]) + 4;
    1b72:	80 e1       	ldi	r24, 0x10	; 16
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <atoi>
    1b7a:	8c 5f       	subi	r24, 0xFC	; 252
    1b7c:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <time+0x2>
	time.minutes = atoi(&TIME__[3]);
    1b80:	8d e0       	ldi	r24, 0x0D	; 13
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <atoi>
    1b88:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <time+0x3>
	time.hours = atoi(&TIME__[0]);
    1b8c:	8a e0       	ldi	r24, 0x0A	; 10
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <atoi>
    1b94:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <time+0x4>
	time.days = 6;
    1b98:	86 e0       	ldi	r24, 0x06	; 6
    1b9a:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <time+0x5>
		_tm.hour=time.hours;
		_tm.wday=time.days;
		rtc_set_time(&_tm);
	}
	*/
	rtc_get_time();
    1b9e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <rtc_get_time>
	time.seconds = (int8_t) _tm.sec;
    1ba2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_tm>
    1ba6:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <time+0x2>
	time.minutes = (int8_t) _tm.min;
    1baa:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <_tm+0x2>
    1bae:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <time+0x3>
	time.hours = (int8_t) _tm.hour;
    1bb2:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <_tm+0x4>
    1bb6:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <time+0x4>
	time.days = (int8_t) _tm.wday;
    1bba:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_tm+0xc>
    1bbe:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <time+0x5>


	format_2_string(&time);
    1bc2:	85 ee       	ldi	r24, 0xE5	; 229
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	0e 94 67 06 	call	0xcce	; 0xcce <format_2_string>
const char TIME__[] = __TIME__;
//const char DATE__[] = __DATE__;

int main(void) {
	uint16_t millis1=0;
	uint16_t millis2=0;
    1bca:	c0 e0       	ldi	r28, 0x00	; 0
    1bcc:	d0 e0       	ldi	r29, 0x00	; 0

	format_2_string(&time);

	while (1) {

		if (tick_tock){
    1bce:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tick_tock>
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <main+0x106>
			update_the_stuff(tick_tock);
			tick_tock=0;
		}


		if (millis2 < LCD_REFRESH_RATE){
    1bd6:	c8 37       	cpi	r28, 0x78	; 120
    1bd8:	d1 05       	cpc	r29, r1
    1bda:	c8 f7       	brcc	.-14     	; 0x1bce <main+0xd6>
			millis2 -= LCD_REFRESH_RATE;
    1bdc:	c8 57       	subi	r28, 0x78	; 120
    1bde:	d1 09       	sbc	r29, r1

			//if (enc_button_pressed) MOTOR_TOGGLE;

			update_menu(enc_dir, enc_button_pressed, 0);
    1be0:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <enc_button_pressed>
    1be4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <enc_dir>
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	0e 94 92 08 	call	0x1124	; 0x1124 <update_menu>

			enc_dir=0;
    1bee:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <enc_dir>
			enc_button_pressed=0;
    1bf2:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <enc_button_pressed>

	format_2_string(&time);

	while (1) {

		if (tick_tock){
    1bf6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tick_tock>
    1bfa:	88 23       	and	r24, r24
    1bfc:	61 f3       	breq	.-40     	; 0x1bd6 <main+0xde>
			millis1 += tick_tock;
    1bfe:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tick_tock>
			millis2 += tick_tock;
    1c02:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tick_tock>
    1c06:	c8 0f       	add	r28, r24
    1c08:	d1 1d       	adc	r29, r1
			update_clock(tick_tock);
    1c0a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tick_tock>
    1c0e:	0e 94 c1 06 	call	0xd82	; 0xd82 <update_clock>
			update_the_stuff(tick_tock);
    1c12:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tick_tock>
    1c16:	0e 94 8c 07 	call	0xf18	; 0xf18 <update_the_stuff>
			tick_tock=0;
    1c1a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <tick_tock>
    1c1e:	db cf       	rjmp	.-74     	; 0x1bd6 <main+0xde>

00001c20 <__divmodhi4>:
    1c20:	97 fb       	bst	r25, 7
    1c22:	07 2e       	mov	r0, r23
    1c24:	16 f4       	brtc	.+4      	; 0x1c2a <__divmodhi4+0xa>
    1c26:	00 94       	com	r0
    1c28:	07 d0       	rcall	.+14     	; 0x1c38 <__divmodhi4_neg1>
    1c2a:	77 fd       	sbrc	r23, 7
    1c2c:	09 d0       	rcall	.+18     	; 0x1c40 <__divmodhi4_neg2>
    1c2e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__udivmodhi4>
    1c32:	07 fc       	sbrc	r0, 7
    1c34:	05 d0       	rcall	.+10     	; 0x1c40 <__divmodhi4_neg2>
    1c36:	3e f4       	brtc	.+14     	; 0x1c46 <__divmodhi4_exit>

00001c38 <__divmodhi4_neg1>:
    1c38:	90 95       	com	r25
    1c3a:	81 95       	neg	r24
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	08 95       	ret

00001c40 <__divmodhi4_neg2>:
    1c40:	70 95       	com	r23
    1c42:	61 95       	neg	r22
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255

00001c46 <__divmodhi4_exit>:
    1c46:	08 95       	ret

00001c48 <__tablejump2__>:
    1c48:	ee 0f       	add	r30, r30
    1c4a:	ff 1f       	adc	r31, r31
    1c4c:	05 90       	lpm	r0, Z+
    1c4e:	f4 91       	lpm	r31, Z
    1c50:	e0 2d       	mov	r30, r0
    1c52:	09 94       	ijmp

00001c54 <__usmulhisi3>:
    1c54:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__umulhisi3>

00001c58 <__usmulhisi3_tail>:
    1c58:	b7 ff       	sbrs	r27, 7
    1c5a:	08 95       	ret
    1c5c:	82 1b       	sub	r24, r18
    1c5e:	93 0b       	sbc	r25, r19
    1c60:	08 95       	ret

00001c62 <__udivmodhi4>:
    1c62:	aa 1b       	sub	r26, r26
    1c64:	bb 1b       	sub	r27, r27
    1c66:	51 e1       	ldi	r21, 0x11	; 17
    1c68:	07 c0       	rjmp	.+14     	; 0x1c78 <__udivmodhi4_ep>

00001c6a <__udivmodhi4_loop>:
    1c6a:	aa 1f       	adc	r26, r26
    1c6c:	bb 1f       	adc	r27, r27
    1c6e:	a6 17       	cp	r26, r22
    1c70:	b7 07       	cpc	r27, r23
    1c72:	10 f0       	brcs	.+4      	; 0x1c78 <__udivmodhi4_ep>
    1c74:	a6 1b       	sub	r26, r22
    1c76:	b7 0b       	sbc	r27, r23

00001c78 <__udivmodhi4_ep>:
    1c78:	88 1f       	adc	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	5a 95       	dec	r21
    1c7e:	a9 f7       	brne	.-22     	; 0x1c6a <__udivmodhi4_loop>
    1c80:	80 95       	com	r24
    1c82:	90 95       	com	r25
    1c84:	bc 01       	movw	r22, r24
    1c86:	cd 01       	movw	r24, r26
    1c88:	08 95       	ret

00001c8a <__umulhisi3>:
    1c8a:	a2 9f       	mul	r26, r18
    1c8c:	b0 01       	movw	r22, r0
    1c8e:	b3 9f       	mul	r27, r19
    1c90:	c0 01       	movw	r24, r0
    1c92:	a3 9f       	mul	r26, r19
    1c94:	70 0d       	add	r23, r0
    1c96:	81 1d       	adc	r24, r1
    1c98:	11 24       	eor	r1, r1
    1c9a:	91 1d       	adc	r25, r1
    1c9c:	b2 9f       	mul	r27, r18
    1c9e:	70 0d       	add	r23, r0
    1ca0:	81 1d       	adc	r24, r1
    1ca2:	11 24       	eor	r1, r1
    1ca4:	91 1d       	adc	r25, r1
    1ca6:	08 95       	ret

00001ca8 <atoi>:
    1ca8:	fc 01       	movw	r30, r24
    1caa:	88 27       	eor	r24, r24
    1cac:	99 27       	eor	r25, r25
    1cae:	e8 94       	clt
    1cb0:	21 91       	ld	r18, Z+
    1cb2:	20 32       	cpi	r18, 0x20	; 32
    1cb4:	e9 f3       	breq	.-6      	; 0x1cb0 <atoi+0x8>
    1cb6:	29 30       	cpi	r18, 0x09	; 9
    1cb8:	10 f0       	brcs	.+4      	; 0x1cbe <atoi+0x16>
    1cba:	2e 30       	cpi	r18, 0x0E	; 14
    1cbc:	c8 f3       	brcs	.-14     	; 0x1cb0 <atoi+0x8>
    1cbe:	2b 32       	cpi	r18, 0x2B	; 43
    1cc0:	41 f0       	breq	.+16     	; 0x1cd2 <atoi+0x2a>
    1cc2:	2d 32       	cpi	r18, 0x2D	; 45
    1cc4:	39 f4       	brne	.+14     	; 0x1cd4 <atoi+0x2c>
    1cc6:	68 94       	set
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <atoi+0x2a>
    1cca:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__mulhi_const_10>
    1cce:	82 0f       	add	r24, r18
    1cd0:	91 1d       	adc	r25, r1
    1cd2:	21 91       	ld	r18, Z+
    1cd4:	20 53       	subi	r18, 0x30	; 48
    1cd6:	2a 30       	cpi	r18, 0x0A	; 10
    1cd8:	c0 f3       	brcs	.-16     	; 0x1cca <atoi+0x22>
    1cda:	1e f4       	brtc	.+6      	; 0x1ce2 <atoi+0x3a>
    1cdc:	90 95       	com	r25
    1cde:	81 95       	neg	r24
    1ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce2:	08 95       	ret

00001ce4 <__itoa_ncheck>:
    1ce4:	bb 27       	eor	r27, r27
    1ce6:	4a 30       	cpi	r20, 0x0A	; 10
    1ce8:	31 f4       	brne	.+12     	; 0x1cf6 <__itoa_ncheck+0x12>
    1cea:	99 23       	and	r25, r25
    1cec:	22 f4       	brpl	.+8      	; 0x1cf6 <__itoa_ncheck+0x12>
    1cee:	bd e2       	ldi	r27, 0x2D	; 45
    1cf0:	90 95       	com	r25
    1cf2:	81 95       	neg	r24
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__utoa_common>

00001cfa <__ltoa_ncheck>:
    1cfa:	bb 27       	eor	r27, r27
    1cfc:	2a 30       	cpi	r18, 0x0A	; 10
    1cfe:	51 f4       	brne	.+20     	; 0x1d14 <__ltoa_ncheck+0x1a>
    1d00:	99 23       	and	r25, r25
    1d02:	42 f4       	brpl	.+16     	; 0x1d14 <__ltoa_ncheck+0x1a>
    1d04:	bd e2       	ldi	r27, 0x2D	; 45
    1d06:	90 95       	com	r25
    1d08:	80 95       	com	r24
    1d0a:	70 95       	com	r23
    1d0c:	61 95       	neg	r22
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	8f 4f       	sbci	r24, 0xFF	; 255
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__ultoa_common>

00001d18 <__mulhi_const_10>:
    1d18:	7a e0       	ldi	r23, 0x0A	; 10
    1d1a:	97 9f       	mul	r25, r23
    1d1c:	90 2d       	mov	r25, r0
    1d1e:	87 9f       	mul	r24, r23
    1d20:	80 2d       	mov	r24, r0
    1d22:	91 0d       	add	r25, r1
    1d24:	11 24       	eor	r1, r1
    1d26:	08 95       	ret

00001d28 <__ultoa_ncheck>:
    1d28:	bb 27       	eor	r27, r27

00001d2a <__ultoa_common>:
    1d2a:	fa 01       	movw	r30, r20
    1d2c:	a6 2f       	mov	r26, r22
    1d2e:	62 17       	cp	r22, r18
    1d30:	71 05       	cpc	r23, r1
    1d32:	81 05       	cpc	r24, r1
    1d34:	91 05       	cpc	r25, r1
    1d36:	33 0b       	sbc	r19, r19
    1d38:	30 fb       	bst	r19, 0
    1d3a:	66 f0       	brts	.+24     	; 0x1d54 <__ultoa_common+0x2a>
    1d3c:	aa 27       	eor	r26, r26
    1d3e:	66 0f       	add	r22, r22
    1d40:	77 1f       	adc	r23, r23
    1d42:	88 1f       	adc	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	aa 1f       	adc	r26, r26
    1d48:	a2 17       	cp	r26, r18
    1d4a:	10 f0       	brcs	.+4      	; 0x1d50 <__ultoa_common+0x26>
    1d4c:	a2 1b       	sub	r26, r18
    1d4e:	63 95       	inc	r22
    1d50:	38 50       	subi	r19, 0x08	; 8
    1d52:	a9 f7       	brne	.-22     	; 0x1d3e <__ultoa_common+0x14>
    1d54:	a0 5d       	subi	r26, 0xD0	; 208
    1d56:	aa 33       	cpi	r26, 0x3A	; 58
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <__ultoa_common+0x32>
    1d5a:	a9 5d       	subi	r26, 0xD9	; 217
    1d5c:	a1 93       	st	Z+, r26
    1d5e:	36 f7       	brtc	.-52     	; 0x1d2c <__ultoa_common+0x2>
    1d60:	b1 11       	cpse	r27, r1
    1d62:	b1 93       	st	Z+, r27
    1d64:	10 82       	st	Z, r1
    1d66:	ca 01       	movw	r24, r20
    1d68:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <strrev>

00001d6c <__utoa_ncheck>:
    1d6c:	bb 27       	eor	r27, r27

00001d6e <__utoa_common>:
    1d6e:	fb 01       	movw	r30, r22
    1d70:	55 27       	eor	r21, r21
    1d72:	aa 27       	eor	r26, r26
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	aa 1f       	adc	r26, r26
    1d7a:	a4 17       	cp	r26, r20
    1d7c:	10 f0       	brcs	.+4      	; 0x1d82 <__utoa_common+0x14>
    1d7e:	a4 1b       	sub	r26, r20
    1d80:	83 95       	inc	r24
    1d82:	50 51       	subi	r21, 0x10	; 16
    1d84:	b9 f7       	brne	.-18     	; 0x1d74 <__utoa_common+0x6>
    1d86:	a0 5d       	subi	r26, 0xD0	; 208
    1d88:	aa 33       	cpi	r26, 0x3A	; 58
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <__utoa_common+0x20>
    1d8c:	a9 5d       	subi	r26, 0xD9	; 217
    1d8e:	a1 93       	st	Z+, r26
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	79 f7       	brne	.-34     	; 0x1d72 <__utoa_common+0x4>
    1d94:	b1 11       	cpse	r27, r1
    1d96:	b1 93       	st	Z+, r27
    1d98:	11 92       	st	Z+, r1
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <strrev>

00001da0 <strrev>:
    1da0:	dc 01       	movw	r26, r24
    1da2:	fc 01       	movw	r30, r24
    1da4:	67 2f       	mov	r22, r23
    1da6:	71 91       	ld	r23, Z+
    1da8:	77 23       	and	r23, r23
    1daa:	e1 f7       	brne	.-8      	; 0x1da4 <strrev+0x4>
    1dac:	32 97       	sbiw	r30, 0x02	; 2
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <strrev+0x18>
    1db0:	7c 91       	ld	r23, X
    1db2:	6d 93       	st	X+, r22
    1db4:	70 83       	st	Z, r23
    1db6:	62 91       	ld	r22, -Z
    1db8:	ae 17       	cp	r26, r30
    1dba:	bf 07       	cpc	r27, r31
    1dbc:	c8 f3       	brcs	.-14     	; 0x1db0 <strrev+0x10>
    1dbe:	08 95       	ret

00001dc0 <_exit>:
    1dc0:	f8 94       	cli

00001dc2 <__stop_program>:
    1dc2:	ff cf       	rjmp	.-2      	; 0x1dc2 <__stop_program>
